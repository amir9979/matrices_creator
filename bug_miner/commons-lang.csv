valid,type,issue,module,commit,parent,testcase,has_test_annotation,traces,bugged_components,description,extra_description,blamed_components,diff
TRUE,Regression,-1,commons-lang,13a0cc63cdf11ebb98c748599a2b06eeb27e21a2,dbf4cd5f4275d1e04719fcb20e4650e0f7f008dc,org.apache.commons.lang.text.StrBuilderAppendInsertTest.testAppendSeparator_char_char,FALSE,[],,,,org.apache.commons.lang.text.strbuilder.appendseparator(string),"u'diff --git a/src/test/org/apache/commons/lang/text/StrBuilderAppendInsertTest.java b/src/test/org/apache/commons/lang/text/StrBuilderAppendInsertTest.java\nindex 1b9386e7b..95781a153 100644\n--- a/src/test/org/apache/commons/lang/text/StrBuilderAppendInsertTest.java\n+++ b/src/test/org/apache/commons/lang/text/StrBuilderAppendInsertTest.java\n@@ -993,6 +993,8 @@ public class StrBuilderAppendInsertTest extends TestCase {\n         sb.appendSeparator("","");\n         assertEquals(""foo,"", sb.toString());\n     }\n+    \n+    //-----------------------------------------------------------------------\n \n     //-----------------------------------------------------------------------\n     public void testAppendSeparator_char() {\n@@ -1004,6 +1006,18 @@ public class StrBuilderAppendInsertTest extends TestCase {\n         sb.appendSeparator(\',\');\n         assertEquals(""foo,"", sb.toString());\n     }\n+    public void testAppendSeparator_char_char() {\n+    \tStrBuilder sb = new StrBuilder();\n+    \tfinal char startSeparator = \':\';\n+    \tfinal char standardSeparator = \',\';\n+    \tfinal String foo = ""foo"";\n+        sb.appendSeparator(standardSeparator, startSeparator);  // no effect\n+        assertEquals(String.valueOf(startSeparator), sb.toString());\n+        sb.append(foo);\n+        assertEquals(String.valueOf(startSeparator) + foo, sb.toString());\n+        sb.appendSeparator(standardSeparator, startSeparator);\n+        assertEquals(String.valueOf(startSeparator) + foo + standardSeparator, sb.toString());\n+    }\n \n     //-----------------------------------------------------------------------\n     public void testAppendSeparator_String_int() {\n@@ -1356,5 +1370,4 @@ public class StrBuilderAppendInsertTest extends TestCase {\n         sb.insert(0, (char[]) null, 0, 0);\n         assertEquals(""nullnullfoonullbarbaz"", sb.toString());\n     }\n-\n }'"
TRUE,Regression,-1,commons-lang,13a0cc63cdf11ebb98c748599a2b06eeb27e21a2,dbf4cd5f4275d1e04719fcb20e4650e0f7f008dc,org.apache.commons.lang.text.StrBuilderAppendInsertTest.testAppendSeparator_char_char,FALSE,[],,,,org.apache.commons.lang.text.strbuilder.appendseparator(string),"u'diff --git a/src/test/org/apache/commons/lang/text/StrBuilderAppendInsertTest.java b/src/test/org/apache/commons/lang/text/StrBuilderAppendInsertTest.java\nindex 1b9386e7b..95781a153 100644\n--- a/src/test/org/apache/commons/lang/text/StrBuilderAppendInsertTest.java\n+++ b/src/test/org/apache/commons/lang/text/StrBuilderAppendInsertTest.java\n@@ -993,6 +993,8 @@ public class StrBuilderAppendInsertTest extends TestCase {\n         sb.appendSeparator("","");\n         assertEquals(""foo,"", sb.toString());\n     }\n+    \n+    //-----------------------------------------------------------------------\n \n     //-----------------------------------------------------------------------\n     public void testAppendSeparator_char() {\n@@ -1004,6 +1006,18 @@ public class StrBuilderAppendInsertTest extends TestCase {\n         sb.appendSeparator(\',\');\n         assertEquals(""foo,"", sb.toString());\n     }\n+    public void testAppendSeparator_char_char() {\n+    \tStrBuilder sb = new StrBuilder();\n+    \tfinal char startSeparator = \':\';\n+    \tfinal char standardSeparator = \',\';\n+    \tfinal String foo = ""foo"";\n+        sb.appendSeparator(standardSeparator, startSeparator);  // no effect\n+        assertEquals(String.valueOf(startSeparator), sb.toString());\n+        sb.append(foo);\n+        assertEquals(String.valueOf(startSeparator) + foo, sb.toString());\n+        sb.appendSeparator(standardSeparator, startSeparator);\n+        assertEquals(String.valueOf(startSeparator) + foo + standardSeparator, sb.toString());\n+    }\n \n     //-----------------------------------------------------------------------\n     public void testAppendSeparator_String_int() {\n@@ -1356,5 +1370,4 @@ public class StrBuilderAppendInsertTest extends TestCase {\n         sb.insert(0, (char[]) null, 0, 0);\n         assertEquals(""nullnullfoonullbarbaz"", sb.toString());\n     }\n-\n }'"
TRUE,Delta,-1,commons-lang,0add1e8975336c65513b26123d48b221e2515ddc,4a882e76d9c9940ac561e8f17ede77c85e3dbeda,org.apache.commons.lang3.time.FastDateFormatTest.testParseSync,FALSE,[],,,,org.apache.commons.lang3.time.fastdateprinter.parsepattern(),u''
TRUE,Delta,-1,commons-lang,0add1e8975336c65513b26123d48b221e2515ddc,4a882e76d9c9940ac561e8f17ede77c85e3dbeda,org.apache.commons.lang3.time.FastDatePrinterTest.testTimeZoneAsZ,FALSE,[],,,,org.apache.commons.lang3.time.fastdateprinter.parsepattern(),u''
TRUE,Delta,-1,commons-lang,26bc3fe010d5154d3ccac526ec22c429fc3af499,506bd018b3ca638cd0c9d1bdad627f6468a05bee,org.apache.commons.lang3.math.NumberUtilsTest.testIsNumber,FALSE,[],,,,org.apache.commons.lang3.math.numberutils.createnumber(string),"u'diff --git a/src/test/org/apache/commons/lang3/math/NumberUtilsTest.java b/src/test/org/apache/commons/lang3/math/NumberUtilsTest.java\nindex 31eb37612..80df56207 100644\n--- a/src/test/org/apache/commons/lang3/math/NumberUtilsTest.java\n+++ b/src/test/org/apache/commons/lang3/math/NumberUtilsTest.java\n@@ -208,6 +208,9 @@ public class NumberUtilsTest extends TestCase {\n                 .createNumber(""10"" + Integer.MAX_VALUE));\n         assertEquals(""createNumber(String) 18 failed"", new BigInteger(""10"" + Long.MAX_VALUE), NumberUtils\n                 .createNumber(""10"" + Long.MAX_VALUE));\n+\n+        // LANG-521\n+        assertEquals(""createNumber(String) LANG-521 failed"", new Float(""2.""), NumberUtils.createNumber(""2.""));\n     }\n \n     public void testCreateFloat() {\n@@ -1130,6 +1133,9 @@ public class NumberUtilsTest extends TestCase {\n         assertTrue(""isNumber(String) 24 Neg failed"", !NumberUtils.isNumber(val));\n         assertTrue(""isNumber(String)/createNumber(String) 24 Neg failed"", !checkCreateNumber(val));\n \n+        // LANG-521\n+        val = ""2."";\n+        assertTrue(""isNumber(String) LANG-521 failed"", NumberUtils.isNumber(val));\n     }\n \n     private boolean checkCreateNumber(String val) {'"
TRUE,Delta,-1,commons-lang,26bc3fe010d5154d3ccac526ec22c429fc3af499,506bd018b3ca638cd0c9d1bdad627f6468a05bee,org.apache.commons.lang3.math.NumberUtilsTest.testIsNumber,FALSE,[],,,,org.apache.commons.lang3.math.numberutils.createnumber(string),"u'diff --git a/src/test/org/apache/commons/lang3/math/NumberUtilsTest.java b/src/test/org/apache/commons/lang3/math/NumberUtilsTest.java\nindex 31eb37612..80df56207 100644\n--- a/src/test/org/apache/commons/lang3/math/NumberUtilsTest.java\n+++ b/src/test/org/apache/commons/lang3/math/NumberUtilsTest.java\n@@ -208,6 +208,9 @@ public class NumberUtilsTest extends TestCase {\n                 .createNumber(""10"" + Integer.MAX_VALUE));\n         assertEquals(""createNumber(String) 18 failed"", new BigInteger(""10"" + Long.MAX_VALUE), NumberUtils\n                 .createNumber(""10"" + Long.MAX_VALUE));\n+\n+        // LANG-521\n+        assertEquals(""createNumber(String) LANG-521 failed"", new Float(""2.""), NumberUtils.createNumber(""2.""));\n     }\n \n     public void testCreateFloat() {\n@@ -1130,6 +1133,9 @@ public class NumberUtilsTest extends TestCase {\n         assertTrue(""isNumber(String) 24 Neg failed"", !NumberUtils.isNumber(val));\n         assertTrue(""isNumber(String)/createNumber(String) 24 Neg failed"", !checkCreateNumber(val));\n \n+        // LANG-521\n+        val = ""2."";\n+        assertTrue(""isNumber(String) LANG-521 failed"", NumberUtils.isNumber(val));\n     }\n \n     private boolean checkCreateNumber(String val) {'"
TRUE,Delta,-1,commons-lang,8bc91a95f9b058a0798e3c775c14b12e82c3f4f5,bbfa8eb7df16baf17239b412ff7efa11c7e0926b,org.apache.commons.lang3.time.FastDateFormatTest.testParseSync,FALSE,[],,,,org.apache.commons.lang3.time.fastdateprinter.parsepattern(),"u'diff --git a/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java b/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java\nindex c5cd0768c..1760a920a 100644\n--- a/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java\n+++ b/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java\n@@ -558,62 +558,62 @@ public class FastDateParserTest {\n         assertEquals(expected.getTime(), fdp.parse(""14May2014""));\n     }\n     \n-\t@Test(expected = IllegalArgumentException.class)\n-\tpublic void test1806Argument() {\n-\t\tgetInstance(""XXXX"");\n-\t}\n-\n-\tprivate static Calendar initializeCalendar(TimeZone tz) {\n-\t\tCalendar cal = Calendar.getInstance(tz);\n-\t\tcal.set(Calendar.YEAR, 2001);\n-\t\tcal.set(Calendar.MONTH, 1); // not daylight savings\n-\t\tcal.set(Calendar.DAY_OF_MONTH, 4);\n-\t\tcal.set(Calendar.HOUR_OF_DAY, 12);\n-\t\tcal.set(Calendar.MINUTE, 8);\n-\t\tcal.set(Calendar.SECOND, 56);\n-\t\tcal.set(Calendar.MILLISECOND, 235);\n-\t\treturn cal;\n-\t}\n-\n-\tprivate static enum Expected1806 {\n-\t\tIndia(INDIA, ""+05"", ""+0530"", ""+05:30"", true), \n-\t\tGreenwich(GMT, ""Z"", ""Z"", ""Z"", false), \n-\t\tNewYork(NEW_YORK, ""-05"", ""-0500"", ""-05:00"", false);\n-\n-\t\tprivate Expected1806(TimeZone zone, String one, String two, String three, boolean hasHalfHourOffset) {\n-\t\t\tthis.zone = zone;\n-\t\t\tthis.one = one;\n-\t\t\tthis.two = two;\n-\t\t\tthis.three = three;\n-\t\t\tthis.offset = hasHalfHourOffset ?30*60*1000 :0;\n-\t\t}\n-\n-\t\tfinal TimeZone zone;\n-\t\tfinal String one;\n-\t\tfinal String two;\n-\t\tfinal String three;\n-\t\tfinal long offset;\n-\t}\n-\t\n-\t@Test\n-\tpublic void test1806() throws ParseException {\n-\t\tString formatStub = ""yyyy-MM-dd\'T\'HH:mm:ss.SSS"";\n-\t\tString dateStub = ""2001-02-04T12:08:56.235"";\n-\t\t\n-\t\tfor (Expected1806 trial : Expected1806.values()) {\n-\t\t\tCalendar cal = initializeCalendar(trial.zone);\n-\n-\t\t\tString message = trial.zone.getDisplayName()+"";"";\n-\t\t\t\n-\t\t\tDateParser parser = getInstance(formatStub+""X"", trial.zone);\n-\t\t\tassertEquals(message+trial.one, cal.getTime().getTime(), parser.parse(dateStub+trial.one).getTime()-trial.offset);\n-\n-\t\t\tparser = getInstance(formatStub+""XX"", trial.zone);\n-\t\t\tassertEquals(message+trial.two, cal.getTime(), parser.parse(dateStub+trial.two));\n-\n-\t\t\tparser = getInstance(formatStub+""XXX"", trial.zone);\n-\t\t\tassertEquals(message+trial.three, cal.getTime(), parser.parse(dateStub+trial.three));\n-\t\t}\n-\t}\n+    @Test(expected = IllegalArgumentException.class)\n+    public void test1806Argument() {\n+        getInstance(""XXXX"");\n+    }\n+\n+    private static Calendar initializeCalendar(TimeZone tz) {\n+        Calendar cal = Calendar.getInstance(tz);\n+        cal.set(Calendar.YEAR, 2001);\n+        cal.set(Calendar.MONTH, 1); // not daylight savings\n+        cal.set(Calendar.DAY_OF_MONTH, 4);\n+        cal.set(Calendar.HOUR_OF_DAY, 12);\n+        cal.set(Calendar.MINUTE, 8);\n+        cal.set(Calendar.SECOND, 56);\n+        cal.set(Calendar.MILLISECOND, 235);\n+        return cal;\n+    }\n+\n+    private static enum Expected1806 {\n+        India(INDIA, ""+05"", ""+0530"", ""+05:30"", true), \n+        Greenwich(GMT, ""Z"", ""Z"", ""Z"", false), \n+        NewYork(NEW_YORK, ""-05"", ""-0500"", ""-05:00"", false);\n+\n+        private Expected1806(TimeZone zone, String one, String two, String three, boolean hasHalfHourOffset) {\n+            this.zone = zone;\n+            this.one = one;\n+            this.two = two;\n+            this.three = three;\n+            this.offset = hasHalfHourOffset ?30*60*1000 :0;\n+        }\n+\n+        final TimeZone zone;\n+        final String one;\n+        final String two;\n+        final String three;\n+        final long offset;\n+    }\n+    \n+    @Test\n+    public void test1806() throws ParseException {\n+        String formatStub = ""yyyy-MM-dd\'T\'HH:mm:ss.SSS"";\n+        String dateStub = ""2001-02-04T12:08:56.235"";\n+        \n+        for (Expected1806 trial : Expected1806.values()) {\n+            Calendar cal = initializeCalendar(trial.zone);\n+\n+            String message = trial.zone.getDisplayName()+"";"";\n+            \n+            DateParser parser = getInstance(formatStub+""X"", trial.zone);\n+            assertEquals(message+trial.one, cal.getTime().getTime(), parser.parse(dateStub+trial.one).getTime()-trial.offset);\n+\n+            parser = getInstance(formatStub+""XX"", trial.zone);\n+            assertEquals(message+trial.two, cal.getTime(), parser.parse(dateStub+trial.two));\n+\n+            parser = getInstance(formatStub+""XXX"", trial.zone);\n+            assertEquals(message+trial.three, cal.getTime(), parser.parse(dateStub+trial.three));\n+        }\n+    }\n \n }\ndiff --git a/src/test/java/org/apache/commons/lang3/time/FastDatePrinterTest.java b/src/test/java/org/apache/commons/lang3/time/FastDatePrinterTest.java\nindex 538e6df55..c377631f5 100644\n--- a/src/test/java/org/apache/commons/lang3/time/FastDatePrinterTest.java\n+++ b/src/test/java/org/apache/commons/lang3/time/FastDatePrinterTest.java\n@@ -276,54 +276,54 @@ public class FastDatePrinterTest {\n         assertEquals(""+00:00"", colonFormat.format(c));\n     }\n \n-\tprivate static Calendar initializeCalendar(TimeZone tz) {\n-\t\tCalendar cal = Calendar.getInstance(tz);\n-\t\tcal.set(Calendar.YEAR, 2001);\n-\t\tcal.set(Calendar.MONTH, 1); // not daylight savings\n-\t\tcal.set(Calendar.DAY_OF_MONTH, 4);\n-\t\tcal.set(Calendar.HOUR_OF_DAY, 12);\n-\t\tcal.set(Calendar.MINUTE, 8);\n-\t\tcal.set(Calendar.SECOND, 56);\n-\t\tcal.set(Calendar.MILLISECOND, 235);\n-\t\treturn cal;\n-\t}\n-\n-\t@Test(expected = IllegalArgumentException.class)\n-\tpublic void test1806Argument() {\n-\t\tgetInstance(""XXXX"");\n-\t}\n-\n-\tprivate static enum Expected1806 {\n-\t\tIndia(INDIA, ""+05"", ""+0530"", ""+05:30""), Greenwich(GMT, ""Z"", ""Z"", ""Z""), NewYork(\n-\t\t\t\tNEW_YORK, ""-05"", ""-0500"", ""-05:00"");\n-\n-\t\tprivate Expected1806(TimeZone zone, String one, String two, String three) {\n-\t\t\tthis.zone = zone;\n-\t\t\tthis.one = one;\n-\t\t\tthis.two = two;\n-\t\t\tthis.three = three;\n-\t\t}\n-\n-\t\tfinal TimeZone zone;\n-\t\tfinal String one;\n-\t\tfinal String two;\n-\t\tfinal String three;\n-\t}\n-\n-\n-\t@Test\n-\tpublic void test1806() throws ParseException {\n-\t\tfor (Expected1806 trial : Expected1806.values()) {\n-\t\t\tCalendar cal = initializeCalendar(trial.zone);\n-\n-\t\t\tDatePrinter printer = getInstance(""X"", trial.zone);\n-\t\t\tassertEquals(trial.one, printer.format(cal));\n-\n-\t\t\tprinter = getInstance(""XX"", trial.zone);\n-\t\t\tassertEquals(trial.two, printer.format(cal));\n-\n-\t\t\tprinter = getInstance(""XXX"", trial.zone);\n-\t\t\tassertEquals(trial.three, printer.format(cal));\n-\t\t}\n-\t}\n+    private static Calendar initializeCalendar(TimeZone tz) {\n+        Calendar cal = Calendar.getInstance(tz);\n+        cal.set(Calendar.YEAR, 2001);\n+        cal.set(Calendar.MONTH, 1); // not daylight savings\n+        cal.set(Calendar.DAY_OF_MONTH, 4);\n+        cal.set(Calendar.HOUR_OF_DAY, 12);\n+        cal.set(Calendar.MINUTE, 8);\n+        cal.set(Calendar.SECOND, 56);\n+        cal.set(Calendar.MILLISECOND, 235);\n+        return cal;\n+    }\n+\n+    @Test(expected = IllegalArgumentException.class)\n+    public void test1806Argument() {\n+        getInstance(""XXXX"");\n+    }\n+\n+    private static enum Expected1806 {\n+        India(INDIA, ""+05"", ""+0530"", ""+05:30""), Greenwich(GMT, ""Z"", ""Z"", ""Z""), NewYork(\n+                NEW_YORK, ""-05"", ""-0500"", ""-05:00"");\n+\n+        private Expected1806(TimeZone zone, String one, String two, String three) {\n+            this.zone = zone;\n+            this.one = one;\n+            this.two = two;\n+            this.three = three;\n+        }\n+\n+        final TimeZone zone;\n+        final String one;\n+        final String two;\n+        final String three;\n+    }\n+\n+\n+    @Test\n+    public void test1806() throws ParseException {\n+        for (Expected1806 trial : Expected1806.values()) {\n+            Calendar cal = initializeCalendar(trial.zone);\n+\n+            DatePrinter printer = getInstance(""X"", trial.zone);\n+            assertEquals(trial.one, printer.format(cal));\n+\n+            printer = getInstance(""XX"", trial.zone);\n+            assertEquals(trial.two, printer.format(cal));\n+\n+            printer = getInstance(""XXX"", trial.zone);\n+            assertEquals(trial.three, printer.format(cal));\n+        }\n+    }\n }'"
TRUE,Delta,-1,commons-lang,39380da86acc717f419da48f070f8cf7d9f9ec94,474a837858a8e7a98316f97e9ed387d0161015f2,org.apache.commons.lang3.builder.ReflectionToStringBuilderTest.testConstructorWithNullObject,FALSE,[],,,,org.apache.commons.lang3.builder.reflectiontostringbuilder.reflectiontostringbuilder(object),u''
