valid,type,issue,module,commit,parent,testcase,has_test_annotation,traces,bugged_components,description,extra_description,blamed_components,diff
True,Delta,-1,commons-lang,0add1e8975336c65513b26123d48b221e2515ddc,4a882e76d9c9940ac561e8f17ede77c85e3dbeda,org.apache.commons.lang3.time.FastDatePrinterTest.testTimeZoneAsZ,False,[],,,,org.apache.commons.lang3.time.fastdateprinter.parsepattern(),u''
True,Delta,-1,commons-lang,0add1e8975336c65513b26123d48b221e2515ddc,4a882e76d9c9940ac561e8f17ede77c85e3dbeda,org.apache.commons.lang3.time.FastDateFormatTest.testParseSync,False,[],,,,org.apache.commons.lang3.time.fastdateprinter.parsepattern(),u''
True,Delta,-1,commons-lang,26bc3fe010d5154d3ccac526ec22c429fc3af499,506bd018b3ca638cd0c9d1bdad627f6468a05bee,org.apache.commons.lang3.math.NumberUtilsTest.testIsNumber,False,[],,,,org.apache.commons.lang3.math.numberutils.createnumber(string)@org.apache.commons.lang3.math.numberutils.isnumber(string),"u'diff --git a/src/test/org/apache/commons/lang3/math/NumberUtilsTest.java b/src/test/org/apache/commons/lang3/math/NumberUtilsTest.java\nindex 31eb37612..80df56207 100644\n--- a/src/test/org/apache/commons/lang3/math/NumberUtilsTest.java\n+++ b/src/test/org/apache/commons/lang3/math/NumberUtilsTest.java\n@@ -208,6 +208,9 @@ public class NumberUtilsTest extends TestCase {\n                 .createNumber(""10"" + Integer.MAX_VALUE));\n         assertEquals(""createNumber(String) 18 failed"", new BigInteger(""10"" + Long.MAX_VALUE), NumberUtils\n                 .createNumber(""10"" + Long.MAX_VALUE));\n+\n+        // LANG-521\n+        assertEquals(""createNumber(String) LANG-521 failed"", new Float(""2.""), NumberUtils.createNumber(""2.""));\n     }\n \n     public void testCreateFloat() {\n@@ -1130,6 +1133,9 @@ public class NumberUtilsTest extends TestCase {\n         assertTrue(""isNumber(String) 24 Neg failed"", !NumberUtils.isNumber(val));\n         assertTrue(""isNumber(String)/createNumber(String) 24 Neg failed"", !checkCreateNumber(val));\n \n+        // LANG-521\n+        val = ""2."";\n+        assertTrue(""isNumber(String) LANG-521 failed"", NumberUtils.isNumber(val));\n     }\n \n     private boolean checkCreateNumber(String val) {'"
True,Regression,-1,commons-lang,13a0cc63cdf11ebb98c748599a2b06eeb27e21a2,dbf4cd5f4275d1e04719fcb20e4650e0f7f008dc,org.apache.commons.lang.text.StrBuilderAppendInsertTest.testAppendSeparator_char_char,False,[],,,,org.apache.commons.lang.text.strbuilder.appendseparator(string),"u'diff --git a/src/test/org/apache/commons/lang/text/StrBuilderAppendInsertTest.java b/src/test/org/apache/commons/lang/text/StrBuilderAppendInsertTest.java\nindex 1b9386e7b..95781a153 100644\n--- a/src/test/org/apache/commons/lang/text/StrBuilderAppendInsertTest.java\n+++ b/src/test/org/apache/commons/lang/text/StrBuilderAppendInsertTest.java\n@@ -993,6 +993,8 @@ public class StrBuilderAppendInsertTest extends TestCase {\n         sb.appendSeparator("","");\n         assertEquals(""foo,"", sb.toString());\n     }\n+    \n+    //-----------------------------------------------------------------------\n \n     //-----------------------------------------------------------------------\n     public void testAppendSeparator_char() {\n@@ -1004,6 +1006,18 @@ public class StrBuilderAppendInsertTest extends TestCase {\n         sb.appendSeparator(\',\');\n         assertEquals(""foo,"", sb.toString());\n     }\n+    public void testAppendSeparator_char_char() {\n+    \tStrBuilder sb = new StrBuilder();\n+    \tfinal char startSeparator = \':\';\n+    \tfinal char standardSeparator = \',\';\n+    \tfinal String foo = ""foo"";\n+        sb.appendSeparator(standardSeparator, startSeparator);  // no effect\n+        assertEquals(String.valueOf(startSeparator), sb.toString());\n+        sb.append(foo);\n+        assertEquals(String.valueOf(startSeparator) + foo, sb.toString());\n+        sb.appendSeparator(standardSeparator, startSeparator);\n+        assertEquals(String.valueOf(startSeparator) + foo + standardSeparator, sb.toString());\n+    }\n \n     //-----------------------------------------------------------------------\n     public void testAppendSeparator_String_int() {\n@@ -1356,5 +1370,4 @@ public class StrBuilderAppendInsertTest extends TestCase {\n         sb.insert(0, (char[]) null, 0, 0);\n         assertEquals(""nullnullfoonullbarbaz"", sb.toString());\n     }\n-\n }'"
True,Delta,-1,commons-lang,c22d9d59e5b86c33f91d7fa93d71cdc514c2edd9,ed7e9b43494e490a51c25c410b2950005fd685ea,org.apache.commons.lang.StringEscapeUtilsTest.testEscapeJavaScript,False,[],,,,"org.apache.commons.lang.stringescapeutils.escapejavastylestring(writer,string,boolean)","u'diff --git a/src/test/org/apache/commons/lang/StringEscapeUtilsTest.java b/src/test/org/apache/commons/lang/StringEscapeUtilsTest.java\nindex b6d66163b..946af2dc1 100644\n--- a/src/test/org/apache/commons/lang/StringEscapeUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/StringEscapeUtilsTest.java\n@@ -184,6 +184,8 @@ public class StringEscapeUtilsTest extends TestCase {\n         }\n         \n         assertEquals(""He didn\\\\\'t say, \\\\\\""stop!\\\\\\"""", StringEscapeUtils.escapeJavaScript(""He didn\'t say, \\""stop!\\""""));\n+        assertEquals(""document.getElementById(\\\\\\""test\\\\\\"").value = \\\\\'<script>alert(\\\\\'aaa\\\\\');<\\\\/script>\\\\\';"", \n+                StringEscapeUtils.escapeJavaScript(""document.getElementById(\\""test\\"").value = \'<script>alert(\'aaa\');</script>\';""));\n     }\n \n '"
True,Regression,-1,commons-lang,dd0deed066e728d7b09e5fd69855c5ad7bf6bdb4,65b5dc69db3bfd08b4392dcee16fa0542b097812,org.apache.commons.lang.StringEscapeUtilsTest.testEscapeJavaWithSlash,False,[],,,,"org.apache.commons.lang.stringescapeutils.escapejavastylestring(string,boolean)@org.apache.commons.lang.stringescapeutils.escapejavascript(writer,string)@org.apache.commons.lang.stringescapeutils.escapejava(writer,string)@org.apache.commons.lang.stringescapeutils.escapejava(string)@org.apache.commons.lang.stringescapeutils.escapejavastylestring(writer,string,boolean)@org.apache.commons.lang.stringescapeutils.escapejavascript(string)","u'diff --git a/src/test/org/apache/commons/lang/StringEscapeUtilsTest.java b/src/test/org/apache/commons/lang/StringEscapeUtilsTest.java\nindex b0b38f975..e993ae680 100644\n--- a/src/test/org/apache/commons/lang/StringEscapeUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/StringEscapeUtilsTest.java\n@@ -97,6 +97,22 @@ public class StringEscapeUtilsTest extends TestCase {\n                 ""\\uABCD\\u1234\\u012C"");\n     }\n \n+    /**\n+     * https://issues.apache.org/jira/browse/LANG-421\n+     */\n+    public void testEscapeJavaWithSlash() {\n+        final String input = ""String with a slash (/) in it"";\n+\n+        final String expected = input;\n+        final String actual = StringEscapeUtils.escapeJava(input);\n+\n+        /**\n+         * In 2.4 StringEscapeUtils.escapeJava(String) escapes \'/\' characters, which are not a valid character to escape\n+         * in a Java string.\n+         */\n+        assertEquals(expected, actual);\n+    }\n+    \n     private void assertEscapeJava(String escaped, String original) throws IOException {\n         assertEscapeJava(null, escaped, original);\n     }'"
True,Delta,-1,commons-lang,1f35e7c99b66b8d46c4ad96558e694a10aa38062,2fb9e71da695f4ffc1d390209944399b12c53a5d,org.apache.commons.lang3.builder.HashCodeBuilderTest.testReflectionObjectCycle,False,[],,,,org.apache.commons.lang3.builder.hashcodebuilder.getregistry()@org.apache.commons.lang3.builder.hashcodebuilder.unregister(object)@org.apache.commons.lang3.builder.hashcodebuilder.register(object)@org.apache.commons.lang3.builder.hashcodebuilder.isregistered(object),"u'diff --git a/src/test/java/org/apache/commons/lang3/builder/HashCodeBuilderTest.java b/src/test/java/org/apache/commons/lang3/builder/HashCodeBuilderTest.java\nindex f6af5f035..64b34f907 100644\n--- a/src/test/java/org/apache/commons/lang3/builder/HashCodeBuilderTest.java\n+++ b/src/test/java/org/apache/commons/lang3/builder/HashCodeBuilderTest.java\n@@ -521,7 +521,9 @@ public class HashCodeBuilderTest extends TestCase {\n         // at org.apache.commons.lang.builder.HashCodeBuilder.append(HashCodeBuilder.java:422)\n \n         a.hashCode();\n+        assertNull(HashCodeBuilder.getRegistry());\n         b.hashCode();\n+        assertNull(HashCodeBuilder.getRegistry());\n     }\n \n     /**'"
True,Regression,-1,commons-lang,825481f019e4482e5ea74d5b0b5e5c438535cb68,91ac16e0b4a74b437d86c2dd7a47272105b4317c,org.apache.commons.lang3.time.FastDateFormatTest.testLang538,False,[],,,,"org.apache.commons.lang3.time.fastdateformat.format(calendar,stringbuffer)","u'diff --git a/src/test/org/apache/commons/lang3/time/FastDateFormatTest.java b/src/test/org/apache/commons/lang3/time/FastDateFormatTest.java\nindex 32bed7fe3..4a20ddf1d 100644\n--- a/src/test/org/apache/commons/lang3/time/FastDateFormatTest.java\n+++ b/src/test/org/apache/commons/lang3/time/FastDateFormatTest.java\n@@ -333,4 +333,17 @@ public class FastDateFormatTest extends TestCase {\n         format = (FastDateFormat) SerializationUtils.deserialize( SerializationUtils.serialize( format ) );\n         assertEquals(output, format.format(cal));\n     }\n+\n+    public void testLang538() {\n+        final String dateTime = ""2009-10-16T16:42:16.000Z"";\n+\n+        // more commonly constructed with: cal = new GregorianCalendar(2009, 9, 16, 8, 42, 16)\n+        // for the unit test to work in any time zone, constructing with GMT-8 rather than default locale time zone\n+        GregorianCalendar cal = new GregorianCalendar(TimeZone.getTimeZone(""GMT-8""));\n+        cal.clear();\n+        cal.set(2009, 9, 16, 8, 42, 16);\n+\n+        FastDateFormat format = FastDateFormat.getInstance(""yyyy-MM-dd\'T\'HH:mm:ss.SSS\'Z\'"", TimeZone.getTimeZone(""GMT""));\n+        assertEquals(""dateTime"", dateTime, format.format(cal));\n+    }\n }'"
True,Delta,-1,commons-lang,8252b04a45722648ce2225853de9882b3b0de034,59311cc13a0bc99cacf03e00da93423b20b3d459,org.apache.commons.lang3.reflect.ConstructorUtilsTest.testGetAccessibleConstructor,False,[],,,,org.apache.commons.lang3.reflect.constructorutils.getaccessibleconstructor(constructor),"u'diff --git a/src/test/java/org/apache/commons/lang3/reflect/ConstructorUtilsTest.java b/src/test/java/org/apache/commons/lang3/reflect/ConstructorUtilsTest.java\nindex bfa6f51de..ac58ba961 100644\n--- a/src/test/java/org/apache/commons/lang3/reflect/ConstructorUtilsTest.java\n+++ b/src/test/java/org/apache/commons/lang3/reflect/ConstructorUtilsTest.java\n@@ -18,7 +18,9 @@ package org.apache.commons.lang3.reflect;\n \n import org.junit.Test;\n import org.junit.Before;\n+\n import static org.junit.Assert.*;\n+\n import java.lang.reflect.Constructor;\n import java.util.Arrays;\n import java.util.HashMap;\n@@ -70,6 +72,12 @@ public class ConstructorUtilsTest {\n         @SuppressWarnings(""unused"")\n         public PrivateClass() {\n         }\n+\n+        @SuppressWarnings(""unused"")\n+        public static class PublicInnerClass {\n+            public PublicInnerClass() {\n+            }\n+        }\n     }\n \n     private final Map<Class<?>, Class<?>[]> classCache;\n@@ -154,6 +162,7 @@ public class ConstructorUtilsTest {\n                 .getConstructor(ArrayUtils.EMPTY_CLASS_ARRAY)));\n         assertNull(ConstructorUtils.getAccessibleConstructor(PrivateClass.class\n                 .getConstructor(ArrayUtils.EMPTY_CLASS_ARRAY)));\n+        assertNull(ConstructorUtils.getAccessibleConstructor(PrivateClass.PublicInnerClass.class));\n     }\n \n     @Test'"
True,Regression,-1,commons-lang,cf03e6173b70ad64337704402bea51600cddd1ba,708da45999d8e545bfbae17a092c68df94061756,org.apache.commons.lang3.math.NumberUtilsTest.testLANG992,False,[],,,,org.apache.commons.lang3.math.numberutils.isnumber(string),"u'diff --git a/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java b/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java\nindex ea895e256..919020f31 100644\n--- a/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java\n+++ b/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java\n@@ -1234,6 +1234,12 @@ public class NumberUtilsTest {\n         compareIsNumberWithCreateNumber(""00"", true);\n     }\n \n+    @Test\n+    public void testLANG992() {\n+        compareIsNumberWithCreateNumber(""0.0"", true);\n+        compareIsNumberWithCreateNumber(""0.4790"", true);\n+    }\n+\n     @Test\n     public void testLANG972() {\n         compareIsNumberWithCreateNumber(""0xABCD"", true);'"
True,Delta,-1,commons-lang,22b6781a0b96418198dc9146e5191e51d381102f,2aae22de23bf47566700c0ca2671d25e30c4a857,org.apache.commons.lang3.time.FastDateFormatTest.testParseSync,False,[],,,,"org.apache.commons.lang3.time.fastdateparser.getstrategy(string,calendar)@org.apache.commons.lang3.time.fastdateprinter.parsepattern()","u'diff --git a/src/test/java/org/apache/commons/lang3/time/DateFormatUtilsTest.java b/src/test/java/org/apache/commons/lang3/time/DateFormatUtilsTest.java\nindex 2d8984218..3b0d11fa4 100644\n--- a/src/test/java/org/apache/commons/lang3/time/DateFormatUtilsTest.java\n+++ b/src/test/java/org/apache/commons/lang3/time/DateFormatUtilsTest.java\n@@ -17,10 +17,13 @@\n package org.apache.commons.lang3.time;\n \n import org.junit.Test;\n+\n import static org.junit.Assert.*;\n+\n import java.lang.reflect.Constructor;\n import java.lang.reflect.Modifier;\n import java.util.Calendar;\n+import java.util.Date;\n import java.util.Locale;\n import java.util.TimeZone;\n \n@@ -103,7 +106,7 @@ public class DateFormatUtilsTest {\n     }\n     \n     @Test\n-    public void testDateTimeISO(){\n+    public void testDateTimeISO() throws Exception {\n         final TimeZone timeZone = TimeZone.getTimeZone(""GMT-3"");\n         final Calendar cal = Calendar.getInstance(timeZone);\n         cal.set(2002,1,23,9,11,12);\n@@ -124,6 +127,14 @@ public class DateFormatUtilsTest {\n         assertEquals(""2002-02-23T09:11:12-03:00"", text);\n         text = DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.format(cal);\n         assertEquals(""2002-02-23T09:11:12-03:00"", text);\n+        \n+        Calendar utcCal = Calendar.getInstance(TimeZone.getTimeZone(""UTC""));\n+        utcCal.set(2002, 1, 23, 9, 11, 12);\n+        utcCal.set(Calendar.MILLISECOND, 0);\n+        text = DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.format(utcCal);\n+        assertEquals(""2002-02-23T09:11:12Z"", text);\n+        Date date = DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.parse(text);\n+        assertEquals(utcCal.getTime(), date);\n     }\n \n     @Test\n@@ -249,4 +260,9 @@ public class DateFormatUtilsTest {\n     }\n     */\n \n+    @Test\n+    public void testLANG1000() throws Exception {\n+        String date = ""2013-11-18T12:48:05Z"";\n+        DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.parse(date);\n+    }\n }\ndiff --git a/src/test/java/org/apache/commons/lang3/time/FastDatePrinterTest.java b/src/test/java/org/apache/commons/lang3/time/FastDatePrinterTest.java\nindex eeca7c21d..5b7fc257d 100644\n--- a/src/test/java/org/apache/commons/lang3/time/FastDatePrinterTest.java\n+++ b/src/test/java/org/apache/commons/lang3/time/FastDatePrinterTest.java\n@@ -16,10 +16,7 @@\n  */\n package org.apache.commons.lang3.time;\n \n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.*;\n \n import java.io.Serializable;\n import java.text.SimpleDateFormat;\n@@ -286,4 +283,17 @@ public class FastDatePrinterTest {\n         final String actualValue = FastDateFormat.getInstance(pattern).format(cal);\n         assertEquals(expectedValue, actualValue);\n     }\n+    \n+    @Test\n+    public void testTimeZoneAsZ() throws Exception {\n+        Calendar c = Calendar.getInstance(TimeZone.getTimeZone(""UTC""));\n+        FastDateFormat noColonFormat = FastDateFormat.getInstance(""Z"");\n+        assertEquals(""+0000"", noColonFormat.format(c));\n+        \n+        FastDateFormat isoFormat = FastDateFormat.getInstance(""ZZ"");\n+        assertEquals(""Z"", isoFormat.format(c));\n+        \n+        FastDateFormat colonFormat = FastDateFormat.getInstance(""ZZZ"");\n+        assertEquals(""+00:00"", colonFormat.format(c));\n+    }\n }'"
True,Delta,-1,commons-lang,22b6781a0b96418198dc9146e5191e51d381102f,2aae22de23bf47566700c0ca2671d25e30c4a857,org.apache.commons.lang3.time.DateFormatUtilsTest.testDateTimeISO,False,[],,,,"org.apache.commons.lang3.time.fastdateparser.getstrategy(string,calendar)@org.apache.commons.lang3.time.fastdateprinter.parsepattern()","u'diff --git a/src/test/java/org/apache/commons/lang3/time/DateFormatUtilsTest.java b/src/test/java/org/apache/commons/lang3/time/DateFormatUtilsTest.java\nindex 2d8984218..3b0d11fa4 100644\n--- a/src/test/java/org/apache/commons/lang3/time/DateFormatUtilsTest.java\n+++ b/src/test/java/org/apache/commons/lang3/time/DateFormatUtilsTest.java\n@@ -17,10 +17,13 @@\n package org.apache.commons.lang3.time;\n \n import org.junit.Test;\n+\n import static org.junit.Assert.*;\n+\n import java.lang.reflect.Constructor;\n import java.lang.reflect.Modifier;\n import java.util.Calendar;\n+import java.util.Date;\n import java.util.Locale;\n import java.util.TimeZone;\n \n@@ -103,7 +106,7 @@ public class DateFormatUtilsTest {\n     }\n     \n     @Test\n-    public void testDateTimeISO(){\n+    public void testDateTimeISO() throws Exception {\n         final TimeZone timeZone = TimeZone.getTimeZone(""GMT-3"");\n         final Calendar cal = Calendar.getInstance(timeZone);\n         cal.set(2002,1,23,9,11,12);\n@@ -124,6 +127,14 @@ public class DateFormatUtilsTest {\n         assertEquals(""2002-02-23T09:11:12-03:00"", text);\n         text = DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.format(cal);\n         assertEquals(""2002-02-23T09:11:12-03:00"", text);\n+        \n+        Calendar utcCal = Calendar.getInstance(TimeZone.getTimeZone(""UTC""));\n+        utcCal.set(2002, 1, 23, 9, 11, 12);\n+        utcCal.set(Calendar.MILLISECOND, 0);\n+        text = DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.format(utcCal);\n+        assertEquals(""2002-02-23T09:11:12Z"", text);\n+        Date date = DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.parse(text);\n+        assertEquals(utcCal.getTime(), date);\n     }\n \n     @Test\n@@ -249,4 +260,9 @@ public class DateFormatUtilsTest {\n     }\n     */\n \n+    @Test\n+    public void testLANG1000() throws Exception {\n+        String date = ""2013-11-18T12:48:05Z"";\n+        DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.parse(date);\n+    }\n }\ndiff --git a/src/test/java/org/apache/commons/lang3/time/FastDatePrinterTest.java b/src/test/java/org/apache/commons/lang3/time/FastDatePrinterTest.java\nindex eeca7c21d..5b7fc257d 100644\n--- a/src/test/java/org/apache/commons/lang3/time/FastDatePrinterTest.java\n+++ b/src/test/java/org/apache/commons/lang3/time/FastDatePrinterTest.java\n@@ -16,10 +16,7 @@\n  */\n package org.apache.commons.lang3.time;\n \n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.*;\n \n import java.io.Serializable;\n import java.text.SimpleDateFormat;\n@@ -286,4 +283,17 @@ public class FastDatePrinterTest {\n         final String actualValue = FastDateFormat.getInstance(pattern).format(cal);\n         assertEquals(expectedValue, actualValue);\n     }\n+    \n+    @Test\n+    public void testTimeZoneAsZ() throws Exception {\n+        Calendar c = Calendar.getInstance(TimeZone.getTimeZone(""UTC""));\n+        FastDateFormat noColonFormat = FastDateFormat.getInstance(""Z"");\n+        assertEquals(""+0000"", noColonFormat.format(c));\n+        \n+        FastDateFormat isoFormat = FastDateFormat.getInstance(""ZZ"");\n+        assertEquals(""Z"", isoFormat.format(c));\n+        \n+        FastDateFormat colonFormat = FastDateFormat.getInstance(""ZZZ"");\n+        assertEquals(""+00:00"", colonFormat.format(c));\n+    }\n }'"
True,Regression,-1,commons-lang,22b6781a0b96418198dc9146e5191e51d381102f,2aae22de23bf47566700c0ca2671d25e30c4a857,org.apache.commons.lang3.time.FastDatePrinterTest.testTimeZoneAsZ,False,[],,,,"org.apache.commons.lang3.time.fastdateparser.getstrategy(string,calendar)@org.apache.commons.lang3.time.fastdateprinter.parsepattern()","u'diff --git a/src/test/java/org/apache/commons/lang3/time/DateFormatUtilsTest.java b/src/test/java/org/apache/commons/lang3/time/DateFormatUtilsTest.java\nindex 2d8984218..3b0d11fa4 100644\n--- a/src/test/java/org/apache/commons/lang3/time/DateFormatUtilsTest.java\n+++ b/src/test/java/org/apache/commons/lang3/time/DateFormatUtilsTest.java\n@@ -17,10 +17,13 @@\n package org.apache.commons.lang3.time;\n \n import org.junit.Test;\n+\n import static org.junit.Assert.*;\n+\n import java.lang.reflect.Constructor;\n import java.lang.reflect.Modifier;\n import java.util.Calendar;\n+import java.util.Date;\n import java.util.Locale;\n import java.util.TimeZone;\n \n@@ -103,7 +106,7 @@ public class DateFormatUtilsTest {\n     }\n     \n     @Test\n-    public void testDateTimeISO(){\n+    public void testDateTimeISO() throws Exception {\n         final TimeZone timeZone = TimeZone.getTimeZone(""GMT-3"");\n         final Calendar cal = Calendar.getInstance(timeZone);\n         cal.set(2002,1,23,9,11,12);\n@@ -124,6 +127,14 @@ public class DateFormatUtilsTest {\n         assertEquals(""2002-02-23T09:11:12-03:00"", text);\n         text = DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.format(cal);\n         assertEquals(""2002-02-23T09:11:12-03:00"", text);\n+        \n+        Calendar utcCal = Calendar.getInstance(TimeZone.getTimeZone(""UTC""));\n+        utcCal.set(2002, 1, 23, 9, 11, 12);\n+        utcCal.set(Calendar.MILLISECOND, 0);\n+        text = DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.format(utcCal);\n+        assertEquals(""2002-02-23T09:11:12Z"", text);\n+        Date date = DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.parse(text);\n+        assertEquals(utcCal.getTime(), date);\n     }\n \n     @Test\n@@ -249,4 +260,9 @@ public class DateFormatUtilsTest {\n     }\n     */\n \n+    @Test\n+    public void testLANG1000() throws Exception {\n+        String date = ""2013-11-18T12:48:05Z"";\n+        DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.parse(date);\n+    }\n }\ndiff --git a/src/test/java/org/apache/commons/lang3/time/FastDatePrinterTest.java b/src/test/java/org/apache/commons/lang3/time/FastDatePrinterTest.java\nindex eeca7c21d..5b7fc257d 100644\n--- a/src/test/java/org/apache/commons/lang3/time/FastDatePrinterTest.java\n+++ b/src/test/java/org/apache/commons/lang3/time/FastDatePrinterTest.java\n@@ -16,10 +16,7 @@\n  */\n package org.apache.commons.lang3.time;\n \n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.*;\n \n import java.io.Serializable;\n import java.text.SimpleDateFormat;\n@@ -286,4 +283,17 @@ public class FastDatePrinterTest {\n         final String actualValue = FastDateFormat.getInstance(pattern).format(cal);\n         assertEquals(expectedValue, actualValue);\n     }\n+    \n+    @Test\n+    public void testTimeZoneAsZ() throws Exception {\n+        Calendar c = Calendar.getInstance(TimeZone.getTimeZone(""UTC""));\n+        FastDateFormat noColonFormat = FastDateFormat.getInstance(""Z"");\n+        assertEquals(""+0000"", noColonFormat.format(c));\n+        \n+        FastDateFormat isoFormat = FastDateFormat.getInstance(""ZZ"");\n+        assertEquals(""Z"", isoFormat.format(c));\n+        \n+        FastDateFormat colonFormat = FastDateFormat.getInstance(""ZZZ"");\n+        assertEquals(""+00:00"", colonFormat.format(c));\n+    }\n }'"
True,Delta,-1,commons-lang,fbb0f7f88c84001e0a92dae6a71b7e43bda65a56,d99f581745097c9562f1d701a6da66cd81a550f2,org.apache.commons.lang3.text.WordUtilsTest.testWrap_StringInt,False,[],,,,"org.apache.commons.lang3.text.wordutils.wrap(string,int,string,boolean)","u'diff --git a/src/test/java/org/apache/commons/lang3/text/WordUtilsTest.java b/src/test/java/org/apache/commons/lang3/text/WordUtilsTest.java\nindex 417751c52..6be8ded79 100644\n--- a/src/test/java/org/apache/commons/lang3/text/WordUtilsTest.java\n+++ b/src/test/java/org/apache/commons/lang3/text/WordUtilsTest.java\n@@ -71,6 +71,12 @@ public class WordUtilsTest {\n         expected = ""Click here,"" + systemNewLine + ""http://commons.apache.org,"" + systemNewLine \n             + ""to jump to the"" + systemNewLine + ""commons website"";\n         assertEquals(expected, WordUtils.wrap(input, 20));\n+\n+        // leading spaces on a new line are stripped\n+        // trailing spaces are not stripped\n+        input = ""word1             word2                        word3"";\n+        expected = ""word1  "" + systemNewLine + ""word2  "" + systemNewLine + ""word3"";\n+        assertEquals(expected, WordUtils.wrap(input, 7));\n     }\n     \n     @Test'"
True,Regression,-1,commons-lang,80bd3fdb42a5d816ded9d9111c7dac3ce57c3101,66a37174a0398d76ff95904c22e77bc65890eec0,org.apache.commons.lang3.time.DateUtilsFragmentTest.testDaysOfMonthWithDate,False,[],,,,"org.apache.commons.lang3.time.dateutils.getfragment(calendar,int,int)","u'diff --git a/src/test/java/org/apache/commons/lang3/time/DateUtilsFragmentTest.java b/src/test/java/org/apache/commons/lang3/time/DateUtilsFragmentTest.java\nindex dfd2e2741..de9d7c6f2 100644\n--- a/src/test/java/org/apache/commons/lang3/time/DateUtilsFragmentTest.java\n+++ b/src/test/java/org/apache/commons/lang3/time/DateUtilsFragmentTest.java\n@@ -561,4 +561,32 @@ testResult);\n                         / DateUtils.MILLIS_PER_HOUR,\n                 testResult);\n     }\n+    \n+    @Test\n+    public void testDaysOfMonthWithCalendar() throws Exception {\n+        final long testResult = DateUtils.getFragmentInDays(aCalendar, Calendar.MONTH);\n+        assertEquals(days, testResult);\n+    }\n+    \n+    @Test\n+    public void testDaysOfMonthWithDate() throws Exception {\n+        final long testResult = DateUtils.getFragmentInDays(aDate, Calendar.MONTH);\n+        final Calendar cal = Calendar.getInstance();\n+        cal.setTime(aDate);\n+        assertEquals(cal.get(Calendar.DAY_OF_MONTH), testResult);\n+    }    \n+    \n+    @Test\n+    public void testDaysOfYearWithCalendar() throws Exception {\n+        final long testResult = DateUtils.getFragmentInDays(aCalendar, Calendar.YEAR);\n+        assertEquals(aCalendar.get(Calendar.DAY_OF_YEAR), testResult);\n+    }\n+    \n+    @Test\n+    public void testDaysOfYearWithDate() throws Exception {\n+        final long testResult = DateUtils.getFragmentInDays(aDate, Calendar.YEAR);\n+        final Calendar cal = Calendar.getInstance();\n+        cal.setTime(aDate);\n+        assertEquals(cal.get(Calendar.DAY_OF_YEAR), testResult);\n+    }\n }'"
True,Regression,-1,commons-lang,80bd3fdb42a5d816ded9d9111c7dac3ce57c3101,66a37174a0398d76ff95904c22e77bc65890eec0,org.apache.commons.lang3.time.DateUtilsFragmentTest.testDaysOfMonthWithCalendar,False,[],,,,"org.apache.commons.lang3.time.dateutils.getfragment(calendar,int,int)","u'diff --git a/src/test/java/org/apache/commons/lang3/time/DateUtilsFragmentTest.java b/src/test/java/org/apache/commons/lang3/time/DateUtilsFragmentTest.java\nindex dfd2e2741..de9d7c6f2 100644\n--- a/src/test/java/org/apache/commons/lang3/time/DateUtilsFragmentTest.java\n+++ b/src/test/java/org/apache/commons/lang3/time/DateUtilsFragmentTest.java\n@@ -561,4 +561,32 @@ testResult);\n                         / DateUtils.MILLIS_PER_HOUR,\n                 testResult);\n     }\n+    \n+    @Test\n+    public void testDaysOfMonthWithCalendar() throws Exception {\n+        final long testResult = DateUtils.getFragmentInDays(aCalendar, Calendar.MONTH);\n+        assertEquals(days, testResult);\n+    }\n+    \n+    @Test\n+    public void testDaysOfMonthWithDate() throws Exception {\n+        final long testResult = DateUtils.getFragmentInDays(aDate, Calendar.MONTH);\n+        final Calendar cal = Calendar.getInstance();\n+        cal.setTime(aDate);\n+        assertEquals(cal.get(Calendar.DAY_OF_MONTH), testResult);\n+    }    \n+    \n+    @Test\n+    public void testDaysOfYearWithCalendar() throws Exception {\n+        final long testResult = DateUtils.getFragmentInDays(aCalendar, Calendar.YEAR);\n+        assertEquals(aCalendar.get(Calendar.DAY_OF_YEAR), testResult);\n+    }\n+    \n+    @Test\n+    public void testDaysOfYearWithDate() throws Exception {\n+        final long testResult = DateUtils.getFragmentInDays(aDate, Calendar.YEAR);\n+        final Calendar cal = Calendar.getInstance();\n+        cal.setTime(aDate);\n+        assertEquals(cal.get(Calendar.DAY_OF_YEAR), testResult);\n+    }\n }'"
True,Regression,-1,commons-lang,80bd3fdb42a5d816ded9d9111c7dac3ce57c3101,66a37174a0398d76ff95904c22e77bc65890eec0,org.apache.commons.lang3.time.DateUtilsFragmentTest.testDaysOfYearWithCalendar,False,[],,,,"org.apache.commons.lang3.time.dateutils.getfragment(calendar,int,int)","u'diff --git a/src/test/java/org/apache/commons/lang3/time/DateUtilsFragmentTest.java b/src/test/java/org/apache/commons/lang3/time/DateUtilsFragmentTest.java\nindex dfd2e2741..de9d7c6f2 100644\n--- a/src/test/java/org/apache/commons/lang3/time/DateUtilsFragmentTest.java\n+++ b/src/test/java/org/apache/commons/lang3/time/DateUtilsFragmentTest.java\n@@ -561,4 +561,32 @@ testResult);\n                         / DateUtils.MILLIS_PER_HOUR,\n                 testResult);\n     }\n+    \n+    @Test\n+    public void testDaysOfMonthWithCalendar() throws Exception {\n+        final long testResult = DateUtils.getFragmentInDays(aCalendar, Calendar.MONTH);\n+        assertEquals(days, testResult);\n+    }\n+    \n+    @Test\n+    public void testDaysOfMonthWithDate() throws Exception {\n+        final long testResult = DateUtils.getFragmentInDays(aDate, Calendar.MONTH);\n+        final Calendar cal = Calendar.getInstance();\n+        cal.setTime(aDate);\n+        assertEquals(cal.get(Calendar.DAY_OF_MONTH), testResult);\n+    }    \n+    \n+    @Test\n+    public void testDaysOfYearWithCalendar() throws Exception {\n+        final long testResult = DateUtils.getFragmentInDays(aCalendar, Calendar.YEAR);\n+        assertEquals(aCalendar.get(Calendar.DAY_OF_YEAR), testResult);\n+    }\n+    \n+    @Test\n+    public void testDaysOfYearWithDate() throws Exception {\n+        final long testResult = DateUtils.getFragmentInDays(aDate, Calendar.YEAR);\n+        final Calendar cal = Calendar.getInstance();\n+        cal.setTime(aDate);\n+        assertEquals(cal.get(Calendar.DAY_OF_YEAR), testResult);\n+    }\n }'"
True,Regression,-1,commons-lang,80bd3fdb42a5d816ded9d9111c7dac3ce57c3101,66a37174a0398d76ff95904c22e77bc65890eec0,org.apache.commons.lang3.time.DateUtilsFragmentTest.testDaysOfYearWithDate,False,[],,,,"org.apache.commons.lang3.time.dateutils.getfragment(calendar,int,int)","u'diff --git a/src/test/java/org/apache/commons/lang3/time/DateUtilsFragmentTest.java b/src/test/java/org/apache/commons/lang3/time/DateUtilsFragmentTest.java\nindex dfd2e2741..de9d7c6f2 100644\n--- a/src/test/java/org/apache/commons/lang3/time/DateUtilsFragmentTest.java\n+++ b/src/test/java/org/apache/commons/lang3/time/DateUtilsFragmentTest.java\n@@ -561,4 +561,32 @@ testResult);\n                         / DateUtils.MILLIS_PER_HOUR,\n                 testResult);\n     }\n+    \n+    @Test\n+    public void testDaysOfMonthWithCalendar() throws Exception {\n+        final long testResult = DateUtils.getFragmentInDays(aCalendar, Calendar.MONTH);\n+        assertEquals(days, testResult);\n+    }\n+    \n+    @Test\n+    public void testDaysOfMonthWithDate() throws Exception {\n+        final long testResult = DateUtils.getFragmentInDays(aDate, Calendar.MONTH);\n+        final Calendar cal = Calendar.getInstance();\n+        cal.setTime(aDate);\n+        assertEquals(cal.get(Calendar.DAY_OF_MONTH), testResult);\n+    }    \n+    \n+    @Test\n+    public void testDaysOfYearWithCalendar() throws Exception {\n+        final long testResult = DateUtils.getFragmentInDays(aCalendar, Calendar.YEAR);\n+        assertEquals(aCalendar.get(Calendar.DAY_OF_YEAR), testResult);\n+    }\n+    \n+    @Test\n+    public void testDaysOfYearWithDate() throws Exception {\n+        final long testResult = DateUtils.getFragmentInDays(aDate, Calendar.YEAR);\n+        final Calendar cal = Calendar.getInstance();\n+        cal.setTime(aDate);\n+        assertEquals(cal.get(Calendar.DAY_OF_YEAR), testResult);\n+    }\n }'"
True,Regression,-1,commons-lang,9397608dd35a335d5e14813c0923f9419782980a,5a509030a946646780e963b9f492a4eaff734116,org.apache.commons.lang3.math.NumberUtilsTest.testLANG971,False,[],,,,org.apache.commons.lang3.math.numberutils.isnumber(string),"u'diff --git a/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java b/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java\nindex d211b6c49..ea895e256 100644\n--- a/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java\n+++ b/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java\n@@ -1225,6 +1225,15 @@ public class NumberUtilsTest {\n         compareIsNumberWithCreateNumber(""1.1L"", false); // LANG-664\n     }\n \n+    @Test\n+    public void testLANG971() {\n+        compareIsNumberWithCreateNumber(""0085"", false);\n+        compareIsNumberWithCreateNumber(""085"", false);\n+        compareIsNumberWithCreateNumber(""08"", false);\n+        compareIsNumberWithCreateNumber(""07"", true);\n+        compareIsNumberWithCreateNumber(""00"", true);\n+    }\n+\n     @Test\n     public void testLANG972() {\n         compareIsNumberWithCreateNumber(""0xABCD"", true);'"
True,Regression,-1,commons-lang,5a509030a946646780e963b9f492a4eaff734116,159415855d06d186e86a70f3d4aba8c2e96d4b34,org.apache.commons.lang3.math.NumberUtilsTest.testLANG972,False,[],,,,org.apache.commons.lang3.math.numberutils.isnumber(string),"u'diff --git a/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java b/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java\nindex 9b52ac6de..d211b6c49 100644\n--- a/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java\n+++ b/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java\n@@ -1225,6 +1225,12 @@ public class NumberUtilsTest {\n         compareIsNumberWithCreateNumber(""1.1L"", false); // LANG-664\n     }\n \n+    @Test\n+    public void testLANG972() {\n+        compareIsNumberWithCreateNumber(""0xABCD"", true);\n+        compareIsNumberWithCreateNumber(""0XABCD"", true);\n+    }\n+\n     private void compareIsNumberWithCreateNumber(final String val, final boolean expected) {\n         final boolean isValid = NumberUtils.isNumber(val);\n         final boolean canCreate = checkCreateNumber(val);'"
True,Regression,-1,commons-lang,cf4138d7bc1a892295ccd58ea8b42f7c8737239a,ddc06197e4c9cdd009ba2a039dca77099797c584,org.apache.commons.lang3.time.DurationFormatUtilsTest.testLANG984,False,[],,,,"org.apache.commons.lang3.time.durationformatutils.formatduration(long,string,boolean)@org.apache.commons.lang3.time.durationformatutils.format(token[],int,int,int,int,int,int,int,boolean)","u'diff --git a/src/test/java/org/apache/commons/lang3/time/DurationFormatUtilsTest.java b/src/test/java/org/apache/commons/lang3/time/DurationFormatUtilsTest.java\nindex d56ce725a..d144a0488 100644\n--- a/src/test/java/org/apache/commons/lang3/time/DurationFormatUtilsTest.java\n+++ b/src/test/java/org/apache/commons/lang3/time/DurationFormatUtilsTest.java\n@@ -519,7 +519,17 @@ public class DurationFormatUtilsTest {\n                 new int[] { 1997, 1, 28, 0, 0, 0 }, ""M d""); \n         \n     }\n-    \n+\n+    @Test\n+    public void testLANG984() { // Long durations\n+        assertEquals(""0"", DurationFormatUtils.formatDuration(0, ""S""));\n+        assertEquals(Integer.toString(Integer.MAX_VALUE), DurationFormatUtils.formatDuration(Integer.MAX_VALUE, ""S""));\n+        long maxIntPlus=Integer.MAX_VALUE;\n+        maxIntPlus++;\n+        assertEquals(Long.toString(maxIntPlus), DurationFormatUtils.formatDuration(maxIntPlus, ""S""));\n+        assertEquals(Long.toString(Long.MAX_VALUE), DurationFormatUtils.formatDuration(Long.MAX_VALUE, ""S""));\n+    }\n+\n     @Test\n     public void testDurationsByBruteForce() {\n         bruteForce(2006, 0, 1, ""d"", Calendar.DAY_OF_MONTH);'"
True,Delta,-1,commons-lang,77f5fe29e317c634bced62e54f6ead8a1c85c238,8b5e3eb81ddf3417f8f628c211507694ce2b92bb,org.apache.commons.lang3.time.DurationFormatUtilsTest.testLANG982,False,[],,,,"org.apache.commons.lang3.time.durationformatutils.format(token[],long,long,long,long,long,long,long,boolean)",u''
True,Regression,-1,commons-lang,aadd8e172eb22fb593fbaa454075677656fad111,8d360ae70732ae26d961f76da5a98c44ac5931c6,org.apache.commons.lang3.time.DurationFormatUtilsTest.testLANG981,False,[],,,,org.apache.commons.lang3.time.durationformatutils.lexx(string),"u'diff --git a/src/test/java/org/apache/commons/lang3/time/DurationFormatUtilsTest.java b/src/test/java/org/apache/commons/lang3/time/DurationFormatUtilsTest.java\nindex 07214486c..1311d904f 100644\n--- a/src/test/java/org/apache/commons/lang3/time/DurationFormatUtilsTest.java\n+++ b/src/test/java/org/apache/commons/lang3/time/DurationFormatUtilsTest.java\n@@ -553,7 +553,12 @@ public class DurationFormatUtilsTest {\n         bruteForce(1969, 1, 28, ""M"", Calendar.MONTH);  // tests for 48 years\n         //bruteForce(1996, 1, 29, ""M"", Calendar.MONTH);  // this will fail\n     }\n-    \n+\n+    @Test(expected=IllegalArgumentException.class)\n+    public void testLANG981() { // unmatched quote char in lexx\n+        DurationFormatUtils.lexx(""\'yMdHms\'\'S"");\n+    }\n+\n     private static final int FOUR_YEARS = 365 * 3 + 366;\n     \n     // Takes a minute to run, so generally turned off'"
True,Regression,-1,commons-lang,0942ef04f1fa911d382b79a92dca1dd4b3eb88e6,8252b04a45722648ce2225853de9882b3b0de034,org.apache.commons.lang3.time.DateUtilsFragmentTest.testMinutesOfYearWithWrongOffsetBugWithCalendar,False,[],,,,"org.apache.commons.lang3.time.dateutils.getfragment(calendar,int,int)","u'diff --git a/src/test/java/org/apache/commons/lang3/time/DateUtilsFragmentTest.java b/src/test/java/org/apache/commons/lang3/time/DateUtilsFragmentTest.java\nindex ff9cf3369..227483a3d 100644\n--- a/src/test/java/org/apache/commons/lang3/time/DateUtilsFragmentTest.java\n+++ b/src/test/java/org/apache/commons/lang3/time/DateUtilsFragmentTest.java\n@@ -531,6 +531,19 @@ testResult);\n                 testResult);\n     }\n \n+    @Test\n+    public void testMinutesOfYearWithWrongOffsetBugWithCalendar() {\n+        Calendar c = Calendar.getInstance();\n+        c.set(Calendar.MONTH, Calendar.JANUARY);\n+        c.set(Calendar.DAY_OF_YEAR, 1);\n+        c.set(Calendar.HOUR_OF_DAY, 0);\n+        c.set(Calendar.MINUTE, 0);\n+        c.set(Calendar.SECOND, 0);\n+        c.set(Calendar.MILLISECOND, 0);\n+        final long testResult = DateUtils.getFragmentInMinutes(c, Calendar.YEAR);\n+        assertEquals( 0, testResult);\n+    }\n+\n     @Test\n     public void testHoursOfYearWithDate() {\n         final long testResult = DateUtils.getFragmentInHours(aDate, Calendar.YEAR);'"
True,Delta,-1,commons-lang,6ea7f2f7afcd6d60d62a5cd1392feda3471fc666,38f8b88528487efc4e53ac6c91f08fbaaa2a82d6,org.apache.commons.lang3.text.translate.OctalUnescaperTest.testBetween,False,[],,,,"org.apache.commons.lang3.text.translate.octalunescaper.translate(charsequence,int,writer)","u'diff --git a/src/test/java/org/apache/commons/lang3/text/translate/OctalUnescaperTest.java b/src/test/java/org/apache/commons/lang3/text/translate/OctalUnescaperTest.java\nindex 7cbe60ce3..0485a17c1 100644\n--- a/src/test/java/org/apache/commons/lang3/text/translate/OctalUnescaperTest.java\n+++ b/src/test/java/org/apache/commons/lang3/text/translate/OctalUnescaperTest.java\n@@ -44,15 +44,44 @@ public class OctalUnescaperTest {\n \n         input = ""\\\\378 and"";\n         result = oue.translate(input);\n-        assertEquals(""Failed to unescape octal characters via the between method"", ""\\378 and"", result);\n+        assertEquals(""Failed to unescape octal characters via the between method"", ""\\37"" + ""8 and"", result);\n \n         input = ""\\\\378"";\n         result = oue.translate(input);\n-        assertEquals(""Failed to unescape octal characters via the between method"", ""\\378"", result);\n+        assertEquals(""Failed to unescape octal characters via the between method"", ""\\37"" + ""8"", result);\n \n         input = ""\\\\1"";\n         result = oue.translate(input);\n         assertEquals(""Failed to unescape octal characters via the between method"", ""\\1"", result);\n+\n+        input = ""\\\\036"";\n+        result = oue.translate(input);\n+        assertEquals(""Failed to unescape octal characters via the between method"", ""\\036"", result);\n+\n+        input = ""\\\\0365"";\n+        result = oue.translate(input);\n+        assertEquals(""Failed to unescape octal characters via the between method"", ""\\036"" + ""5"", result);\n+\n+        input = ""\\\\003"";\n+        result = oue.translate(input);\n+        assertEquals(""Failed to unescape octal characters via the between method"", ""\\003"", result);\n+\n+        input = ""\\\\0003"";\n+        result = oue.translate(input);\n+        assertEquals(""Failed to unescape octal characters via the between method"", ""\\000"" + ""3"", result);\n+    }\n+\n+    @Test\n+    public void testOutOfRange() {\n+        final OctalUnescaper oue = new OctalUnescaper();\n+\n+        String input = ""\\\\999"";\n+        try {\n+            String result = oue.translate(input);\n+            fail(""NumberFormatException was expected for input: "" + input);\n+        } catch(NumberFormatException nfe) {\n+            // expected\n+        }\n     }\n \n }'"
True,Delta,-1,commons-lang,775203dd2cfce017910d04c58a0b1b4e0a64923c,bea1ae92aa52a985f8c171c6e17ff7fc4aa61fe4,org.apache.commons.lang3.time.FastDatePrinterTest.testLang538,False,[],,,,"org.apache.commons.lang3.time.fastdateprinter.format(calendar,stringbuffer)","u'diff --git a/src/test/java/org/apache/commons/lang3/time/DateFormatUtilsTest.java b/src/test/java/org/apache/commons/lang3/time/DateFormatUtilsTest.java\nindex 5a1d69fa0..425ec6c50 100644\n--- a/src/test/java/org/apache/commons/lang3/time/DateFormatUtilsTest.java\n+++ b/src/test/java/org/apache/commons/lang3/time/DateFormatUtilsTest.java\n@@ -108,132 +108,75 @@ public class DateFormatUtilsTest {\n         \n         assertEquals (""2005-01-01T12:00:00"", DateFormatUtils.formatUTC(c.getTime().getTime(), DateFormatUtils.ISO_DATETIME_FORMAT.getPattern(), Locale.US));\n     }\n+\n+    private void assertFormats(String expectedValue, String pattern, TimeZone timeZone, Calendar cal) {\n+        assertEquals(expectedValue, DateFormatUtils.format(cal.getTime(), pattern, timeZone));\n+        assertEquals(expectedValue, DateFormatUtils.format(cal.getTime().getTime(), pattern, timeZone));\n+        assertEquals(expectedValue, DateFormatUtils.format(cal, pattern, timeZone));\n+    }\n+\n+    private Calendar createFebruaryTestDate(final TimeZone timeZone) {\n+        final Calendar cal = Calendar.getInstance(timeZone);\n+        cal.set(2002, Calendar.FEBRUARY, 23, 9, 11, 12);\n+        return cal;\n+    }\n+\n+    private Calendar createJuneTestDate(final TimeZone timeZone) {\n+        final Calendar cal = Calendar.getInstance(timeZone);\n+        cal.set(2003, Calendar.JUNE, 8, 10, 11, 12);\n+        return cal;\n+    }\n+\n+    private void testGmtMinus3(String expectedValue, String pattern) {\n+        final TimeZone timeZone = TimeZone.getTimeZone(""GMT-3"");\n+        assertFormats(expectedValue, pattern, timeZone, createFebruaryTestDate(timeZone));\n+    }\n+\n+    private void testUTC(String expectedValue, String pattern) {\n+        final TimeZone timeZone = TimeZone.getTimeZone(""UTC"");\n+        assertFormats(expectedValue, pattern, timeZone, createFebruaryTestDate(timeZone));\n+    }\n     \n     @Test\n     public void testDateTimeISO() throws Exception {\n-        final TimeZone timeZone = TimeZone.getTimeZone(""GMT-3"");\n-        final Calendar cal = Calendar.getInstance(timeZone);\n-        cal.set(2002, Calendar.FEBRUARY, 23, 9, 11, 12);\n-        String text = DateFormatUtils.format(cal.getTime(), \n-                        DateFormatUtils.ISO_DATETIME_FORMAT.getPattern(), timeZone);\n-        assertEquals(""2002-02-23T09:11:12"", text);\n-        text = DateFormatUtils.format(cal.getTime().getTime(), \n-                      DateFormatUtils.ISO_DATETIME_FORMAT.getPattern(), timeZone);\n-        assertEquals(""2002-02-23T09:11:12"", text);\n-        text = DateFormatUtils.ISO_DATETIME_FORMAT.format(cal);\n-        assertEquals(""2002-02-23T09:11:12"", text);\n-        \n-        text = DateFormatUtils.format(cal.getTime(), \n-                      DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.getPattern(), timeZone);\n-        assertEquals(""2002-02-23T09:11:12-03:00"", text);\n-        text = DateFormatUtils.format(cal.getTime().getTime(), \n-                      DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.getPattern(), timeZone);\n-        assertEquals(""2002-02-23T09:11:12-03:00"", text);\n-        text = DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.format(cal);\n-        assertEquals(""2002-02-23T09:11:12-03:00"", text);\n-        \n-        Calendar utcCal = Calendar.getInstance(TimeZone.getTimeZone(""UTC""));\n-        utcCal.set(2002, Calendar.FEBRUARY, 23, 9, 11, 12);\n-        utcCal.set(Calendar.MILLISECOND, 0);\n-        text = DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.format(utcCal);\n-        assertEquals(""2002-02-23T09:11:12Z"", text);\n-        Date date = DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.parse(text);\n-        assertEquals(utcCal.getTime(), date);\n+        testGmtMinus3(""2002-02-23T09:11:12"", DateFormatUtils.ISO_DATETIME_FORMAT.getPattern());\n+        testGmtMinus3(""2002-02-23T09:11:12-03:00"", DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.getPattern());\n+        testUTC(""2002-02-23T09:11:12Z"", DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.getPattern());\n     }\n \n     @Test\n     public void testDateISO(){\n-        final TimeZone timeZone = TimeZone.getTimeZone(""GMT-3"");\n-        final Calendar cal = Calendar.getInstance(timeZone);\n-        cal.set(2002, Calendar.FEBRUARY, 23, 10, 11, 12);\n-        String text = DateFormatUtils.format(cal.getTime(), \n-                        DateFormatUtils.ISO_DATE_FORMAT.getPattern(), timeZone);\n-        assertEquals(""2002-02-23"", text);\n-        text = DateFormatUtils.format(cal.getTime().getTime(), \n-                        DateFormatUtils.ISO_DATE_FORMAT.getPattern(), timeZone);\n-        assertEquals(""2002-02-23"", text);\n-        text = DateFormatUtils.ISO_DATE_FORMAT.format(cal);\n-        assertEquals(""2002-02-23"", text);\n-        \n-        text = DateFormatUtils.format(cal.getTime(), \n-                      DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.getPattern(), timeZone);\n-        assertEquals(""2002-02-23-03:00"", text);\n-        text = DateFormatUtils.format(cal.getTime().getTime(), \n-                      DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.getPattern(), timeZone);\n-        assertEquals(""2002-02-23-03:00"", text);\n-        text = DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.format(cal);\n-        assertEquals(""2002-02-23-03:00"", text);\n+        testGmtMinus3(""2002-02-23"", DateFormatUtils.ISO_DATE_FORMAT.getPattern());\n+        testGmtMinus3(""2002-02-23-03:00"", DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.getPattern());\n+        testUTC(""2002-02-23Z"", DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.getPattern());\n     }\n \n     @Test\n     public void testTimeISO(){\n-        final TimeZone timeZone = TimeZone.getTimeZone(""GMT-3"");\n-        final Calendar cal = Calendar.getInstance(timeZone);\n-        cal.set(2002, Calendar.FEBRUARY, 23, 10, 11, 12);\n-        String text = DateFormatUtils.format(cal.getTime(), \n-                        DateFormatUtils.ISO_TIME_FORMAT.getPattern(), timeZone);\n-        assertEquals(""T10:11:12"", text);\n-        text = DateFormatUtils.format(cal.getTime().getTime(), \n-                        DateFormatUtils.ISO_TIME_FORMAT.getPattern(), timeZone);\n-        assertEquals(""T10:11:12"", text);\n-        text = DateFormatUtils.ISO_TIME_FORMAT.format(cal);\n-        assertEquals(""T10:11:12"", text);\n-        \n-        text = DateFormatUtils.format(cal.getTime(), \n-                      DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.getPattern(), timeZone);\n-        assertEquals(""T10:11:12-03:00"", text);\n-        text = DateFormatUtils.format(cal.getTime().getTime(), \n-                      DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.getPattern(), timeZone);\n-        assertEquals(""T10:11:12-03:00"", text);\n-        text = DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.format(cal);\n-        assertEquals(""T10:11:12-03:00"", text);\n+        testGmtMinus3(""T09:11:12"", DateFormatUtils.ISO_TIME_FORMAT.getPattern());\n+        testGmtMinus3(""T09:11:12-03:00"", DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.getPattern());\n+        testUTC(""T09:11:12Z"", DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.getPattern());\n     }\n \n     @Test\n     public void testTimeNoTISO(){\n-        final TimeZone timeZone = TimeZone.getTimeZone(""GMT-3"");\n-        final Calendar cal = Calendar.getInstance(timeZone);\n-        cal.set(2002, Calendar.FEBRUARY, 23, 10, 11, 12);\n-        String text = DateFormatUtils.format(cal.getTime(), \n-                        DateFormatUtils.ISO_TIME_NO_T_FORMAT.getPattern(), timeZone);\n-        assertEquals(""10:11:12"", text);\n-        text = DateFormatUtils.format(cal.getTime().getTime(), \n-                        DateFormatUtils.ISO_TIME_NO_T_FORMAT.getPattern(), timeZone);\n-        assertEquals(""10:11:12"", text);\n-        text = DateFormatUtils.ISO_TIME_NO_T_FORMAT.format(cal);\n-        assertEquals(""10:11:12"", text);\n-        \n-        text = DateFormatUtils.format(cal.getTime(), \n-                      DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.getPattern(), timeZone);\n-        assertEquals(""10:11:12-03:00"", text);\n-        text = DateFormatUtils.format(cal.getTime().getTime(), \n-                      DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.getPattern(), timeZone);\n-        assertEquals(""10:11:12-03:00"", text);\n-        text = DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.format(cal);\n-        assertEquals(""10:11:12-03:00"", text);\n+        testGmtMinus3(""09:11:12"", DateFormatUtils.ISO_TIME_NO_T_FORMAT.getPattern());\n+        testGmtMinus3(""09:11:12-03:00"", DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.getPattern());\n+        testUTC(""09:11:12Z"", DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.getPattern());\n     }\n \n     @Test\n     public void testSMTP(){\n-        final TimeZone timeZone = TimeZone.getTimeZone(""GMT-3"");\n-        final Calendar cal = Calendar.getInstance(timeZone);\n-        cal.set(2003, Calendar.JUNE, 8, 10, 11, 12);\n-        String text = DateFormatUtils.format(cal.getTime(), \n-                        DateFormatUtils.SMTP_DATETIME_FORMAT.getPattern(), timeZone,\n-                        DateFormatUtils.SMTP_DATETIME_FORMAT.getLocale());\n-        assertEquals(""Sun, 08 Jun 2003 10:11:12 -0300"", text);\n-        text = DateFormatUtils.format(cal.getTime().getTime(), \n-                        DateFormatUtils.SMTP_DATETIME_FORMAT.getPattern(), timeZone,\n-                        DateFormatUtils.SMTP_DATETIME_FORMAT.getLocale());\n-        assertEquals(""Sun, 08 Jun 2003 10:11:12 -0300"", text);\n-        text = DateFormatUtils.SMTP_DATETIME_FORMAT.format(cal);\n-        assertEquals(""Sun, 08 Jun 2003 10:11:12 -0300"", text);\n+        TimeZone timeZone = TimeZone.getTimeZone(""GMT-3"");\n+        Calendar june = createJuneTestDate(timeZone);\n         \n-        // format UTC\n-        text = DateFormatUtils.formatUTC(cal.getTime().getTime(), \n-                        DateFormatUtils.SMTP_DATETIME_FORMAT.getPattern(),\n-                        DateFormatUtils.SMTP_DATETIME_FORMAT.getLocale());\n-        assertEquals(""Sun, 08 Jun 2003 13:11:12 +0000"", text);\n+        assertFormats(""Sun, 08 Jun 2003 10:11:12 -0300"", DateFormatUtils.SMTP_DATETIME_FORMAT.getPattern(),\n+                timeZone, june);\n+\n+        timeZone = TimeZone.getTimeZone(""UTC"");\n+        june = createJuneTestDate(timeZone);\n+        assertFormats(""Sun, 08 Jun 2003 10:11:12 +0000"", DateFormatUtils.SMTP_DATETIME_FORMAT.getPattern(),\n+                timeZone, june);\n     }\n \n     /*\n@@ -285,4 +228,46 @@ public class DateFormatUtilsTest {\n             TimeZone.setDefault(save);\n         }\n     }\n+\n+    /**\n+     * According to LANG-916 (https://issues.apache.org/jira/browse/LANG-916),\n+     * the format method did contain a bug: it did not use the TimeZone data.\n+     *\n+     * This method test that the bug is fixed.\n+     */\n+    @Test\n+    public void testLang916() throws Exception {\n+\n+        Calendar cal = Calendar.getInstance(TimeZone.getTimeZone(""Europe/Paris""));\n+        cal.clear();\n+        cal.set(2009, 9, 16, 8, 42, 16);\n+\n+        // Long.\n+        {\n+            String value = DateFormatUtils.format(cal.getTimeInMillis(), DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.getPattern(), TimeZone.getTimeZone(""Europe/Paris""));\n+            assertEquals(""long"", ""2009-10-16T08:42:16+02:00"", value);\n+        }\n+        {\n+            String value = DateFormatUtils.format(cal.getTimeInMillis(), DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.getPattern(), TimeZone.getTimeZone(""Asia/Kolkata""));\n+            assertEquals(""long"", ""2009-10-16T12:12:16+05:30"", value);\n+        }\n+        {\n+            String value = DateFormatUtils.format(cal.getTimeInMillis(), DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.getPattern(), TimeZone.getTimeZone(""Europe/London""));\n+            assertEquals(""long"", ""2009-10-16T07:42:16+01:00"", value);\n+        }\n+\n+        // Calendar.\n+        {\n+            String value = DateFormatUtils.format(cal, DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.getPattern(), TimeZone.getTimeZone(""Europe/Paris""));\n+            assertEquals(""calendar"", ""2009-10-16T08:42:16+02:00"", value);\n+        }\n+        {\n+            String value = DateFormatUtils.format(cal, DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.getPattern(), TimeZone.getTimeZone(""Asia/Kolkata""));\n+            assertEquals(""calendar"", ""2009-10-16T12:12:16+05:30"", value);\n+        }\n+        {\n+            String value = DateFormatUtils.format(cal, DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.getPattern(), TimeZone.getTimeZone(""Europe/London""));\n+            assertEquals(""calendar"", ""2009-10-16T07:42:16+01:00"", value);\n+        }\n+    }\n }\ndiff --git a/src/test/java/org/apache/commons/lang3/time/DurationFormatUtilsTest.java b/src/test/java/org/apache/commons/lang3/time/DurationFormatUtilsTest.java\nindex 15456428a..6941f42f2 100644\n--- a/src/test/java/org/apache/commons/lang3/time/DurationFormatUtilsTest.java\n+++ b/src/test/java/org/apache/commons/lang3/time/DurationFormatUtilsTest.java\n@@ -266,7 +266,7 @@ public class DurationFormatUtilsTest {\n         cal.set(Calendar.MILLISECOND, 1);\n         String text;\n         // repeat a test from testDateTimeISO to compare extended and not extended.\n-        text = DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.format(cal);\n+        text = DateFormatUtils.format(cal, DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.getPattern(), timeZone);\n         assertEquals(""2002-02-23T09:11:12-03:00"", text);\n         // test fixture is the same as above, but now with extended format.\n         text = DurationFormatUtils.formatPeriod(base.getTime().getTime(), cal.getTime().getTime(),\ndiff --git a/src/test/java/org/apache/commons/lang3/time/FastDatePrinterTest.java b/src/test/java/org/apache/commons/lang3/time/FastDatePrinterTest.java\nindex f8b4930dc..5aaa67024 100644\n--- a/src/test/java/org/apache/commons/lang3/time/FastDatePrinterTest.java\n+++ b/src/test/java/org/apache/commons/lang3/time/FastDatePrinterTest.java\n@@ -214,7 +214,7 @@ public class FastDatePrinterTest {\n \n         final DatePrinter format = getInstance(""yyyy-MM-dd\'T\'HH:mm:ss.SSS\'Z\'"", TimeZone.getTimeZone(""GMT""));\n         assertEquals(""dateTime"", ""2009-10-16T16:42:16.000Z"", format.format(cal.getTime()));\n-        assertEquals(""dateTime"", ""2009-10-16T08:42:16.000Z"", format.format(cal));\n+        assertEquals(""dateTime"", ""2009-10-16T16:42:16.000Z"", format.format(cal));\n     }\n \n     @Test\n@@ -339,4 +339,32 @@ public class FastDatePrinterTest {\n         assertEquals(""0002"", getInstance(""dddd"", SWEDEN).format(cal));\n         assertEquals(""00002"", getInstance(""ddddd"", SWEDEN).format(cal));\n     }\n+\n+    /**\n+     * According to LANG-916 (https://issues.apache.org/jira/browse/LANG-916),\n+     * the format method did contain a bug: it did not use the TimeZone data.\n+     *\n+     * This method test that the bug is fixed.\n+     */\n+    @Test\n+    public void testLang916() throws Exception {\n+\n+        Calendar cal = Calendar.getInstance(TimeZone.getTimeZone(""Europe/Paris""));\n+        cal.clear();\n+        cal.set(2009, 9, 16, 8, 42, 16);\n+\n+        // calendar fast.\n+        {\n+            String value = FastDateFormat.getInstance(""yyyy-MM-dd\'T\'HH:mm:ss Z"", TimeZone.getTimeZone(""Europe/Paris"")).format(cal);\n+            assertEquals(""calendar"", ""2009-10-16T08:42:16 +0200"", value);\n+        }\n+        {\n+            String value = FastDateFormat.getInstance(""yyyy-MM-dd\'T\'HH:mm:ss Z"", TimeZone.getTimeZone(""Asia/Kolkata"")).format(cal);\n+            assertEquals(""calendar"", ""2009-10-16T12:12:16 +0530"", value);\n+        }\n+        {\n+            String value = FastDateFormat.getInstance(""yyyy-MM-dd\'T\'HH:mm:ss Z"", TimeZone.getTimeZone(""Europe/London"")).format(cal);\n+            assertEquals(""calendar"", ""2009-10-16T07:42:16 +0100"", value);\n+        }\n+    }\n }\ndiff --git a/src/test/java/org/apache/commons/lang3/time/FastDatePrinterTimeZonesTest.java b/src/test/java/org/apache/commons/lang3/time/FastDatePrinterTimeZonesTest.java\nindex 34ff2f516..3ae5f5625 100644\n--- a/src/test/java/org/apache/commons/lang3/time/FastDatePrinterTimeZonesTest.java\n+++ b/src/test/java/org/apache/commons/lang3/time/FastDatePrinterTimeZonesTest.java\n@@ -57,7 +57,7 @@ public class FastDatePrinterTimeZonesTest {\n         final SimpleDateFormat sdf = new SimpleDateFormat(PATTERN);\n         sdf.setTimeZone(timeZone);\n         final String expectedValue = sdf.format(cal.getTime());\n-        final String actualValue = FastDateFormat.getInstance(PATTERN).format(cal);\n+        final String actualValue = FastDateFormat.getInstance(PATTERN, this.timeZone).format(cal);\n         assertEquals(expectedValue, actualValue);\n     }\n '"
True,Delta,-1,commons-lang,775203dd2cfce017910d04c58a0b1b4e0a64923c,bea1ae92aa52a985f8c171c6e17ff7fc4aa61fe4,org.apache.commons.lang3.time.FastDateFormatTest.testParseSync,False,[],,,,"org.apache.commons.lang3.time.fastdateprinter.format(calendar,stringbuffer)","u'diff --git a/src/test/java/org/apache/commons/lang3/time/DateFormatUtilsTest.java b/src/test/java/org/apache/commons/lang3/time/DateFormatUtilsTest.java\nindex 5a1d69fa0..425ec6c50 100644\n--- a/src/test/java/org/apache/commons/lang3/time/DateFormatUtilsTest.java\n+++ b/src/test/java/org/apache/commons/lang3/time/DateFormatUtilsTest.java\n@@ -108,132 +108,75 @@ public class DateFormatUtilsTest {\n         \n         assertEquals (""2005-01-01T12:00:00"", DateFormatUtils.formatUTC(c.getTime().getTime(), DateFormatUtils.ISO_DATETIME_FORMAT.getPattern(), Locale.US));\n     }\n+\n+    private void assertFormats(String expectedValue, String pattern, TimeZone timeZone, Calendar cal) {\n+        assertEquals(expectedValue, DateFormatUtils.format(cal.getTime(), pattern, timeZone));\n+        assertEquals(expectedValue, DateFormatUtils.format(cal.getTime().getTime(), pattern, timeZone));\n+        assertEquals(expectedValue, DateFormatUtils.format(cal, pattern, timeZone));\n+    }\n+\n+    private Calendar createFebruaryTestDate(final TimeZone timeZone) {\n+        final Calendar cal = Calendar.getInstance(timeZone);\n+        cal.set(2002, Calendar.FEBRUARY, 23, 9, 11, 12);\n+        return cal;\n+    }\n+\n+    private Calendar createJuneTestDate(final TimeZone timeZone) {\n+        final Calendar cal = Calendar.getInstance(timeZone);\n+        cal.set(2003, Calendar.JUNE, 8, 10, 11, 12);\n+        return cal;\n+    }\n+\n+    private void testGmtMinus3(String expectedValue, String pattern) {\n+        final TimeZone timeZone = TimeZone.getTimeZone(""GMT-3"");\n+        assertFormats(expectedValue, pattern, timeZone, createFebruaryTestDate(timeZone));\n+    }\n+\n+    private void testUTC(String expectedValue, String pattern) {\n+        final TimeZone timeZone = TimeZone.getTimeZone(""UTC"");\n+        assertFormats(expectedValue, pattern, timeZone, createFebruaryTestDate(timeZone));\n+    }\n     \n     @Test\n     public void testDateTimeISO() throws Exception {\n-        final TimeZone timeZone = TimeZone.getTimeZone(""GMT-3"");\n-        final Calendar cal = Calendar.getInstance(timeZone);\n-        cal.set(2002, Calendar.FEBRUARY, 23, 9, 11, 12);\n-        String text = DateFormatUtils.format(cal.getTime(), \n-                        DateFormatUtils.ISO_DATETIME_FORMAT.getPattern(), timeZone);\n-        assertEquals(""2002-02-23T09:11:12"", text);\n-        text = DateFormatUtils.format(cal.getTime().getTime(), \n-                      DateFormatUtils.ISO_DATETIME_FORMAT.getPattern(), timeZone);\n-        assertEquals(""2002-02-23T09:11:12"", text);\n-        text = DateFormatUtils.ISO_DATETIME_FORMAT.format(cal);\n-        assertEquals(""2002-02-23T09:11:12"", text);\n-        \n-        text = DateFormatUtils.format(cal.getTime(), \n-                      DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.getPattern(), timeZone);\n-        assertEquals(""2002-02-23T09:11:12-03:00"", text);\n-        text = DateFormatUtils.format(cal.getTime().getTime(), \n-                      DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.getPattern(), timeZone);\n-        assertEquals(""2002-02-23T09:11:12-03:00"", text);\n-        text = DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.format(cal);\n-        assertEquals(""2002-02-23T09:11:12-03:00"", text);\n-        \n-        Calendar utcCal = Calendar.getInstance(TimeZone.getTimeZone(""UTC""));\n-        utcCal.set(2002, Calendar.FEBRUARY, 23, 9, 11, 12);\n-        utcCal.set(Calendar.MILLISECOND, 0);\n-        text = DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.format(utcCal);\n-        assertEquals(""2002-02-23T09:11:12Z"", text);\n-        Date date = DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.parse(text);\n-        assertEquals(utcCal.getTime(), date);\n+        testGmtMinus3(""2002-02-23T09:11:12"", DateFormatUtils.ISO_DATETIME_FORMAT.getPattern());\n+        testGmtMinus3(""2002-02-23T09:11:12-03:00"", DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.getPattern());\n+        testUTC(""2002-02-23T09:11:12Z"", DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.getPattern());\n     }\n \n     @Test\n     public void testDateISO(){\n-        final TimeZone timeZone = TimeZone.getTimeZone(""GMT-3"");\n-        final Calendar cal = Calendar.getInstance(timeZone);\n-        cal.set(2002, Calendar.FEBRUARY, 23, 10, 11, 12);\n-        String text = DateFormatUtils.format(cal.getTime(), \n-                        DateFormatUtils.ISO_DATE_FORMAT.getPattern(), timeZone);\n-        assertEquals(""2002-02-23"", text);\n-        text = DateFormatUtils.format(cal.getTime().getTime(), \n-                        DateFormatUtils.ISO_DATE_FORMAT.getPattern(), timeZone);\n-        assertEquals(""2002-02-23"", text);\n-        text = DateFormatUtils.ISO_DATE_FORMAT.format(cal);\n-        assertEquals(""2002-02-23"", text);\n-        \n-        text = DateFormatUtils.format(cal.getTime(), \n-                      DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.getPattern(), timeZone);\n-        assertEquals(""2002-02-23-03:00"", text);\n-        text = DateFormatUtils.format(cal.getTime().getTime(), \n-                      DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.getPattern(), timeZone);\n-        assertEquals(""2002-02-23-03:00"", text);\n-        text = DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.format(cal);\n-        assertEquals(""2002-02-23-03:00"", text);\n+        testGmtMinus3(""2002-02-23"", DateFormatUtils.ISO_DATE_FORMAT.getPattern());\n+        testGmtMinus3(""2002-02-23-03:00"", DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.getPattern());\n+        testUTC(""2002-02-23Z"", DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.getPattern());\n     }\n \n     @Test\n     public void testTimeISO(){\n-        final TimeZone timeZone = TimeZone.getTimeZone(""GMT-3"");\n-        final Calendar cal = Calendar.getInstance(timeZone);\n-        cal.set(2002, Calendar.FEBRUARY, 23, 10, 11, 12);\n-        String text = DateFormatUtils.format(cal.getTime(), \n-                        DateFormatUtils.ISO_TIME_FORMAT.getPattern(), timeZone);\n-        assertEquals(""T10:11:12"", text);\n-        text = DateFormatUtils.format(cal.getTime().getTime(), \n-                        DateFormatUtils.ISO_TIME_FORMAT.getPattern(), timeZone);\n-        assertEquals(""T10:11:12"", text);\n-        text = DateFormatUtils.ISO_TIME_FORMAT.format(cal);\n-        assertEquals(""T10:11:12"", text);\n-        \n-        text = DateFormatUtils.format(cal.getTime(), \n-                      DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.getPattern(), timeZone);\n-        assertEquals(""T10:11:12-03:00"", text);\n-        text = DateFormatUtils.format(cal.getTime().getTime(), \n-                      DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.getPattern(), timeZone);\n-        assertEquals(""T10:11:12-03:00"", text);\n-        text = DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.format(cal);\n-        assertEquals(""T10:11:12-03:00"", text);\n+        testGmtMinus3(""T09:11:12"", DateFormatUtils.ISO_TIME_FORMAT.getPattern());\n+        testGmtMinus3(""T09:11:12-03:00"", DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.getPattern());\n+        testUTC(""T09:11:12Z"", DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.getPattern());\n     }\n \n     @Test\n     public void testTimeNoTISO(){\n-        final TimeZone timeZone = TimeZone.getTimeZone(""GMT-3"");\n-        final Calendar cal = Calendar.getInstance(timeZone);\n-        cal.set(2002, Calendar.FEBRUARY, 23, 10, 11, 12);\n-        String text = DateFormatUtils.format(cal.getTime(), \n-                        DateFormatUtils.ISO_TIME_NO_T_FORMAT.getPattern(), timeZone);\n-        assertEquals(""10:11:12"", text);\n-        text = DateFormatUtils.format(cal.getTime().getTime(), \n-                        DateFormatUtils.ISO_TIME_NO_T_FORMAT.getPattern(), timeZone);\n-        assertEquals(""10:11:12"", text);\n-        text = DateFormatUtils.ISO_TIME_NO_T_FORMAT.format(cal);\n-        assertEquals(""10:11:12"", text);\n-        \n-        text = DateFormatUtils.format(cal.getTime(), \n-                      DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.getPattern(), timeZone);\n-        assertEquals(""10:11:12-03:00"", text);\n-        text = DateFormatUtils.format(cal.getTime().getTime(), \n-                      DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.getPattern(), timeZone);\n-        assertEquals(""10:11:12-03:00"", text);\n-        text = DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.format(cal);\n-        assertEquals(""10:11:12-03:00"", text);\n+        testGmtMinus3(""09:11:12"", DateFormatUtils.ISO_TIME_NO_T_FORMAT.getPattern());\n+        testGmtMinus3(""09:11:12-03:00"", DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.getPattern());\n+        testUTC(""09:11:12Z"", DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.getPattern());\n     }\n \n     @Test\n     public void testSMTP(){\n-        final TimeZone timeZone = TimeZone.getTimeZone(""GMT-3"");\n-        final Calendar cal = Calendar.getInstance(timeZone);\n-        cal.set(2003, Calendar.JUNE, 8, 10, 11, 12);\n-        String text = DateFormatUtils.format(cal.getTime(), \n-                        DateFormatUtils.SMTP_DATETIME_FORMAT.getPattern(), timeZone,\n-                        DateFormatUtils.SMTP_DATETIME_FORMAT.getLocale());\n-        assertEquals(""Sun, 08 Jun 2003 10:11:12 -0300"", text);\n-        text = DateFormatUtils.format(cal.getTime().getTime(), \n-                        DateFormatUtils.SMTP_DATETIME_FORMAT.getPattern(), timeZone,\n-                        DateFormatUtils.SMTP_DATETIME_FORMAT.getLocale());\n-        assertEquals(""Sun, 08 Jun 2003 10:11:12 -0300"", text);\n-        text = DateFormatUtils.SMTP_DATETIME_FORMAT.format(cal);\n-        assertEquals(""Sun, 08 Jun 2003 10:11:12 -0300"", text);\n+        TimeZone timeZone = TimeZone.getTimeZone(""GMT-3"");\n+        Calendar june = createJuneTestDate(timeZone);\n         \n-        // format UTC\n-        text = DateFormatUtils.formatUTC(cal.getTime().getTime(), \n-                        DateFormatUtils.SMTP_DATETIME_FORMAT.getPattern(),\n-                        DateFormatUtils.SMTP_DATETIME_FORMAT.getLocale());\n-        assertEquals(""Sun, 08 Jun 2003 13:11:12 +0000"", text);\n+        assertFormats(""Sun, 08 Jun 2003 10:11:12 -0300"", DateFormatUtils.SMTP_DATETIME_FORMAT.getPattern(),\n+                timeZone, june);\n+\n+        timeZone = TimeZone.getTimeZone(""UTC"");\n+        june = createJuneTestDate(timeZone);\n+        assertFormats(""Sun, 08 Jun 2003 10:11:12 +0000"", DateFormatUtils.SMTP_DATETIME_FORMAT.getPattern(),\n+                timeZone, june);\n     }\n \n     /*\n@@ -285,4 +228,46 @@ public class DateFormatUtilsTest {\n             TimeZone.setDefault(save);\n         }\n     }\n+\n+    /**\n+     * According to LANG-916 (https://issues.apache.org/jira/browse/LANG-916),\n+     * the format method did contain a bug: it did not use the TimeZone data.\n+     *\n+     * This method test that the bug is fixed.\n+     */\n+    @Test\n+    public void testLang916() throws Exception {\n+\n+        Calendar cal = Calendar.getInstance(TimeZone.getTimeZone(""Europe/Paris""));\n+        cal.clear();\n+        cal.set(2009, 9, 16, 8, 42, 16);\n+\n+        // Long.\n+        {\n+            String value = DateFormatUtils.format(cal.getTimeInMillis(), DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.getPattern(), TimeZone.getTimeZone(""Europe/Paris""));\n+            assertEquals(""long"", ""2009-10-16T08:42:16+02:00"", value);\n+        }\n+        {\n+            String value = DateFormatUtils.format(cal.getTimeInMillis(), DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.getPattern(), TimeZone.getTimeZone(""Asia/Kolkata""));\n+            assertEquals(""long"", ""2009-10-16T12:12:16+05:30"", value);\n+        }\n+        {\n+            String value = DateFormatUtils.format(cal.getTimeInMillis(), DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.getPattern(), TimeZone.getTimeZone(""Europe/London""));\n+            assertEquals(""long"", ""2009-10-16T07:42:16+01:00"", value);\n+        }\n+\n+        // Calendar.\n+        {\n+            String value = DateFormatUtils.format(cal, DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.getPattern(), TimeZone.getTimeZone(""Europe/Paris""));\n+            assertEquals(""calendar"", ""2009-10-16T08:42:16+02:00"", value);\n+        }\n+        {\n+            String value = DateFormatUtils.format(cal, DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.getPattern(), TimeZone.getTimeZone(""Asia/Kolkata""));\n+            assertEquals(""calendar"", ""2009-10-16T12:12:16+05:30"", value);\n+        }\n+        {\n+            String value = DateFormatUtils.format(cal, DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.getPattern(), TimeZone.getTimeZone(""Europe/London""));\n+            assertEquals(""calendar"", ""2009-10-16T07:42:16+01:00"", value);\n+        }\n+    }\n }\ndiff --git a/src/test/java/org/apache/commons/lang3/time/DurationFormatUtilsTest.java b/src/test/java/org/apache/commons/lang3/time/DurationFormatUtilsTest.java\nindex 15456428a..6941f42f2 100644\n--- a/src/test/java/org/apache/commons/lang3/time/DurationFormatUtilsTest.java\n+++ b/src/test/java/org/apache/commons/lang3/time/DurationFormatUtilsTest.java\n@@ -266,7 +266,7 @@ public class DurationFormatUtilsTest {\n         cal.set(Calendar.MILLISECOND, 1);\n         String text;\n         // repeat a test from testDateTimeISO to compare extended and not extended.\n-        text = DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.format(cal);\n+        text = DateFormatUtils.format(cal, DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.getPattern(), timeZone);\n         assertEquals(""2002-02-23T09:11:12-03:00"", text);\n         // test fixture is the same as above, but now with extended format.\n         text = DurationFormatUtils.formatPeriod(base.getTime().getTime(), cal.getTime().getTime(),\ndiff --git a/src/test/java/org/apache/commons/lang3/time/FastDatePrinterTest.java b/src/test/java/org/apache/commons/lang3/time/FastDatePrinterTest.java\nindex f8b4930dc..5aaa67024 100644\n--- a/src/test/java/org/apache/commons/lang3/time/FastDatePrinterTest.java\n+++ b/src/test/java/org/apache/commons/lang3/time/FastDatePrinterTest.java\n@@ -214,7 +214,7 @@ public class FastDatePrinterTest {\n \n         final DatePrinter format = getInstance(""yyyy-MM-dd\'T\'HH:mm:ss.SSS\'Z\'"", TimeZone.getTimeZone(""GMT""));\n         assertEquals(""dateTime"", ""2009-10-16T16:42:16.000Z"", format.format(cal.getTime()));\n-        assertEquals(""dateTime"", ""2009-10-16T08:42:16.000Z"", format.format(cal));\n+        assertEquals(""dateTime"", ""2009-10-16T16:42:16.000Z"", format.format(cal));\n     }\n \n     @Test\n@@ -339,4 +339,32 @@ public class FastDatePrinterTest {\n         assertEquals(""0002"", getInstance(""dddd"", SWEDEN).format(cal));\n         assertEquals(""00002"", getInstance(""ddddd"", SWEDEN).format(cal));\n     }\n+\n+    /**\n+     * According to LANG-916 (https://issues.apache.org/jira/browse/LANG-916),\n+     * the format method did contain a bug: it did not use the TimeZone data.\n+     *\n+     * This method test that the bug is fixed.\n+     */\n+    @Test\n+    public void testLang916() throws Exception {\n+\n+        Calendar cal = Calendar.getInstance(TimeZone.getTimeZone(""Europe/Paris""));\n+        cal.clear();\n+        cal.set(2009, 9, 16, 8, 42, 16);\n+\n+        // calendar fast.\n+        {\n+            String value = FastDateFormat.getInstance(""yyyy-MM-dd\'T\'HH:mm:ss Z"", TimeZone.getTimeZone(""Europe/Paris"")).format(cal);\n+            assertEquals(""calendar"", ""2009-10-16T08:42:16 +0200"", value);\n+        }\n+        {\n+            String value = FastDateFormat.getInstance(""yyyy-MM-dd\'T\'HH:mm:ss Z"", TimeZone.getTimeZone(""Asia/Kolkata"")).format(cal);\n+            assertEquals(""calendar"", ""2009-10-16T12:12:16 +0530"", value);\n+        }\n+        {\n+            String value = FastDateFormat.getInstance(""yyyy-MM-dd\'T\'HH:mm:ss Z"", TimeZone.getTimeZone(""Europe/London"")).format(cal);\n+            assertEquals(""calendar"", ""2009-10-16T07:42:16 +0100"", value);\n+        }\n+    }\n }\ndiff --git a/src/test/java/org/apache/commons/lang3/time/FastDatePrinterTimeZonesTest.java b/src/test/java/org/apache/commons/lang3/time/FastDatePrinterTimeZonesTest.java\nindex 34ff2f516..3ae5f5625 100644\n--- a/src/test/java/org/apache/commons/lang3/time/FastDatePrinterTimeZonesTest.java\n+++ b/src/test/java/org/apache/commons/lang3/time/FastDatePrinterTimeZonesTest.java\n@@ -57,7 +57,7 @@ public class FastDatePrinterTimeZonesTest {\n         final SimpleDateFormat sdf = new SimpleDateFormat(PATTERN);\n         sdf.setTimeZone(timeZone);\n         final String expectedValue = sdf.format(cal.getTime());\n-        final String actualValue = FastDateFormat.getInstance(PATTERN).format(cal);\n+        final String actualValue = FastDateFormat.getInstance(PATTERN, this.timeZone).format(cal);\n         assertEquals(expectedValue, actualValue);\n     }\n '"
True,Regression,-1,commons-lang,775203dd2cfce017910d04c58a0b1b4e0a64923c,bea1ae92aa52a985f8c171c6e17ff7fc4aa61fe4,org.apache.commons.lang3.time.FastDatePrinterTest.testLang916,False,[],,,,"org.apache.commons.lang3.time.fastdateprinter.format(calendar,stringbuffer)","u'diff --git a/src/test/java/org/apache/commons/lang3/time/DateFormatUtilsTest.java b/src/test/java/org/apache/commons/lang3/time/DateFormatUtilsTest.java\nindex 5a1d69fa0..425ec6c50 100644\n--- a/src/test/java/org/apache/commons/lang3/time/DateFormatUtilsTest.java\n+++ b/src/test/java/org/apache/commons/lang3/time/DateFormatUtilsTest.java\n@@ -108,132 +108,75 @@ public class DateFormatUtilsTest {\n         \n         assertEquals (""2005-01-01T12:00:00"", DateFormatUtils.formatUTC(c.getTime().getTime(), DateFormatUtils.ISO_DATETIME_FORMAT.getPattern(), Locale.US));\n     }\n+\n+    private void assertFormats(String expectedValue, String pattern, TimeZone timeZone, Calendar cal) {\n+        assertEquals(expectedValue, DateFormatUtils.format(cal.getTime(), pattern, timeZone));\n+        assertEquals(expectedValue, DateFormatUtils.format(cal.getTime().getTime(), pattern, timeZone));\n+        assertEquals(expectedValue, DateFormatUtils.format(cal, pattern, timeZone));\n+    }\n+\n+    private Calendar createFebruaryTestDate(final TimeZone timeZone) {\n+        final Calendar cal = Calendar.getInstance(timeZone);\n+        cal.set(2002, Calendar.FEBRUARY, 23, 9, 11, 12);\n+        return cal;\n+    }\n+\n+    private Calendar createJuneTestDate(final TimeZone timeZone) {\n+        final Calendar cal = Calendar.getInstance(timeZone);\n+        cal.set(2003, Calendar.JUNE, 8, 10, 11, 12);\n+        return cal;\n+    }\n+\n+    private void testGmtMinus3(String expectedValue, String pattern) {\n+        final TimeZone timeZone = TimeZone.getTimeZone(""GMT-3"");\n+        assertFormats(expectedValue, pattern, timeZone, createFebruaryTestDate(timeZone));\n+    }\n+\n+    private void testUTC(String expectedValue, String pattern) {\n+        final TimeZone timeZone = TimeZone.getTimeZone(""UTC"");\n+        assertFormats(expectedValue, pattern, timeZone, createFebruaryTestDate(timeZone));\n+    }\n     \n     @Test\n     public void testDateTimeISO() throws Exception {\n-        final TimeZone timeZone = TimeZone.getTimeZone(""GMT-3"");\n-        final Calendar cal = Calendar.getInstance(timeZone);\n-        cal.set(2002, Calendar.FEBRUARY, 23, 9, 11, 12);\n-        String text = DateFormatUtils.format(cal.getTime(), \n-                        DateFormatUtils.ISO_DATETIME_FORMAT.getPattern(), timeZone);\n-        assertEquals(""2002-02-23T09:11:12"", text);\n-        text = DateFormatUtils.format(cal.getTime().getTime(), \n-                      DateFormatUtils.ISO_DATETIME_FORMAT.getPattern(), timeZone);\n-        assertEquals(""2002-02-23T09:11:12"", text);\n-        text = DateFormatUtils.ISO_DATETIME_FORMAT.format(cal);\n-        assertEquals(""2002-02-23T09:11:12"", text);\n-        \n-        text = DateFormatUtils.format(cal.getTime(), \n-                      DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.getPattern(), timeZone);\n-        assertEquals(""2002-02-23T09:11:12-03:00"", text);\n-        text = DateFormatUtils.format(cal.getTime().getTime(), \n-                      DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.getPattern(), timeZone);\n-        assertEquals(""2002-02-23T09:11:12-03:00"", text);\n-        text = DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.format(cal);\n-        assertEquals(""2002-02-23T09:11:12-03:00"", text);\n-        \n-        Calendar utcCal = Calendar.getInstance(TimeZone.getTimeZone(""UTC""));\n-        utcCal.set(2002, Calendar.FEBRUARY, 23, 9, 11, 12);\n-        utcCal.set(Calendar.MILLISECOND, 0);\n-        text = DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.format(utcCal);\n-        assertEquals(""2002-02-23T09:11:12Z"", text);\n-        Date date = DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.parse(text);\n-        assertEquals(utcCal.getTime(), date);\n+        testGmtMinus3(""2002-02-23T09:11:12"", DateFormatUtils.ISO_DATETIME_FORMAT.getPattern());\n+        testGmtMinus3(""2002-02-23T09:11:12-03:00"", DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.getPattern());\n+        testUTC(""2002-02-23T09:11:12Z"", DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.getPattern());\n     }\n \n     @Test\n     public void testDateISO(){\n-        final TimeZone timeZone = TimeZone.getTimeZone(""GMT-3"");\n-        final Calendar cal = Calendar.getInstance(timeZone);\n-        cal.set(2002, Calendar.FEBRUARY, 23, 10, 11, 12);\n-        String text = DateFormatUtils.format(cal.getTime(), \n-                        DateFormatUtils.ISO_DATE_FORMAT.getPattern(), timeZone);\n-        assertEquals(""2002-02-23"", text);\n-        text = DateFormatUtils.format(cal.getTime().getTime(), \n-                        DateFormatUtils.ISO_DATE_FORMAT.getPattern(), timeZone);\n-        assertEquals(""2002-02-23"", text);\n-        text = DateFormatUtils.ISO_DATE_FORMAT.format(cal);\n-        assertEquals(""2002-02-23"", text);\n-        \n-        text = DateFormatUtils.format(cal.getTime(), \n-                      DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.getPattern(), timeZone);\n-        assertEquals(""2002-02-23-03:00"", text);\n-        text = DateFormatUtils.format(cal.getTime().getTime(), \n-                      DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.getPattern(), timeZone);\n-        assertEquals(""2002-02-23-03:00"", text);\n-        text = DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.format(cal);\n-        assertEquals(""2002-02-23-03:00"", text);\n+        testGmtMinus3(""2002-02-23"", DateFormatUtils.ISO_DATE_FORMAT.getPattern());\n+        testGmtMinus3(""2002-02-23-03:00"", DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.getPattern());\n+        testUTC(""2002-02-23Z"", DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.getPattern());\n     }\n \n     @Test\n     public void testTimeISO(){\n-        final TimeZone timeZone = TimeZone.getTimeZone(""GMT-3"");\n-        final Calendar cal = Calendar.getInstance(timeZone);\n-        cal.set(2002, Calendar.FEBRUARY, 23, 10, 11, 12);\n-        String text = DateFormatUtils.format(cal.getTime(), \n-                        DateFormatUtils.ISO_TIME_FORMAT.getPattern(), timeZone);\n-        assertEquals(""T10:11:12"", text);\n-        text = DateFormatUtils.format(cal.getTime().getTime(), \n-                        DateFormatUtils.ISO_TIME_FORMAT.getPattern(), timeZone);\n-        assertEquals(""T10:11:12"", text);\n-        text = DateFormatUtils.ISO_TIME_FORMAT.format(cal);\n-        assertEquals(""T10:11:12"", text);\n-        \n-        text = DateFormatUtils.format(cal.getTime(), \n-                      DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.getPattern(), timeZone);\n-        assertEquals(""T10:11:12-03:00"", text);\n-        text = DateFormatUtils.format(cal.getTime().getTime(), \n-                      DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.getPattern(), timeZone);\n-        assertEquals(""T10:11:12-03:00"", text);\n-        text = DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.format(cal);\n-        assertEquals(""T10:11:12-03:00"", text);\n+        testGmtMinus3(""T09:11:12"", DateFormatUtils.ISO_TIME_FORMAT.getPattern());\n+        testGmtMinus3(""T09:11:12-03:00"", DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.getPattern());\n+        testUTC(""T09:11:12Z"", DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.getPattern());\n     }\n \n     @Test\n     public void testTimeNoTISO(){\n-        final TimeZone timeZone = TimeZone.getTimeZone(""GMT-3"");\n-        final Calendar cal = Calendar.getInstance(timeZone);\n-        cal.set(2002, Calendar.FEBRUARY, 23, 10, 11, 12);\n-        String text = DateFormatUtils.format(cal.getTime(), \n-                        DateFormatUtils.ISO_TIME_NO_T_FORMAT.getPattern(), timeZone);\n-        assertEquals(""10:11:12"", text);\n-        text = DateFormatUtils.format(cal.getTime().getTime(), \n-                        DateFormatUtils.ISO_TIME_NO_T_FORMAT.getPattern(), timeZone);\n-        assertEquals(""10:11:12"", text);\n-        text = DateFormatUtils.ISO_TIME_NO_T_FORMAT.format(cal);\n-        assertEquals(""10:11:12"", text);\n-        \n-        text = DateFormatUtils.format(cal.getTime(), \n-                      DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.getPattern(), timeZone);\n-        assertEquals(""10:11:12-03:00"", text);\n-        text = DateFormatUtils.format(cal.getTime().getTime(), \n-                      DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.getPattern(), timeZone);\n-        assertEquals(""10:11:12-03:00"", text);\n-        text = DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.format(cal);\n-        assertEquals(""10:11:12-03:00"", text);\n+        testGmtMinus3(""09:11:12"", DateFormatUtils.ISO_TIME_NO_T_FORMAT.getPattern());\n+        testGmtMinus3(""09:11:12-03:00"", DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.getPattern());\n+        testUTC(""09:11:12Z"", DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.getPattern());\n     }\n \n     @Test\n     public void testSMTP(){\n-        final TimeZone timeZone = TimeZone.getTimeZone(""GMT-3"");\n-        final Calendar cal = Calendar.getInstance(timeZone);\n-        cal.set(2003, Calendar.JUNE, 8, 10, 11, 12);\n-        String text = DateFormatUtils.format(cal.getTime(), \n-                        DateFormatUtils.SMTP_DATETIME_FORMAT.getPattern(), timeZone,\n-                        DateFormatUtils.SMTP_DATETIME_FORMAT.getLocale());\n-        assertEquals(""Sun, 08 Jun 2003 10:11:12 -0300"", text);\n-        text = DateFormatUtils.format(cal.getTime().getTime(), \n-                        DateFormatUtils.SMTP_DATETIME_FORMAT.getPattern(), timeZone,\n-                        DateFormatUtils.SMTP_DATETIME_FORMAT.getLocale());\n-        assertEquals(""Sun, 08 Jun 2003 10:11:12 -0300"", text);\n-        text = DateFormatUtils.SMTP_DATETIME_FORMAT.format(cal);\n-        assertEquals(""Sun, 08 Jun 2003 10:11:12 -0300"", text);\n+        TimeZone timeZone = TimeZone.getTimeZone(""GMT-3"");\n+        Calendar june = createJuneTestDate(timeZone);\n         \n-        // format UTC\n-        text = DateFormatUtils.formatUTC(cal.getTime().getTime(), \n-                        DateFormatUtils.SMTP_DATETIME_FORMAT.getPattern(),\n-                        DateFormatUtils.SMTP_DATETIME_FORMAT.getLocale());\n-        assertEquals(""Sun, 08 Jun 2003 13:11:12 +0000"", text);\n+        assertFormats(""Sun, 08 Jun 2003 10:11:12 -0300"", DateFormatUtils.SMTP_DATETIME_FORMAT.getPattern(),\n+                timeZone, june);\n+\n+        timeZone = TimeZone.getTimeZone(""UTC"");\n+        june = createJuneTestDate(timeZone);\n+        assertFormats(""Sun, 08 Jun 2003 10:11:12 +0000"", DateFormatUtils.SMTP_DATETIME_FORMAT.getPattern(),\n+                timeZone, june);\n     }\n \n     /*\n@@ -285,4 +228,46 @@ public class DateFormatUtilsTest {\n             TimeZone.setDefault(save);\n         }\n     }\n+\n+    /**\n+     * According to LANG-916 (https://issues.apache.org/jira/browse/LANG-916),\n+     * the format method did contain a bug: it did not use the TimeZone data.\n+     *\n+     * This method test that the bug is fixed.\n+     */\n+    @Test\n+    public void testLang916() throws Exception {\n+\n+        Calendar cal = Calendar.getInstance(TimeZone.getTimeZone(""Europe/Paris""));\n+        cal.clear();\n+        cal.set(2009, 9, 16, 8, 42, 16);\n+\n+        // Long.\n+        {\n+            String value = DateFormatUtils.format(cal.getTimeInMillis(), DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.getPattern(), TimeZone.getTimeZone(""Europe/Paris""));\n+            assertEquals(""long"", ""2009-10-16T08:42:16+02:00"", value);\n+        }\n+        {\n+            String value = DateFormatUtils.format(cal.getTimeInMillis(), DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.getPattern(), TimeZone.getTimeZone(""Asia/Kolkata""));\n+            assertEquals(""long"", ""2009-10-16T12:12:16+05:30"", value);\n+        }\n+        {\n+            String value = DateFormatUtils.format(cal.getTimeInMillis(), DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.getPattern(), TimeZone.getTimeZone(""Europe/London""));\n+            assertEquals(""long"", ""2009-10-16T07:42:16+01:00"", value);\n+        }\n+\n+        // Calendar.\n+        {\n+            String value = DateFormatUtils.format(cal, DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.getPattern(), TimeZone.getTimeZone(""Europe/Paris""));\n+            assertEquals(""calendar"", ""2009-10-16T08:42:16+02:00"", value);\n+        }\n+        {\n+            String value = DateFormatUtils.format(cal, DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.getPattern(), TimeZone.getTimeZone(""Asia/Kolkata""));\n+            assertEquals(""calendar"", ""2009-10-16T12:12:16+05:30"", value);\n+        }\n+        {\n+            String value = DateFormatUtils.format(cal, DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.getPattern(), TimeZone.getTimeZone(""Europe/London""));\n+            assertEquals(""calendar"", ""2009-10-16T07:42:16+01:00"", value);\n+        }\n+    }\n }\ndiff --git a/src/test/java/org/apache/commons/lang3/time/DurationFormatUtilsTest.java b/src/test/java/org/apache/commons/lang3/time/DurationFormatUtilsTest.java\nindex 15456428a..6941f42f2 100644\n--- a/src/test/java/org/apache/commons/lang3/time/DurationFormatUtilsTest.java\n+++ b/src/test/java/org/apache/commons/lang3/time/DurationFormatUtilsTest.java\n@@ -266,7 +266,7 @@ public class DurationFormatUtilsTest {\n         cal.set(Calendar.MILLISECOND, 1);\n         String text;\n         // repeat a test from testDateTimeISO to compare extended and not extended.\n-        text = DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.format(cal);\n+        text = DateFormatUtils.format(cal, DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.getPattern(), timeZone);\n         assertEquals(""2002-02-23T09:11:12-03:00"", text);\n         // test fixture is the same as above, but now with extended format.\n         text = DurationFormatUtils.formatPeriod(base.getTime().getTime(), cal.getTime().getTime(),\ndiff --git a/src/test/java/org/apache/commons/lang3/time/FastDatePrinterTest.java b/src/test/java/org/apache/commons/lang3/time/FastDatePrinterTest.java\nindex f8b4930dc..5aaa67024 100644\n--- a/src/test/java/org/apache/commons/lang3/time/FastDatePrinterTest.java\n+++ b/src/test/java/org/apache/commons/lang3/time/FastDatePrinterTest.java\n@@ -214,7 +214,7 @@ public class FastDatePrinterTest {\n \n         final DatePrinter format = getInstance(""yyyy-MM-dd\'T\'HH:mm:ss.SSS\'Z\'"", TimeZone.getTimeZone(""GMT""));\n         assertEquals(""dateTime"", ""2009-10-16T16:42:16.000Z"", format.format(cal.getTime()));\n-        assertEquals(""dateTime"", ""2009-10-16T08:42:16.000Z"", format.format(cal));\n+        assertEquals(""dateTime"", ""2009-10-16T16:42:16.000Z"", format.format(cal));\n     }\n \n     @Test\n@@ -339,4 +339,32 @@ public class FastDatePrinterTest {\n         assertEquals(""0002"", getInstance(""dddd"", SWEDEN).format(cal));\n         assertEquals(""00002"", getInstance(""ddddd"", SWEDEN).format(cal));\n     }\n+\n+    /**\n+     * According to LANG-916 (https://issues.apache.org/jira/browse/LANG-916),\n+     * the format method did contain a bug: it did not use the TimeZone data.\n+     *\n+     * This method test that the bug is fixed.\n+     */\n+    @Test\n+    public void testLang916() throws Exception {\n+\n+        Calendar cal = Calendar.getInstance(TimeZone.getTimeZone(""Europe/Paris""));\n+        cal.clear();\n+        cal.set(2009, 9, 16, 8, 42, 16);\n+\n+        // calendar fast.\n+        {\n+            String value = FastDateFormat.getInstance(""yyyy-MM-dd\'T\'HH:mm:ss Z"", TimeZone.getTimeZone(""Europe/Paris"")).format(cal);\n+            assertEquals(""calendar"", ""2009-10-16T08:42:16 +0200"", value);\n+        }\n+        {\n+            String value = FastDateFormat.getInstance(""yyyy-MM-dd\'T\'HH:mm:ss Z"", TimeZone.getTimeZone(""Asia/Kolkata"")).format(cal);\n+            assertEquals(""calendar"", ""2009-10-16T12:12:16 +0530"", value);\n+        }\n+        {\n+            String value = FastDateFormat.getInstance(""yyyy-MM-dd\'T\'HH:mm:ss Z"", TimeZone.getTimeZone(""Europe/London"")).format(cal);\n+            assertEquals(""calendar"", ""2009-10-16T07:42:16 +0100"", value);\n+        }\n+    }\n }\ndiff --git a/src/test/java/org/apache/commons/lang3/time/FastDatePrinterTimeZonesTest.java b/src/test/java/org/apache/commons/lang3/time/FastDatePrinterTimeZonesTest.java\nindex 34ff2f516..3ae5f5625 100644\n--- a/src/test/java/org/apache/commons/lang3/time/FastDatePrinterTimeZonesTest.java\n+++ b/src/test/java/org/apache/commons/lang3/time/FastDatePrinterTimeZonesTest.java\n@@ -57,7 +57,7 @@ public class FastDatePrinterTimeZonesTest {\n         final SimpleDateFormat sdf = new SimpleDateFormat(PATTERN);\n         sdf.setTimeZone(timeZone);\n         final String expectedValue = sdf.format(cal.getTime());\n-        final String actualValue = FastDateFormat.getInstance(PATTERN).format(cal);\n+        final String actualValue = FastDateFormat.getInstance(PATTERN, this.timeZone).format(cal);\n         assertEquals(expectedValue, actualValue);\n     }\n '"
True,Regression,-1,commons-lang,775203dd2cfce017910d04c58a0b1b4e0a64923c,bea1ae92aa52a985f8c171c6e17ff7fc4aa61fe4,org.apache.commons.lang3.time.DateFormatUtilsTest.testLang916,False,[],,,,"org.apache.commons.lang3.time.fastdateprinter.format(calendar,stringbuffer)","u'diff --git a/src/test/java/org/apache/commons/lang3/time/DateFormatUtilsTest.java b/src/test/java/org/apache/commons/lang3/time/DateFormatUtilsTest.java\nindex 5a1d69fa0..425ec6c50 100644\n--- a/src/test/java/org/apache/commons/lang3/time/DateFormatUtilsTest.java\n+++ b/src/test/java/org/apache/commons/lang3/time/DateFormatUtilsTest.java\n@@ -108,132 +108,75 @@ public class DateFormatUtilsTest {\n         \n         assertEquals (""2005-01-01T12:00:00"", DateFormatUtils.formatUTC(c.getTime().getTime(), DateFormatUtils.ISO_DATETIME_FORMAT.getPattern(), Locale.US));\n     }\n+\n+    private void assertFormats(String expectedValue, String pattern, TimeZone timeZone, Calendar cal) {\n+        assertEquals(expectedValue, DateFormatUtils.format(cal.getTime(), pattern, timeZone));\n+        assertEquals(expectedValue, DateFormatUtils.format(cal.getTime().getTime(), pattern, timeZone));\n+        assertEquals(expectedValue, DateFormatUtils.format(cal, pattern, timeZone));\n+    }\n+\n+    private Calendar createFebruaryTestDate(final TimeZone timeZone) {\n+        final Calendar cal = Calendar.getInstance(timeZone);\n+        cal.set(2002, Calendar.FEBRUARY, 23, 9, 11, 12);\n+        return cal;\n+    }\n+\n+    private Calendar createJuneTestDate(final TimeZone timeZone) {\n+        final Calendar cal = Calendar.getInstance(timeZone);\n+        cal.set(2003, Calendar.JUNE, 8, 10, 11, 12);\n+        return cal;\n+    }\n+\n+    private void testGmtMinus3(String expectedValue, String pattern) {\n+        final TimeZone timeZone = TimeZone.getTimeZone(""GMT-3"");\n+        assertFormats(expectedValue, pattern, timeZone, createFebruaryTestDate(timeZone));\n+    }\n+\n+    private void testUTC(String expectedValue, String pattern) {\n+        final TimeZone timeZone = TimeZone.getTimeZone(""UTC"");\n+        assertFormats(expectedValue, pattern, timeZone, createFebruaryTestDate(timeZone));\n+    }\n     \n     @Test\n     public void testDateTimeISO() throws Exception {\n-        final TimeZone timeZone = TimeZone.getTimeZone(""GMT-3"");\n-        final Calendar cal = Calendar.getInstance(timeZone);\n-        cal.set(2002, Calendar.FEBRUARY, 23, 9, 11, 12);\n-        String text = DateFormatUtils.format(cal.getTime(), \n-                        DateFormatUtils.ISO_DATETIME_FORMAT.getPattern(), timeZone);\n-        assertEquals(""2002-02-23T09:11:12"", text);\n-        text = DateFormatUtils.format(cal.getTime().getTime(), \n-                      DateFormatUtils.ISO_DATETIME_FORMAT.getPattern(), timeZone);\n-        assertEquals(""2002-02-23T09:11:12"", text);\n-        text = DateFormatUtils.ISO_DATETIME_FORMAT.format(cal);\n-        assertEquals(""2002-02-23T09:11:12"", text);\n-        \n-        text = DateFormatUtils.format(cal.getTime(), \n-                      DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.getPattern(), timeZone);\n-        assertEquals(""2002-02-23T09:11:12-03:00"", text);\n-        text = DateFormatUtils.format(cal.getTime().getTime(), \n-                      DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.getPattern(), timeZone);\n-        assertEquals(""2002-02-23T09:11:12-03:00"", text);\n-        text = DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.format(cal);\n-        assertEquals(""2002-02-23T09:11:12-03:00"", text);\n-        \n-        Calendar utcCal = Calendar.getInstance(TimeZone.getTimeZone(""UTC""));\n-        utcCal.set(2002, Calendar.FEBRUARY, 23, 9, 11, 12);\n-        utcCal.set(Calendar.MILLISECOND, 0);\n-        text = DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.format(utcCal);\n-        assertEquals(""2002-02-23T09:11:12Z"", text);\n-        Date date = DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.parse(text);\n-        assertEquals(utcCal.getTime(), date);\n+        testGmtMinus3(""2002-02-23T09:11:12"", DateFormatUtils.ISO_DATETIME_FORMAT.getPattern());\n+        testGmtMinus3(""2002-02-23T09:11:12-03:00"", DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.getPattern());\n+        testUTC(""2002-02-23T09:11:12Z"", DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.getPattern());\n     }\n \n     @Test\n     public void testDateISO(){\n-        final TimeZone timeZone = TimeZone.getTimeZone(""GMT-3"");\n-        final Calendar cal = Calendar.getInstance(timeZone);\n-        cal.set(2002, Calendar.FEBRUARY, 23, 10, 11, 12);\n-        String text = DateFormatUtils.format(cal.getTime(), \n-                        DateFormatUtils.ISO_DATE_FORMAT.getPattern(), timeZone);\n-        assertEquals(""2002-02-23"", text);\n-        text = DateFormatUtils.format(cal.getTime().getTime(), \n-                        DateFormatUtils.ISO_DATE_FORMAT.getPattern(), timeZone);\n-        assertEquals(""2002-02-23"", text);\n-        text = DateFormatUtils.ISO_DATE_FORMAT.format(cal);\n-        assertEquals(""2002-02-23"", text);\n-        \n-        text = DateFormatUtils.format(cal.getTime(), \n-                      DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.getPattern(), timeZone);\n-        assertEquals(""2002-02-23-03:00"", text);\n-        text = DateFormatUtils.format(cal.getTime().getTime(), \n-                      DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.getPattern(), timeZone);\n-        assertEquals(""2002-02-23-03:00"", text);\n-        text = DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.format(cal);\n-        assertEquals(""2002-02-23-03:00"", text);\n+        testGmtMinus3(""2002-02-23"", DateFormatUtils.ISO_DATE_FORMAT.getPattern());\n+        testGmtMinus3(""2002-02-23-03:00"", DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.getPattern());\n+        testUTC(""2002-02-23Z"", DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.getPattern());\n     }\n \n     @Test\n     public void testTimeISO(){\n-        final TimeZone timeZone = TimeZone.getTimeZone(""GMT-3"");\n-        final Calendar cal = Calendar.getInstance(timeZone);\n-        cal.set(2002, Calendar.FEBRUARY, 23, 10, 11, 12);\n-        String text = DateFormatUtils.format(cal.getTime(), \n-                        DateFormatUtils.ISO_TIME_FORMAT.getPattern(), timeZone);\n-        assertEquals(""T10:11:12"", text);\n-        text = DateFormatUtils.format(cal.getTime().getTime(), \n-                        DateFormatUtils.ISO_TIME_FORMAT.getPattern(), timeZone);\n-        assertEquals(""T10:11:12"", text);\n-        text = DateFormatUtils.ISO_TIME_FORMAT.format(cal);\n-        assertEquals(""T10:11:12"", text);\n-        \n-        text = DateFormatUtils.format(cal.getTime(), \n-                      DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.getPattern(), timeZone);\n-        assertEquals(""T10:11:12-03:00"", text);\n-        text = DateFormatUtils.format(cal.getTime().getTime(), \n-                      DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.getPattern(), timeZone);\n-        assertEquals(""T10:11:12-03:00"", text);\n-        text = DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.format(cal);\n-        assertEquals(""T10:11:12-03:00"", text);\n+        testGmtMinus3(""T09:11:12"", DateFormatUtils.ISO_TIME_FORMAT.getPattern());\n+        testGmtMinus3(""T09:11:12-03:00"", DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.getPattern());\n+        testUTC(""T09:11:12Z"", DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.getPattern());\n     }\n \n     @Test\n     public void testTimeNoTISO(){\n-        final TimeZone timeZone = TimeZone.getTimeZone(""GMT-3"");\n-        final Calendar cal = Calendar.getInstance(timeZone);\n-        cal.set(2002, Calendar.FEBRUARY, 23, 10, 11, 12);\n-        String text = DateFormatUtils.format(cal.getTime(), \n-                        DateFormatUtils.ISO_TIME_NO_T_FORMAT.getPattern(), timeZone);\n-        assertEquals(""10:11:12"", text);\n-        text = DateFormatUtils.format(cal.getTime().getTime(), \n-                        DateFormatUtils.ISO_TIME_NO_T_FORMAT.getPattern(), timeZone);\n-        assertEquals(""10:11:12"", text);\n-        text = DateFormatUtils.ISO_TIME_NO_T_FORMAT.format(cal);\n-        assertEquals(""10:11:12"", text);\n-        \n-        text = DateFormatUtils.format(cal.getTime(), \n-                      DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.getPattern(), timeZone);\n-        assertEquals(""10:11:12-03:00"", text);\n-        text = DateFormatUtils.format(cal.getTime().getTime(), \n-                      DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.getPattern(), timeZone);\n-        assertEquals(""10:11:12-03:00"", text);\n-        text = DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.format(cal);\n-        assertEquals(""10:11:12-03:00"", text);\n+        testGmtMinus3(""09:11:12"", DateFormatUtils.ISO_TIME_NO_T_FORMAT.getPattern());\n+        testGmtMinus3(""09:11:12-03:00"", DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.getPattern());\n+        testUTC(""09:11:12Z"", DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.getPattern());\n     }\n \n     @Test\n     public void testSMTP(){\n-        final TimeZone timeZone = TimeZone.getTimeZone(""GMT-3"");\n-        final Calendar cal = Calendar.getInstance(timeZone);\n-        cal.set(2003, Calendar.JUNE, 8, 10, 11, 12);\n-        String text = DateFormatUtils.format(cal.getTime(), \n-                        DateFormatUtils.SMTP_DATETIME_FORMAT.getPattern(), timeZone,\n-                        DateFormatUtils.SMTP_DATETIME_FORMAT.getLocale());\n-        assertEquals(""Sun, 08 Jun 2003 10:11:12 -0300"", text);\n-        text = DateFormatUtils.format(cal.getTime().getTime(), \n-                        DateFormatUtils.SMTP_DATETIME_FORMAT.getPattern(), timeZone,\n-                        DateFormatUtils.SMTP_DATETIME_FORMAT.getLocale());\n-        assertEquals(""Sun, 08 Jun 2003 10:11:12 -0300"", text);\n-        text = DateFormatUtils.SMTP_DATETIME_FORMAT.format(cal);\n-        assertEquals(""Sun, 08 Jun 2003 10:11:12 -0300"", text);\n+        TimeZone timeZone = TimeZone.getTimeZone(""GMT-3"");\n+        Calendar june = createJuneTestDate(timeZone);\n         \n-        // format UTC\n-        text = DateFormatUtils.formatUTC(cal.getTime().getTime(), \n-                        DateFormatUtils.SMTP_DATETIME_FORMAT.getPattern(),\n-                        DateFormatUtils.SMTP_DATETIME_FORMAT.getLocale());\n-        assertEquals(""Sun, 08 Jun 2003 13:11:12 +0000"", text);\n+        assertFormats(""Sun, 08 Jun 2003 10:11:12 -0300"", DateFormatUtils.SMTP_DATETIME_FORMAT.getPattern(),\n+                timeZone, june);\n+\n+        timeZone = TimeZone.getTimeZone(""UTC"");\n+        june = createJuneTestDate(timeZone);\n+        assertFormats(""Sun, 08 Jun 2003 10:11:12 +0000"", DateFormatUtils.SMTP_DATETIME_FORMAT.getPattern(),\n+                timeZone, june);\n     }\n \n     /*\n@@ -285,4 +228,46 @@ public class DateFormatUtilsTest {\n             TimeZone.setDefault(save);\n         }\n     }\n+\n+    /**\n+     * According to LANG-916 (https://issues.apache.org/jira/browse/LANG-916),\n+     * the format method did contain a bug: it did not use the TimeZone data.\n+     *\n+     * This method test that the bug is fixed.\n+     */\n+    @Test\n+    public void testLang916() throws Exception {\n+\n+        Calendar cal = Calendar.getInstance(TimeZone.getTimeZone(""Europe/Paris""));\n+        cal.clear();\n+        cal.set(2009, 9, 16, 8, 42, 16);\n+\n+        // Long.\n+        {\n+            String value = DateFormatUtils.format(cal.getTimeInMillis(), DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.getPattern(), TimeZone.getTimeZone(""Europe/Paris""));\n+            assertEquals(""long"", ""2009-10-16T08:42:16+02:00"", value);\n+        }\n+        {\n+            String value = DateFormatUtils.format(cal.getTimeInMillis(), DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.getPattern(), TimeZone.getTimeZone(""Asia/Kolkata""));\n+            assertEquals(""long"", ""2009-10-16T12:12:16+05:30"", value);\n+        }\n+        {\n+            String value = DateFormatUtils.format(cal.getTimeInMillis(), DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.getPattern(), TimeZone.getTimeZone(""Europe/London""));\n+            assertEquals(""long"", ""2009-10-16T07:42:16+01:00"", value);\n+        }\n+\n+        // Calendar.\n+        {\n+            String value = DateFormatUtils.format(cal, DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.getPattern(), TimeZone.getTimeZone(""Europe/Paris""));\n+            assertEquals(""calendar"", ""2009-10-16T08:42:16+02:00"", value);\n+        }\n+        {\n+            String value = DateFormatUtils.format(cal, DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.getPattern(), TimeZone.getTimeZone(""Asia/Kolkata""));\n+            assertEquals(""calendar"", ""2009-10-16T12:12:16+05:30"", value);\n+        }\n+        {\n+            String value = DateFormatUtils.format(cal, DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.getPattern(), TimeZone.getTimeZone(""Europe/London""));\n+            assertEquals(""calendar"", ""2009-10-16T07:42:16+01:00"", value);\n+        }\n+    }\n }\ndiff --git a/src/test/java/org/apache/commons/lang3/time/DurationFormatUtilsTest.java b/src/test/java/org/apache/commons/lang3/time/DurationFormatUtilsTest.java\nindex 15456428a..6941f42f2 100644\n--- a/src/test/java/org/apache/commons/lang3/time/DurationFormatUtilsTest.java\n+++ b/src/test/java/org/apache/commons/lang3/time/DurationFormatUtilsTest.java\n@@ -266,7 +266,7 @@ public class DurationFormatUtilsTest {\n         cal.set(Calendar.MILLISECOND, 1);\n         String text;\n         // repeat a test from testDateTimeISO to compare extended and not extended.\n-        text = DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.format(cal);\n+        text = DateFormatUtils.format(cal, DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.getPattern(), timeZone);\n         assertEquals(""2002-02-23T09:11:12-03:00"", text);\n         // test fixture is the same as above, but now with extended format.\n         text = DurationFormatUtils.formatPeriod(base.getTime().getTime(), cal.getTime().getTime(),\ndiff --git a/src/test/java/org/apache/commons/lang3/time/FastDatePrinterTest.java b/src/test/java/org/apache/commons/lang3/time/FastDatePrinterTest.java\nindex f8b4930dc..5aaa67024 100644\n--- a/src/test/java/org/apache/commons/lang3/time/FastDatePrinterTest.java\n+++ b/src/test/java/org/apache/commons/lang3/time/FastDatePrinterTest.java\n@@ -214,7 +214,7 @@ public class FastDatePrinterTest {\n \n         final DatePrinter format = getInstance(""yyyy-MM-dd\'T\'HH:mm:ss.SSS\'Z\'"", TimeZone.getTimeZone(""GMT""));\n         assertEquals(""dateTime"", ""2009-10-16T16:42:16.000Z"", format.format(cal.getTime()));\n-        assertEquals(""dateTime"", ""2009-10-16T08:42:16.000Z"", format.format(cal));\n+        assertEquals(""dateTime"", ""2009-10-16T16:42:16.000Z"", format.format(cal));\n     }\n \n     @Test\n@@ -339,4 +339,32 @@ public class FastDatePrinterTest {\n         assertEquals(""0002"", getInstance(""dddd"", SWEDEN).format(cal));\n         assertEquals(""00002"", getInstance(""ddddd"", SWEDEN).format(cal));\n     }\n+\n+    /**\n+     * According to LANG-916 (https://issues.apache.org/jira/browse/LANG-916),\n+     * the format method did contain a bug: it did not use the TimeZone data.\n+     *\n+     * This method test that the bug is fixed.\n+     */\n+    @Test\n+    public void testLang916() throws Exception {\n+\n+        Calendar cal = Calendar.getInstance(TimeZone.getTimeZone(""Europe/Paris""));\n+        cal.clear();\n+        cal.set(2009, 9, 16, 8, 42, 16);\n+\n+        // calendar fast.\n+        {\n+            String value = FastDateFormat.getInstance(""yyyy-MM-dd\'T\'HH:mm:ss Z"", TimeZone.getTimeZone(""Europe/Paris"")).format(cal);\n+            assertEquals(""calendar"", ""2009-10-16T08:42:16 +0200"", value);\n+        }\n+        {\n+            String value = FastDateFormat.getInstance(""yyyy-MM-dd\'T\'HH:mm:ss Z"", TimeZone.getTimeZone(""Asia/Kolkata"")).format(cal);\n+            assertEquals(""calendar"", ""2009-10-16T12:12:16 +0530"", value);\n+        }\n+        {\n+            String value = FastDateFormat.getInstance(""yyyy-MM-dd\'T\'HH:mm:ss Z"", TimeZone.getTimeZone(""Europe/London"")).format(cal);\n+            assertEquals(""calendar"", ""2009-10-16T07:42:16 +0100"", value);\n+        }\n+    }\n }\ndiff --git a/src/test/java/org/apache/commons/lang3/time/FastDatePrinterTimeZonesTest.java b/src/test/java/org/apache/commons/lang3/time/FastDatePrinterTimeZonesTest.java\nindex 34ff2f516..3ae5f5625 100644\n--- a/src/test/java/org/apache/commons/lang3/time/FastDatePrinterTimeZonesTest.java\n+++ b/src/test/java/org/apache/commons/lang3/time/FastDatePrinterTimeZonesTest.java\n@@ -57,7 +57,7 @@ public class FastDatePrinterTimeZonesTest {\n         final SimpleDateFormat sdf = new SimpleDateFormat(PATTERN);\n         sdf.setTimeZone(timeZone);\n         final String expectedValue = sdf.format(cal.getTime());\n-        final String actualValue = FastDateFormat.getInstance(PATTERN).format(cal);\n+        final String actualValue = FastDateFormat.getInstance(PATTERN, this.timeZone).format(cal);\n         assertEquals(expectedValue, actualValue);\n     }\n '"
True,Delta,-1,commons-lang,fd54d42f78ae17a96fc005d2fcd080807343aad7,00dc479f6a1d204d557f4cb1d981ba236fe09565,org.apache.commons.lang3.time.StopWatchTest.testStopWatchSimpleGet,False,[],,,,org.apache.commons.lang3.time.durationformatutils.formatdurationhms(long),"u'diff --git a/src/test/java/org/apache/commons/lang3/time/DurationFormatUtilsTest.java b/src/test/java/org/apache/commons/lang3/time/DurationFormatUtilsTest.java\nindex 21e11dc65..8f92d52c4 100644\n--- a/src/test/java/org/apache/commons/lang3/time/DurationFormatUtilsTest.java\n+++ b/src/test/java/org/apache/commons/lang3/time/DurationFormatUtilsTest.java\n@@ -165,31 +165,31 @@ public class DurationFormatUtilsTest {\n     @Test\n     public void testFormatDurationHMS() {\n         long time = 0;\n-        assertEquals(""0:00:00.000"", DurationFormatUtils.formatDurationHMS(time));\n+        assertEquals(""00:00:00.000"", DurationFormatUtils.formatDurationHMS(time));\n \n         time = 1;\n-        assertEquals(""0:00:00.001"", DurationFormatUtils.formatDurationHMS(time));\n+        assertEquals(""00:00:00.001"", DurationFormatUtils.formatDurationHMS(time));\n \n         time = 15;\n-        assertEquals(""0:00:00.015"", DurationFormatUtils.formatDurationHMS(time));\n+        assertEquals(""00:00:00.015"", DurationFormatUtils.formatDurationHMS(time));\n \n         time = 165;\n-        assertEquals(""0:00:00.165"", DurationFormatUtils.formatDurationHMS(time));\n+        assertEquals(""00:00:00.165"", DurationFormatUtils.formatDurationHMS(time));\n \n         time = 1675;\n-        assertEquals(""0:00:01.675"", DurationFormatUtils.formatDurationHMS(time));\n+        assertEquals(""00:00:01.675"", DurationFormatUtils.formatDurationHMS(time));\n \n         time = 13465;\n-        assertEquals(""0:00:13.465"", DurationFormatUtils.formatDurationHMS(time));\n+        assertEquals(""00:00:13.465"", DurationFormatUtils.formatDurationHMS(time));\n \n         time = 72789;\n-        assertEquals(""0:01:12.789"", DurationFormatUtils.formatDurationHMS(time));\n+        assertEquals(""00:01:12.789"", DurationFormatUtils.formatDurationHMS(time));\n \n         time = 12789 + 32 * 60000;\n-        assertEquals(""0:32:12.789"", DurationFormatUtils.formatDurationHMS(time));\n+        assertEquals(""00:32:12.789"", DurationFormatUtils.formatDurationHMS(time));\n \n         time = 12789 + 62 * 60000;\n-        assertEquals(""1:02:12.789"", DurationFormatUtils.formatDurationHMS(time));\n+        assertEquals(""01:02:12.789"", DurationFormatUtils.formatDurationHMS(time));\n     }\n \n     @Test(expected = IllegalArgumentException.class)\n@@ -367,13 +367,13 @@ public class DurationFormatUtilsTest {\n \n         // tests the ISO 8601-like\n         assertArrayEquals(new DurationFormatUtils.Token[]{\n-            new DurationFormatUtils.Token(DurationFormatUtils.H, 1),\n+            new DurationFormatUtils.Token(DurationFormatUtils.H, 2),\n             new DurationFormatUtils.Token(new StringBuilder("":""), 1),\n             new DurationFormatUtils.Token(DurationFormatUtils.m, 2),\n             new DurationFormatUtils.Token(new StringBuilder("":""), 1),\n             new DurationFormatUtils.Token(DurationFormatUtils.s, 2),\n             new DurationFormatUtils.Token(new StringBuilder("".""), 1),\n-            new DurationFormatUtils.Token(DurationFormatUtils.S, 3)}, DurationFormatUtils.lexx(""H:mm:ss.SSS""));\n+            new DurationFormatUtils.Token(DurationFormatUtils.S, 3)}, DurationFormatUtils.lexx(""HH:mm:ss.SSS""));\n \n         // test the iso extended format\n         assertArrayEquals(new DurationFormatUtils.Token[]{\ndiff --git a/src/test/java/org/apache/commons/lang3/time/StopWatchTest.java b/src/test/java/org/apache/commons/lang3/time/StopWatchTest.java\nindex f0404edfd..3e464cb66 100644\n--- a/src/test/java/org/apache/commons/lang3/time/StopWatchTest.java\n+++ b/src/test/java/org/apache/commons/lang3/time/StopWatchTest.java\n@@ -52,7 +52,7 @@ public class StopWatchTest  {\n     public void testStopWatchSimpleGet(){\n         final StopWatch watch = new StopWatch();\n         assertEquals(0, watch.getTime());\n-        assertEquals(""0:00:00.000"", watch.toString());\n+        assertEquals(""00:00:00.000"", watch.toString());\n         \n         watch.start();\n             try {Thread.sleep(500);} catch (final InterruptedException ex) {}\n@@ -74,7 +74,7 @@ public class StopWatchTest  {\n         final long totalTime = watch.getTime();\n \n         assertEquals(""Formatted split string not the correct length"", \n-                     splitStr.length(), 11);\n+                     splitStr.length(), 12);\n         assertTrue(splitTime >= 500);\n         assertTrue(splitTime < 700);\n         assertTrue(totalTime >= 1500);'"
True,Delta,-1,commons-lang,fd54d42f78ae17a96fc005d2fcd080807343aad7,00dc479f6a1d204d557f4cb1d981ba236fe09565,org.apache.commons.lang3.time.StopWatchTest.testStopWatchSplit,False,[],,,,org.apache.commons.lang3.time.durationformatutils.formatdurationhms(long),"u'diff --git a/src/test/java/org/apache/commons/lang3/time/DurationFormatUtilsTest.java b/src/test/java/org/apache/commons/lang3/time/DurationFormatUtilsTest.java\nindex 21e11dc65..8f92d52c4 100644\n--- a/src/test/java/org/apache/commons/lang3/time/DurationFormatUtilsTest.java\n+++ b/src/test/java/org/apache/commons/lang3/time/DurationFormatUtilsTest.java\n@@ -165,31 +165,31 @@ public class DurationFormatUtilsTest {\n     @Test\n     public void testFormatDurationHMS() {\n         long time = 0;\n-        assertEquals(""0:00:00.000"", DurationFormatUtils.formatDurationHMS(time));\n+        assertEquals(""00:00:00.000"", DurationFormatUtils.formatDurationHMS(time));\n \n         time = 1;\n-        assertEquals(""0:00:00.001"", DurationFormatUtils.formatDurationHMS(time));\n+        assertEquals(""00:00:00.001"", DurationFormatUtils.formatDurationHMS(time));\n \n         time = 15;\n-        assertEquals(""0:00:00.015"", DurationFormatUtils.formatDurationHMS(time));\n+        assertEquals(""00:00:00.015"", DurationFormatUtils.formatDurationHMS(time));\n \n         time = 165;\n-        assertEquals(""0:00:00.165"", DurationFormatUtils.formatDurationHMS(time));\n+        assertEquals(""00:00:00.165"", DurationFormatUtils.formatDurationHMS(time));\n \n         time = 1675;\n-        assertEquals(""0:00:01.675"", DurationFormatUtils.formatDurationHMS(time));\n+        assertEquals(""00:00:01.675"", DurationFormatUtils.formatDurationHMS(time));\n \n         time = 13465;\n-        assertEquals(""0:00:13.465"", DurationFormatUtils.formatDurationHMS(time));\n+        assertEquals(""00:00:13.465"", DurationFormatUtils.formatDurationHMS(time));\n \n         time = 72789;\n-        assertEquals(""0:01:12.789"", DurationFormatUtils.formatDurationHMS(time));\n+        assertEquals(""00:01:12.789"", DurationFormatUtils.formatDurationHMS(time));\n \n         time = 12789 + 32 * 60000;\n-        assertEquals(""0:32:12.789"", DurationFormatUtils.formatDurationHMS(time));\n+        assertEquals(""00:32:12.789"", DurationFormatUtils.formatDurationHMS(time));\n \n         time = 12789 + 62 * 60000;\n-        assertEquals(""1:02:12.789"", DurationFormatUtils.formatDurationHMS(time));\n+        assertEquals(""01:02:12.789"", DurationFormatUtils.formatDurationHMS(time));\n     }\n \n     @Test(expected = IllegalArgumentException.class)\n@@ -367,13 +367,13 @@ public class DurationFormatUtilsTest {\n \n         // tests the ISO 8601-like\n         assertArrayEquals(new DurationFormatUtils.Token[]{\n-            new DurationFormatUtils.Token(DurationFormatUtils.H, 1),\n+            new DurationFormatUtils.Token(DurationFormatUtils.H, 2),\n             new DurationFormatUtils.Token(new StringBuilder("":""), 1),\n             new DurationFormatUtils.Token(DurationFormatUtils.m, 2),\n             new DurationFormatUtils.Token(new StringBuilder("":""), 1),\n             new DurationFormatUtils.Token(DurationFormatUtils.s, 2),\n             new DurationFormatUtils.Token(new StringBuilder("".""), 1),\n-            new DurationFormatUtils.Token(DurationFormatUtils.S, 3)}, DurationFormatUtils.lexx(""H:mm:ss.SSS""));\n+            new DurationFormatUtils.Token(DurationFormatUtils.S, 3)}, DurationFormatUtils.lexx(""HH:mm:ss.SSS""));\n \n         // test the iso extended format\n         assertArrayEquals(new DurationFormatUtils.Token[]{\ndiff --git a/src/test/java/org/apache/commons/lang3/time/StopWatchTest.java b/src/test/java/org/apache/commons/lang3/time/StopWatchTest.java\nindex f0404edfd..3e464cb66 100644\n--- a/src/test/java/org/apache/commons/lang3/time/StopWatchTest.java\n+++ b/src/test/java/org/apache/commons/lang3/time/StopWatchTest.java\n@@ -52,7 +52,7 @@ public class StopWatchTest  {\n     public void testStopWatchSimpleGet(){\n         final StopWatch watch = new StopWatch();\n         assertEquals(0, watch.getTime());\n-        assertEquals(""0:00:00.000"", watch.toString());\n+        assertEquals(""00:00:00.000"", watch.toString());\n         \n         watch.start();\n             try {Thread.sleep(500);} catch (final InterruptedException ex) {}\n@@ -74,7 +74,7 @@ public class StopWatchTest  {\n         final long totalTime = watch.getTime();\n \n         assertEquals(""Formatted split string not the correct length"", \n-                     splitStr.length(), 11);\n+                     splitStr.length(), 12);\n         assertTrue(splitTime >= 500);\n         assertTrue(splitTime < 700);\n         assertTrue(totalTime >= 1500);'"
True,Delta,-1,commons-lang,fd54d42f78ae17a96fc005d2fcd080807343aad7,00dc479f6a1d204d557f4cb1d981ba236fe09565,org.apache.commons.lang3.time.DurationFormatUtilsTest.testFormatDurationHMS,False,[],,,,org.apache.commons.lang3.time.durationformatutils.formatdurationhms(long),"u'diff --git a/src/test/java/org/apache/commons/lang3/time/DurationFormatUtilsTest.java b/src/test/java/org/apache/commons/lang3/time/DurationFormatUtilsTest.java\nindex 21e11dc65..8f92d52c4 100644\n--- a/src/test/java/org/apache/commons/lang3/time/DurationFormatUtilsTest.java\n+++ b/src/test/java/org/apache/commons/lang3/time/DurationFormatUtilsTest.java\n@@ -165,31 +165,31 @@ public class DurationFormatUtilsTest {\n     @Test\n     public void testFormatDurationHMS() {\n         long time = 0;\n-        assertEquals(""0:00:00.000"", DurationFormatUtils.formatDurationHMS(time));\n+        assertEquals(""00:00:00.000"", DurationFormatUtils.formatDurationHMS(time));\n \n         time = 1;\n-        assertEquals(""0:00:00.001"", DurationFormatUtils.formatDurationHMS(time));\n+        assertEquals(""00:00:00.001"", DurationFormatUtils.formatDurationHMS(time));\n \n         time = 15;\n-        assertEquals(""0:00:00.015"", DurationFormatUtils.formatDurationHMS(time));\n+        assertEquals(""00:00:00.015"", DurationFormatUtils.formatDurationHMS(time));\n \n         time = 165;\n-        assertEquals(""0:00:00.165"", DurationFormatUtils.formatDurationHMS(time));\n+        assertEquals(""00:00:00.165"", DurationFormatUtils.formatDurationHMS(time));\n \n         time = 1675;\n-        assertEquals(""0:00:01.675"", DurationFormatUtils.formatDurationHMS(time));\n+        assertEquals(""00:00:01.675"", DurationFormatUtils.formatDurationHMS(time));\n \n         time = 13465;\n-        assertEquals(""0:00:13.465"", DurationFormatUtils.formatDurationHMS(time));\n+        assertEquals(""00:00:13.465"", DurationFormatUtils.formatDurationHMS(time));\n \n         time = 72789;\n-        assertEquals(""0:01:12.789"", DurationFormatUtils.formatDurationHMS(time));\n+        assertEquals(""00:01:12.789"", DurationFormatUtils.formatDurationHMS(time));\n \n         time = 12789 + 32 * 60000;\n-        assertEquals(""0:32:12.789"", DurationFormatUtils.formatDurationHMS(time));\n+        assertEquals(""00:32:12.789"", DurationFormatUtils.formatDurationHMS(time));\n \n         time = 12789 + 62 * 60000;\n-        assertEquals(""1:02:12.789"", DurationFormatUtils.formatDurationHMS(time));\n+        assertEquals(""01:02:12.789"", DurationFormatUtils.formatDurationHMS(time));\n     }\n \n     @Test(expected = IllegalArgumentException.class)\n@@ -367,13 +367,13 @@ public class DurationFormatUtilsTest {\n \n         // tests the ISO 8601-like\n         assertArrayEquals(new DurationFormatUtils.Token[]{\n-            new DurationFormatUtils.Token(DurationFormatUtils.H, 1),\n+            new DurationFormatUtils.Token(DurationFormatUtils.H, 2),\n             new DurationFormatUtils.Token(new StringBuilder("":""), 1),\n             new DurationFormatUtils.Token(DurationFormatUtils.m, 2),\n             new DurationFormatUtils.Token(new StringBuilder("":""), 1),\n             new DurationFormatUtils.Token(DurationFormatUtils.s, 2),\n             new DurationFormatUtils.Token(new StringBuilder("".""), 1),\n-            new DurationFormatUtils.Token(DurationFormatUtils.S, 3)}, DurationFormatUtils.lexx(""H:mm:ss.SSS""));\n+            new DurationFormatUtils.Token(DurationFormatUtils.S, 3)}, DurationFormatUtils.lexx(""HH:mm:ss.SSS""));\n \n         // test the iso extended format\n         assertArrayEquals(new DurationFormatUtils.Token[]{\ndiff --git a/src/test/java/org/apache/commons/lang3/time/StopWatchTest.java b/src/test/java/org/apache/commons/lang3/time/StopWatchTest.java\nindex f0404edfd..3e464cb66 100644\n--- a/src/test/java/org/apache/commons/lang3/time/StopWatchTest.java\n+++ b/src/test/java/org/apache/commons/lang3/time/StopWatchTest.java\n@@ -52,7 +52,7 @@ public class StopWatchTest  {\n     public void testStopWatchSimpleGet(){\n         final StopWatch watch = new StopWatch();\n         assertEquals(0, watch.getTime());\n-        assertEquals(""0:00:00.000"", watch.toString());\n+        assertEquals(""00:00:00.000"", watch.toString());\n         \n         watch.start();\n             try {Thread.sleep(500);} catch (final InterruptedException ex) {}\n@@ -74,7 +74,7 @@ public class StopWatchTest  {\n         final long totalTime = watch.getTime();\n \n         assertEquals(""Formatted split string not the correct length"", \n-                     splitStr.length(), 11);\n+                     splitStr.length(), 12);\n         assertTrue(splitTime >= 500);\n         assertTrue(splitTime < 700);\n         assertTrue(totalTime >= 1500);'"
True,Regression,-1,commons-lang,64ef8a80224443c81dfb198cbc567e1b2b9356a2,358f139d1316df2b8efd7610afa3aa68d165334f,org.apache.commons.lang3.time.DurationFormatUtilsTest.testFormatNegativeDurationWords,False,[],,,,"org.apache.commons.lang3.time.durationformatutils.formatduration(long,string,boolean)@org.apache.commons.lang3.time.durationformatutils.formatperiod(long,long,string,boolean,timezone)","u'diff --git a/src/test/java/org/apache/commons/lang3/time/DurationFormatUtilsTest.java b/src/test/java/org/apache/commons/lang3/time/DurationFormatUtilsTest.java\nindex ec6603fdd..21e11dc65 100644\n--- a/src/test/java/org/apache/commons/lang3/time/DurationFormatUtilsTest.java\n+++ b/src/test/java/org/apache/commons/lang3/time/DurationFormatUtilsTest.java\n@@ -157,6 +157,11 @@ public class DurationFormatUtilsTest {\n         assertEquals(""1 day 1 hour 1 minute 1 second"", text);\n     }\n \n+    @Test(expected = IllegalArgumentException.class)\n+    public void testFormatNegativeDurationWords() throws Exception {\n+        DurationFormatUtils.formatDurationWords(-5000, true, true);\n+    }\n+\n     @Test\n     public void testFormatDurationHMS() {\n         long time = 0;\n@@ -187,6 +192,11 @@ public class DurationFormatUtilsTest {\n         assertEquals(""1:02:12.789"", DurationFormatUtils.formatDurationHMS(time));\n     }\n \n+    @Test(expected = IllegalArgumentException.class)\n+    public void testFormatNegativeDurationHMS() throws Exception {\n+        DurationFormatUtils.formatDurationHMS(-5000);\n+    }\n+\n     @Test\n     public void testFormatDurationISO() {\n         assertEquals(""P0Y0M0DT0H0M0.000S"", DurationFormatUtils.formatDurationISO(0L));\n@@ -196,6 +206,11 @@ public class DurationFormatUtilsTest {\n         assertEquals(""P0Y0M0DT0H1M15.321S"", DurationFormatUtils.formatDurationISO(75321L));\n     }\n \n+    @Test(expected = IllegalArgumentException.class)\n+    public void testFormatNegativeDurationISO() throws Exception {\n+        DurationFormatUtils.formatDurationISO(-5000);\n+    }\n+\n     @Test\n     public void testFormatDuration() {\n         long duration = 0;\n@@ -234,6 +249,11 @@ public class DurationFormatUtilsTest {\n         assertEquals(""0 0 "" + days, DurationFormatUtils.formatDuration(duration, ""y M d""));\n     }\n \n+    @Test(expected = IllegalArgumentException.class)\n+    public void testFormatNegativeDuration() throws Exception {\n+        DurationFormatUtils.formatDuration(-5000, ""S"", true);\n+    }\n+\n     @Test\n     public void testFormatPeriodISO() {\n         final TimeZone timeZone = TimeZone.getTimeZone(""GMT-3"");\n@@ -262,6 +282,11 @@ public class DurationFormatUtilsTest {\n         // assertEquals(""P1Y2M3DT10H30M"", text);\n     }\n \n+    @Test(expected = IllegalArgumentException.class)\n+    public void testFormatPeriodISOStartGreaterEnd() throws Exception {\n+        DurationFormatUtils.formatPeriodISO(5000, 2000);\n+    }\n+\n     @Test\n     public void testFormatPeriodISOMethod() {\n         assertEquals(""P0Y0M0DT0H0M0.000S"", DurationFormatUtils.formatPeriodISO(0L, 0L));\n@@ -323,6 +348,11 @@ public class DurationFormatUtilsTest {\n         assertEquals(""048"", DurationFormatUtils.formatPeriod(time1970, time, ""MMM""));\n     }\n \n+    @Test(expected = IllegalArgumentException.class)\n+    public void testFormatPeriodeStartGreaterEnd() throws Exception {\n+        DurationFormatUtils.formatPeriod(5000, 2500, ""yy/MM"");\n+    }\n+\n     @Test\n     public void testLexx() {\n         // tests each constant'"
True,Regression,-1,commons-lang,64ef8a80224443c81dfb198cbc567e1b2b9356a2,358f139d1316df2b8efd7610afa3aa68d165334f,org.apache.commons.lang3.time.DurationFormatUtilsTest.testFormatNegativeDurationISO,False,[],,,,"org.apache.commons.lang3.time.durationformatutils.formatduration(long,string,boolean)@org.apache.commons.lang3.time.durationformatutils.formatperiod(long,long,string,boolean,timezone)","u'diff --git a/src/test/java/org/apache/commons/lang3/time/DurationFormatUtilsTest.java b/src/test/java/org/apache/commons/lang3/time/DurationFormatUtilsTest.java\nindex ec6603fdd..21e11dc65 100644\n--- a/src/test/java/org/apache/commons/lang3/time/DurationFormatUtilsTest.java\n+++ b/src/test/java/org/apache/commons/lang3/time/DurationFormatUtilsTest.java\n@@ -157,6 +157,11 @@ public class DurationFormatUtilsTest {\n         assertEquals(""1 day 1 hour 1 minute 1 second"", text);\n     }\n \n+    @Test(expected = IllegalArgumentException.class)\n+    public void testFormatNegativeDurationWords() throws Exception {\n+        DurationFormatUtils.formatDurationWords(-5000, true, true);\n+    }\n+\n     @Test\n     public void testFormatDurationHMS() {\n         long time = 0;\n@@ -187,6 +192,11 @@ public class DurationFormatUtilsTest {\n         assertEquals(""1:02:12.789"", DurationFormatUtils.formatDurationHMS(time));\n     }\n \n+    @Test(expected = IllegalArgumentException.class)\n+    public void testFormatNegativeDurationHMS() throws Exception {\n+        DurationFormatUtils.formatDurationHMS(-5000);\n+    }\n+\n     @Test\n     public void testFormatDurationISO() {\n         assertEquals(""P0Y0M0DT0H0M0.000S"", DurationFormatUtils.formatDurationISO(0L));\n@@ -196,6 +206,11 @@ public class DurationFormatUtilsTest {\n         assertEquals(""P0Y0M0DT0H1M15.321S"", DurationFormatUtils.formatDurationISO(75321L));\n     }\n \n+    @Test(expected = IllegalArgumentException.class)\n+    public void testFormatNegativeDurationISO() throws Exception {\n+        DurationFormatUtils.formatDurationISO(-5000);\n+    }\n+\n     @Test\n     public void testFormatDuration() {\n         long duration = 0;\n@@ -234,6 +249,11 @@ public class DurationFormatUtilsTest {\n         assertEquals(""0 0 "" + days, DurationFormatUtils.formatDuration(duration, ""y M d""));\n     }\n \n+    @Test(expected = IllegalArgumentException.class)\n+    public void testFormatNegativeDuration() throws Exception {\n+        DurationFormatUtils.formatDuration(-5000, ""S"", true);\n+    }\n+\n     @Test\n     public void testFormatPeriodISO() {\n         final TimeZone timeZone = TimeZone.getTimeZone(""GMT-3"");\n@@ -262,6 +282,11 @@ public class DurationFormatUtilsTest {\n         // assertEquals(""P1Y2M3DT10H30M"", text);\n     }\n \n+    @Test(expected = IllegalArgumentException.class)\n+    public void testFormatPeriodISOStartGreaterEnd() throws Exception {\n+        DurationFormatUtils.formatPeriodISO(5000, 2000);\n+    }\n+\n     @Test\n     public void testFormatPeriodISOMethod() {\n         assertEquals(""P0Y0M0DT0H0M0.000S"", DurationFormatUtils.formatPeriodISO(0L, 0L));\n@@ -323,6 +348,11 @@ public class DurationFormatUtilsTest {\n         assertEquals(""048"", DurationFormatUtils.formatPeriod(time1970, time, ""MMM""));\n     }\n \n+    @Test(expected = IllegalArgumentException.class)\n+    public void testFormatPeriodeStartGreaterEnd() throws Exception {\n+        DurationFormatUtils.formatPeriod(5000, 2500, ""yy/MM"");\n+    }\n+\n     @Test\n     public void testLexx() {\n         // tests each constant'"
True,Regression,-1,commons-lang,64ef8a80224443c81dfb198cbc567e1b2b9356a2,358f139d1316df2b8efd7610afa3aa68d165334f,org.apache.commons.lang3.time.DurationFormatUtilsTest.testFormatPeriodISOStartGreaterEnd,False,[],,,,"org.apache.commons.lang3.time.durationformatutils.formatduration(long,string,boolean)@org.apache.commons.lang3.time.durationformatutils.formatperiod(long,long,string,boolean,timezone)","u'diff --git a/src/test/java/org/apache/commons/lang3/time/DurationFormatUtilsTest.java b/src/test/java/org/apache/commons/lang3/time/DurationFormatUtilsTest.java\nindex ec6603fdd..21e11dc65 100644\n--- a/src/test/java/org/apache/commons/lang3/time/DurationFormatUtilsTest.java\n+++ b/src/test/java/org/apache/commons/lang3/time/DurationFormatUtilsTest.java\n@@ -157,6 +157,11 @@ public class DurationFormatUtilsTest {\n         assertEquals(""1 day 1 hour 1 minute 1 second"", text);\n     }\n \n+    @Test(expected = IllegalArgumentException.class)\n+    public void testFormatNegativeDurationWords() throws Exception {\n+        DurationFormatUtils.formatDurationWords(-5000, true, true);\n+    }\n+\n     @Test\n     public void testFormatDurationHMS() {\n         long time = 0;\n@@ -187,6 +192,11 @@ public class DurationFormatUtilsTest {\n         assertEquals(""1:02:12.789"", DurationFormatUtils.formatDurationHMS(time));\n     }\n \n+    @Test(expected = IllegalArgumentException.class)\n+    public void testFormatNegativeDurationHMS() throws Exception {\n+        DurationFormatUtils.formatDurationHMS(-5000);\n+    }\n+\n     @Test\n     public void testFormatDurationISO() {\n         assertEquals(""P0Y0M0DT0H0M0.000S"", DurationFormatUtils.formatDurationISO(0L));\n@@ -196,6 +206,11 @@ public class DurationFormatUtilsTest {\n         assertEquals(""P0Y0M0DT0H1M15.321S"", DurationFormatUtils.formatDurationISO(75321L));\n     }\n \n+    @Test(expected = IllegalArgumentException.class)\n+    public void testFormatNegativeDurationISO() throws Exception {\n+        DurationFormatUtils.formatDurationISO(-5000);\n+    }\n+\n     @Test\n     public void testFormatDuration() {\n         long duration = 0;\n@@ -234,6 +249,11 @@ public class DurationFormatUtilsTest {\n         assertEquals(""0 0 "" + days, DurationFormatUtils.formatDuration(duration, ""y M d""));\n     }\n \n+    @Test(expected = IllegalArgumentException.class)\n+    public void testFormatNegativeDuration() throws Exception {\n+        DurationFormatUtils.formatDuration(-5000, ""S"", true);\n+    }\n+\n     @Test\n     public void testFormatPeriodISO() {\n         final TimeZone timeZone = TimeZone.getTimeZone(""GMT-3"");\n@@ -262,6 +282,11 @@ public class DurationFormatUtilsTest {\n         // assertEquals(""P1Y2M3DT10H30M"", text);\n     }\n \n+    @Test(expected = IllegalArgumentException.class)\n+    public void testFormatPeriodISOStartGreaterEnd() throws Exception {\n+        DurationFormatUtils.formatPeriodISO(5000, 2000);\n+    }\n+\n     @Test\n     public void testFormatPeriodISOMethod() {\n         assertEquals(""P0Y0M0DT0H0M0.000S"", DurationFormatUtils.formatPeriodISO(0L, 0L));\n@@ -323,6 +348,11 @@ public class DurationFormatUtilsTest {\n         assertEquals(""048"", DurationFormatUtils.formatPeriod(time1970, time, ""MMM""));\n     }\n \n+    @Test(expected = IllegalArgumentException.class)\n+    public void testFormatPeriodeStartGreaterEnd() throws Exception {\n+        DurationFormatUtils.formatPeriod(5000, 2500, ""yy/MM"");\n+    }\n+\n     @Test\n     public void testLexx() {\n         // tests each constant'"
True,Regression,-1,commons-lang,64ef8a80224443c81dfb198cbc567e1b2b9356a2,358f139d1316df2b8efd7610afa3aa68d165334f,org.apache.commons.lang3.time.DurationFormatUtilsTest.testFormatPeriodeStartGreaterEnd,False,[],,,,"org.apache.commons.lang3.time.durationformatutils.formatduration(long,string,boolean)@org.apache.commons.lang3.time.durationformatutils.formatperiod(long,long,string,boolean,timezone)","u'diff --git a/src/test/java/org/apache/commons/lang3/time/DurationFormatUtilsTest.java b/src/test/java/org/apache/commons/lang3/time/DurationFormatUtilsTest.java\nindex ec6603fdd..21e11dc65 100644\n--- a/src/test/java/org/apache/commons/lang3/time/DurationFormatUtilsTest.java\n+++ b/src/test/java/org/apache/commons/lang3/time/DurationFormatUtilsTest.java\n@@ -157,6 +157,11 @@ public class DurationFormatUtilsTest {\n         assertEquals(""1 day 1 hour 1 minute 1 second"", text);\n     }\n \n+    @Test(expected = IllegalArgumentException.class)\n+    public void testFormatNegativeDurationWords() throws Exception {\n+        DurationFormatUtils.formatDurationWords(-5000, true, true);\n+    }\n+\n     @Test\n     public void testFormatDurationHMS() {\n         long time = 0;\n@@ -187,6 +192,11 @@ public class DurationFormatUtilsTest {\n         assertEquals(""1:02:12.789"", DurationFormatUtils.formatDurationHMS(time));\n     }\n \n+    @Test(expected = IllegalArgumentException.class)\n+    public void testFormatNegativeDurationHMS() throws Exception {\n+        DurationFormatUtils.formatDurationHMS(-5000);\n+    }\n+\n     @Test\n     public void testFormatDurationISO() {\n         assertEquals(""P0Y0M0DT0H0M0.000S"", DurationFormatUtils.formatDurationISO(0L));\n@@ -196,6 +206,11 @@ public class DurationFormatUtilsTest {\n         assertEquals(""P0Y0M0DT0H1M15.321S"", DurationFormatUtils.formatDurationISO(75321L));\n     }\n \n+    @Test(expected = IllegalArgumentException.class)\n+    public void testFormatNegativeDurationISO() throws Exception {\n+        DurationFormatUtils.formatDurationISO(-5000);\n+    }\n+\n     @Test\n     public void testFormatDuration() {\n         long duration = 0;\n@@ -234,6 +249,11 @@ public class DurationFormatUtilsTest {\n         assertEquals(""0 0 "" + days, DurationFormatUtils.formatDuration(duration, ""y M d""));\n     }\n \n+    @Test(expected = IllegalArgumentException.class)\n+    public void testFormatNegativeDuration() throws Exception {\n+        DurationFormatUtils.formatDuration(-5000, ""S"", true);\n+    }\n+\n     @Test\n     public void testFormatPeriodISO() {\n         final TimeZone timeZone = TimeZone.getTimeZone(""GMT-3"");\n@@ -262,6 +282,11 @@ public class DurationFormatUtilsTest {\n         // assertEquals(""P1Y2M3DT10H30M"", text);\n     }\n \n+    @Test(expected = IllegalArgumentException.class)\n+    public void testFormatPeriodISOStartGreaterEnd() throws Exception {\n+        DurationFormatUtils.formatPeriodISO(5000, 2000);\n+    }\n+\n     @Test\n     public void testFormatPeriodISOMethod() {\n         assertEquals(""P0Y0M0DT0H0M0.000S"", DurationFormatUtils.formatPeriodISO(0L, 0L));\n@@ -323,6 +348,11 @@ public class DurationFormatUtilsTest {\n         assertEquals(""048"", DurationFormatUtils.formatPeriod(time1970, time, ""MMM""));\n     }\n \n+    @Test(expected = IllegalArgumentException.class)\n+    public void testFormatPeriodeStartGreaterEnd() throws Exception {\n+        DurationFormatUtils.formatPeriod(5000, 2500, ""yy/MM"");\n+    }\n+\n     @Test\n     public void testLexx() {\n         // tests each constant'"
True,Regression,-1,commons-lang,64ef8a80224443c81dfb198cbc567e1b2b9356a2,358f139d1316df2b8efd7610afa3aa68d165334f,org.apache.commons.lang3.time.DurationFormatUtilsTest.testFormatNegativeDuration,False,[],,,,"org.apache.commons.lang3.time.durationformatutils.formatduration(long,string,boolean)@org.apache.commons.lang3.time.durationformatutils.formatperiod(long,long,string,boolean,timezone)","u'diff --git a/src/test/java/org/apache/commons/lang3/time/DurationFormatUtilsTest.java b/src/test/java/org/apache/commons/lang3/time/DurationFormatUtilsTest.java\nindex ec6603fdd..21e11dc65 100644\n--- a/src/test/java/org/apache/commons/lang3/time/DurationFormatUtilsTest.java\n+++ b/src/test/java/org/apache/commons/lang3/time/DurationFormatUtilsTest.java\n@@ -157,6 +157,11 @@ public class DurationFormatUtilsTest {\n         assertEquals(""1 day 1 hour 1 minute 1 second"", text);\n     }\n \n+    @Test(expected = IllegalArgumentException.class)\n+    public void testFormatNegativeDurationWords() throws Exception {\n+        DurationFormatUtils.formatDurationWords(-5000, true, true);\n+    }\n+\n     @Test\n     public void testFormatDurationHMS() {\n         long time = 0;\n@@ -187,6 +192,11 @@ public class DurationFormatUtilsTest {\n         assertEquals(""1:02:12.789"", DurationFormatUtils.formatDurationHMS(time));\n     }\n \n+    @Test(expected = IllegalArgumentException.class)\n+    public void testFormatNegativeDurationHMS() throws Exception {\n+        DurationFormatUtils.formatDurationHMS(-5000);\n+    }\n+\n     @Test\n     public void testFormatDurationISO() {\n         assertEquals(""P0Y0M0DT0H0M0.000S"", DurationFormatUtils.formatDurationISO(0L));\n@@ -196,6 +206,11 @@ public class DurationFormatUtilsTest {\n         assertEquals(""P0Y0M0DT0H1M15.321S"", DurationFormatUtils.formatDurationISO(75321L));\n     }\n \n+    @Test(expected = IllegalArgumentException.class)\n+    public void testFormatNegativeDurationISO() throws Exception {\n+        DurationFormatUtils.formatDurationISO(-5000);\n+    }\n+\n     @Test\n     public void testFormatDuration() {\n         long duration = 0;\n@@ -234,6 +249,11 @@ public class DurationFormatUtilsTest {\n         assertEquals(""0 0 "" + days, DurationFormatUtils.formatDuration(duration, ""y M d""));\n     }\n \n+    @Test(expected = IllegalArgumentException.class)\n+    public void testFormatNegativeDuration() throws Exception {\n+        DurationFormatUtils.formatDuration(-5000, ""S"", true);\n+    }\n+\n     @Test\n     public void testFormatPeriodISO() {\n         final TimeZone timeZone = TimeZone.getTimeZone(""GMT-3"");\n@@ -262,6 +282,11 @@ public class DurationFormatUtilsTest {\n         // assertEquals(""P1Y2M3DT10H30M"", text);\n     }\n \n+    @Test(expected = IllegalArgumentException.class)\n+    public void testFormatPeriodISOStartGreaterEnd() throws Exception {\n+        DurationFormatUtils.formatPeriodISO(5000, 2000);\n+    }\n+\n     @Test\n     public void testFormatPeriodISOMethod() {\n         assertEquals(""P0Y0M0DT0H0M0.000S"", DurationFormatUtils.formatPeriodISO(0L, 0L));\n@@ -323,6 +348,11 @@ public class DurationFormatUtilsTest {\n         assertEquals(""048"", DurationFormatUtils.formatPeriod(time1970, time, ""MMM""));\n     }\n \n+    @Test(expected = IllegalArgumentException.class)\n+    public void testFormatPeriodeStartGreaterEnd() throws Exception {\n+        DurationFormatUtils.formatPeriod(5000, 2500, ""yy/MM"");\n+    }\n+\n     @Test\n     public void testLexx() {\n         // tests each constant'"
True,Regression,-1,commons-lang,64ef8a80224443c81dfb198cbc567e1b2b9356a2,358f139d1316df2b8efd7610afa3aa68d165334f,org.apache.commons.lang3.time.DurationFormatUtilsTest.testFormatNegativeDurationHMS,False,[],,,,"org.apache.commons.lang3.time.durationformatutils.formatduration(long,string,boolean)@org.apache.commons.lang3.time.durationformatutils.formatperiod(long,long,string,boolean,timezone)","u'diff --git a/src/test/java/org/apache/commons/lang3/time/DurationFormatUtilsTest.java b/src/test/java/org/apache/commons/lang3/time/DurationFormatUtilsTest.java\nindex ec6603fdd..21e11dc65 100644\n--- a/src/test/java/org/apache/commons/lang3/time/DurationFormatUtilsTest.java\n+++ b/src/test/java/org/apache/commons/lang3/time/DurationFormatUtilsTest.java\n@@ -157,6 +157,11 @@ public class DurationFormatUtilsTest {\n         assertEquals(""1 day 1 hour 1 minute 1 second"", text);\n     }\n \n+    @Test(expected = IllegalArgumentException.class)\n+    public void testFormatNegativeDurationWords() throws Exception {\n+        DurationFormatUtils.formatDurationWords(-5000, true, true);\n+    }\n+\n     @Test\n     public void testFormatDurationHMS() {\n         long time = 0;\n@@ -187,6 +192,11 @@ public class DurationFormatUtilsTest {\n         assertEquals(""1:02:12.789"", DurationFormatUtils.formatDurationHMS(time));\n     }\n \n+    @Test(expected = IllegalArgumentException.class)\n+    public void testFormatNegativeDurationHMS() throws Exception {\n+        DurationFormatUtils.formatDurationHMS(-5000);\n+    }\n+\n     @Test\n     public void testFormatDurationISO() {\n         assertEquals(""P0Y0M0DT0H0M0.000S"", DurationFormatUtils.formatDurationISO(0L));\n@@ -196,6 +206,11 @@ public class DurationFormatUtilsTest {\n         assertEquals(""P0Y0M0DT0H1M15.321S"", DurationFormatUtils.formatDurationISO(75321L));\n     }\n \n+    @Test(expected = IllegalArgumentException.class)\n+    public void testFormatNegativeDurationISO() throws Exception {\n+        DurationFormatUtils.formatDurationISO(-5000);\n+    }\n+\n     @Test\n     public void testFormatDuration() {\n         long duration = 0;\n@@ -234,6 +249,11 @@ public class DurationFormatUtilsTest {\n         assertEquals(""0 0 "" + days, DurationFormatUtils.formatDuration(duration, ""y M d""));\n     }\n \n+    @Test(expected = IllegalArgumentException.class)\n+    public void testFormatNegativeDuration() throws Exception {\n+        DurationFormatUtils.formatDuration(-5000, ""S"", true);\n+    }\n+\n     @Test\n     public void testFormatPeriodISO() {\n         final TimeZone timeZone = TimeZone.getTimeZone(""GMT-3"");\n@@ -262,6 +282,11 @@ public class DurationFormatUtilsTest {\n         // assertEquals(""P1Y2M3DT10H30M"", text);\n     }\n \n+    @Test(expected = IllegalArgumentException.class)\n+    public void testFormatPeriodISOStartGreaterEnd() throws Exception {\n+        DurationFormatUtils.formatPeriodISO(5000, 2000);\n+    }\n+\n     @Test\n     public void testFormatPeriodISOMethod() {\n         assertEquals(""P0Y0M0DT0H0M0.000S"", DurationFormatUtils.formatPeriodISO(0L, 0L));\n@@ -323,6 +348,11 @@ public class DurationFormatUtilsTest {\n         assertEquals(""048"", DurationFormatUtils.formatPeriod(time1970, time, ""MMM""));\n     }\n \n+    @Test(expected = IllegalArgumentException.class)\n+    public void testFormatPeriodeStartGreaterEnd() throws Exception {\n+        DurationFormatUtils.formatPeriod(5000, 2500, ""yy/MM"");\n+    }\n+\n     @Test\n     public void testLexx() {\n         // tests each constant'"
True,Regression,-1,commons-lang,54e63005446a2b0a4255ba16838122c5808ef886,0343b4fda87161265acf30d5ee61e525e751358d,org.apache.commons.lang3.text.StrLookupTest.testSystemPropertiesLookupUpdatedProperty,False,[],,,,org.apache.commons.lang3.text.strlookup.copyproperties(properties)@org.apache.commons.lang3.text.strlookup.systempropertieslookup(),"u'diff --git a/src/test/java/org/apache/commons/lang3/text/StrLookupTest.java b/src/test/java/org/apache/commons/lang3/text/StrLookupTest.java\nindex 121dbff22..9190185bd 100644\n--- a/src/test/java/org/apache/commons/lang3/text/StrLookupTest.java\n+++ b/src/test/java/org/apache/commons/lang3/text/StrLookupTest.java\n@@ -5,9 +5,9 @@\n  * The ASF licenses this file to You under the Apache License, Version 2.0\n  * (the ""License""); you may not use this file except in compliance with\n  * the License.  You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an ""AS IS"" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n@@ -22,6 +22,7 @@ import static org.junit.Assert.fail;\n \n import java.util.HashMap;\n import java.util.Map;\n+import java.util.Properties;\n \n import org.junit.Test;\n \n@@ -51,20 +52,45 @@ public class StrLookupTest  {\n         }\n     }\n \n+    /**\n+     * Tests that a lookup object for system properties can deal with a full\n+     * replacement of the system properties object. This test is related to\n+     * LANG-1055.\n+     */\n     @Test\n-    public void testSystemPropertiesLookupNotSingleton() {\n+    public void testSystemPropertiesLookupReplacedProperties() {\n+        Properties oldProperties = System.getProperties();\n         final String osName = ""os.name"";\n-        final String originalOsName = System.getProperty(osName);\n+        final String newOsName = oldProperties.getProperty(osName) + ""_changed"";\n \n-        StrLookup<String> properties1 = StrLookup.systemPropertiesLookup();\n-        assertEquals(originalOsName, properties1.lookup(osName));\n+        StrLookup<String> sysLookup = StrLookup.systemPropertiesLookup();\n+        Properties newProps = new Properties();\n+        newProps.setProperty(osName, newOsName);\n+        System.setProperties(newProps);\n+        try {\n+            assertEquals(""Changed properties not detected"", newOsName, sysLookup.lookup(osName));\n+        } finally {\n+            System.setProperties(oldProperties);\n+        }\n+    }\n \n-        final String differentOsName = ""HAL-9000"";\n-        System.setProperty(osName, differentOsName);\n-        StrLookup<String> properties2 = StrLookup.systemPropertiesLookup();\n+    /**\n+     * Tests that a lookup object for system properties sees changes on system\n+     * properties. This test is related to LANG-1141.\n+     */\n+    @Test\n+    public void testSystemPropertiesLookupUpdatedProperty() {\n+        final String osName = ""os.name"";\n+        String oldOs = System.getProperty(osName);\n+        final String newOsName = oldOs + ""_changed"";\n \n-        assertEquals(originalOsName, properties1.lookup(osName));\n-        assertEquals(differentOsName, properties2.lookup(osName));\n+        StrLookup<String> sysLookup = StrLookup.systemPropertiesLookup();\n+        System.setProperty(osName, newOsName);\n+        try {\n+            assertEquals(""Changed properties not detected"", newOsName, sysLookup.lookup(osName));\n+        } finally {\n+            System.setProperty(osName, oldOs);\n+        }\n     }\n \n     @Test'"
True,Regression,-1,commons-lang,54e63005446a2b0a4255ba16838122c5808ef886,0343b4fda87161265acf30d5ee61e525e751358d,org.apache.commons.lang3.text.StrLookupTest.testSystemPropertiesLookupReplacedProperties,False,[],,,,org.apache.commons.lang3.text.strlookup.copyproperties(properties)@org.apache.commons.lang3.text.strlookup.systempropertieslookup(),"u'diff --git a/src/test/java/org/apache/commons/lang3/text/StrLookupTest.java b/src/test/java/org/apache/commons/lang3/text/StrLookupTest.java\nindex 121dbff22..9190185bd 100644\n--- a/src/test/java/org/apache/commons/lang3/text/StrLookupTest.java\n+++ b/src/test/java/org/apache/commons/lang3/text/StrLookupTest.java\n@@ -5,9 +5,9 @@\n  * The ASF licenses this file to You under the Apache License, Version 2.0\n  * (the ""License""); you may not use this file except in compliance with\n  * the License.  You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an ""AS IS"" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n@@ -22,6 +22,7 @@ import static org.junit.Assert.fail;\n \n import java.util.HashMap;\n import java.util.Map;\n+import java.util.Properties;\n \n import org.junit.Test;\n \n@@ -51,20 +52,45 @@ public class StrLookupTest  {\n         }\n     }\n \n+    /**\n+     * Tests that a lookup object for system properties can deal with a full\n+     * replacement of the system properties object. This test is related to\n+     * LANG-1055.\n+     */\n     @Test\n-    public void testSystemPropertiesLookupNotSingleton() {\n+    public void testSystemPropertiesLookupReplacedProperties() {\n+        Properties oldProperties = System.getProperties();\n         final String osName = ""os.name"";\n-        final String originalOsName = System.getProperty(osName);\n+        final String newOsName = oldProperties.getProperty(osName) + ""_changed"";\n \n-        StrLookup<String> properties1 = StrLookup.systemPropertiesLookup();\n-        assertEquals(originalOsName, properties1.lookup(osName));\n+        StrLookup<String> sysLookup = StrLookup.systemPropertiesLookup();\n+        Properties newProps = new Properties();\n+        newProps.setProperty(osName, newOsName);\n+        System.setProperties(newProps);\n+        try {\n+            assertEquals(""Changed properties not detected"", newOsName, sysLookup.lookup(osName));\n+        } finally {\n+            System.setProperties(oldProperties);\n+        }\n+    }\n \n-        final String differentOsName = ""HAL-9000"";\n-        System.setProperty(osName, differentOsName);\n-        StrLookup<String> properties2 = StrLookup.systemPropertiesLookup();\n+    /**\n+     * Tests that a lookup object for system properties sees changes on system\n+     * properties. This test is related to LANG-1141.\n+     */\n+    @Test\n+    public void testSystemPropertiesLookupUpdatedProperty() {\n+        final String osName = ""os.name"";\n+        String oldOs = System.getProperty(osName);\n+        final String newOsName = oldOs + ""_changed"";\n \n-        assertEquals(originalOsName, properties1.lookup(osName));\n-        assertEquals(differentOsName, properties2.lookup(osName));\n+        StrLookup<String> sysLookup = StrLookup.systemPropertiesLookup();\n+        System.setProperty(osName, newOsName);\n+        try {\n+            assertEquals(""Changed properties not detected"", newOsName, sysLookup.lookup(osName));\n+        } finally {\n+            System.setProperty(osName, oldOs);\n+        }\n     }\n \n     @Test'"
True,Delta,-1,commons-lang,39380da86acc717f419da48f070f8cf7d9f9ec94,474a837858a8e7a98316f97e9ed387d0161015f2,org.apache.commons.lang3.builder.ReflectionToStringBuilderTest.testConstructorWithNullObject,False,[],,,,"org.apache.commons.lang3.builder.reflectiontostringbuilder.reflectiontostringbuilder(object,tostringstyle)@org.apache.commons.lang3.builder.reflectiontostringbuilder.reflectiontostringbuilder(object)@org.apache.commons.lang3.builder.reflectiontostringbuilder.reflectiontostringbuilder(object,tostringstyle,stringbuffer)",u''
True,Regression,-1,commons-lang,e2c0ea4374c02539ad9bc6c4328b74f25eb72405,63d8a025e6f38ddfc966c4104ac783bcb59031e0,org.apache.commons.lang3.reflect.TypeUtilsTest.testLang1114,False,[],,,,"org.apache.commons.lang3.reflect.typeutils.equals(wildcardtype,type)","u'diff --git a/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java b/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java\nindex 60c8b4897..56b23a241 100644\n--- a/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java\n+++ b/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java\n@@ -97,6 +97,8 @@ public class TypeUtilsTest<B> {\n \n     public static Comparable<Long> longComparable;\n \n+    public static Comparable<?> wildcardComparable;\n+\n     public static URI uri;\n \n     public void dummyMethod(final List list0, final List<Object> list1, final List<?> list2,\n@@ -722,6 +724,15 @@ public class TypeUtilsTest<B> {\n        Assert.assertEquals(String.format(""? super %s"", iterableT0.getName()), lowerTypeVariable.toString());\n     }\n \n+    @Test\n+    public void testLang1114() throws Exception {\n+        final Type nonWildcardType = getClass().getDeclaredField(""wildcardComparable"").getGenericType();\n+        final Type wildcardType = ((ParameterizedType)nonWildcardType).getActualTypeArguments()[0];\n+\n+        Assert.assertFalse(TypeUtils.equals(wildcardType, nonWildcardType));\n+        Assert.assertFalse(TypeUtils.equals(nonWildcardType, wildcardType));\n+    }\n+\n     @Test\n     public void testGenericArrayType() throws Exception {\n         final Type expected = getClass().getField(""intWildcardComparable"").getGenericType();'"
True,Delta,-1,commons-lang,bbfa8eb7df16baf17239b412ff7efa11c7e0926b,7bb99bcb6bf0942c55a092c3d9274e2b080d4e95,org.apache.commons.lang3.time.FastDateFormatTest.testParseSync,False,[],,,,"org.apache.commons.lang3.time.fastdateparser.getstrategy(string,calendar)@org.apache.commons.lang3.time.fastdateprinter.parsepattern()","u'diff --git a/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java b/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java\nindex 076a20e71..c5cd0768c 100644\n--- a/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java\n+++ b/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java\n@@ -56,6 +56,7 @@ public class FastDateParserTest {\n     private static final TimeZone REYKJAVIK = TimeZone.getTimeZone(""Atlantic/Reykjavik"");\n     private static final TimeZone NEW_YORK = TimeZone.getTimeZone(""America/New_York"");\n     private static final TimeZone GMT = TimeZone.getTimeZone(""GMT"");\n+    private static final TimeZone INDIA = TimeZone.getTimeZone(""Asia/Calcutta"");\n \n     private static final Locale SWEDEN = new Locale(""sv"", ""SE"");\n \n@@ -556,4 +557,63 @@ public class FastDateParserTest {\n         assertEquals(expected.getTime(), fdp.parse(""14MAY2014""));\n         assertEquals(expected.getTime(), fdp.parse(""14May2014""));\n     }\n+    \n+\t@Test(expected = IllegalArgumentException.class)\n+\tpublic void test1806Argument() {\n+\t\tgetInstance(""XXXX"");\n+\t}\n+\n+\tprivate static Calendar initializeCalendar(TimeZone tz) {\n+\t\tCalendar cal = Calendar.getInstance(tz);\n+\t\tcal.set(Calendar.YEAR, 2001);\n+\t\tcal.set(Calendar.MONTH, 1); // not daylight savings\n+\t\tcal.set(Calendar.DAY_OF_MONTH, 4);\n+\t\tcal.set(Calendar.HOUR_OF_DAY, 12);\n+\t\tcal.set(Calendar.MINUTE, 8);\n+\t\tcal.set(Calendar.SECOND, 56);\n+\t\tcal.set(Calendar.MILLISECOND, 235);\n+\t\treturn cal;\n+\t}\n+\n+\tprivate static enum Expected1806 {\n+\t\tIndia(INDIA, ""+05"", ""+0530"", ""+05:30"", true), \n+\t\tGreenwich(GMT, ""Z"", ""Z"", ""Z"", false), \n+\t\tNewYork(NEW_YORK, ""-05"", ""-0500"", ""-05:00"", false);\n+\n+\t\tprivate Expected1806(TimeZone zone, String one, String two, String three, boolean hasHalfHourOffset) {\n+\t\t\tthis.zone = zone;\n+\t\t\tthis.one = one;\n+\t\t\tthis.two = two;\n+\t\t\tthis.three = three;\n+\t\t\tthis.offset = hasHalfHourOffset ?30*60*1000 :0;\n+\t\t}\n+\n+\t\tfinal TimeZone zone;\n+\t\tfinal String one;\n+\t\tfinal String two;\n+\t\tfinal String three;\n+\t\tfinal long offset;\n+\t}\n+\t\n+\t@Test\n+\tpublic void test1806() throws ParseException {\n+\t\tString formatStub = ""yyyy-MM-dd\'T\'HH:mm:ss.SSS"";\n+\t\tString dateStub = ""2001-02-04T12:08:56.235"";\n+\t\t\n+\t\tfor (Expected1806 trial : Expected1806.values()) {\n+\t\t\tCalendar cal = initializeCalendar(trial.zone);\n+\n+\t\t\tString message = trial.zone.getDisplayName()+"";"";\n+\t\t\t\n+\t\t\tDateParser parser = getInstance(formatStub+""X"", trial.zone);\n+\t\t\tassertEquals(message+trial.one, cal.getTime().getTime(), parser.parse(dateStub+trial.one).getTime()-trial.offset);\n+\n+\t\t\tparser = getInstance(formatStub+""XX"", trial.zone);\n+\t\t\tassertEquals(message+trial.two, cal.getTime(), parser.parse(dateStub+trial.two));\n+\n+\t\t\tparser = getInstance(formatStub+""XXX"", trial.zone);\n+\t\t\tassertEquals(message+trial.three, cal.getTime(), parser.parse(dateStub+trial.three));\n+\t\t}\n+\t}\n+\n }\ndiff --git a/src/test/java/org/apache/commons/lang3/time/FastDatePrinterTest.java b/src/test/java/org/apache/commons/lang3/time/FastDatePrinterTest.java\nindex f87b9c2e5..538e6df55 100644\n--- a/src/test/java/org/apache/commons/lang3/time/FastDatePrinterTest.java\n+++ b/src/test/java/org/apache/commons/lang3/time/FastDatePrinterTest.java\n@@ -19,6 +19,7 @@ package org.apache.commons.lang3.time;\n import static org.junit.Assert.*;\n \n import java.io.Serializable;\n+import java.text.ParseException;\n import java.text.SimpleDateFormat;\n import java.util.Calendar;\n import java.util.Date;\n@@ -39,6 +40,8 @@ public class FastDatePrinterTest {\n     \n     private static final String YYYY_MM_DD = ""yyyy/MM/dd"";\n     private static final TimeZone NEW_YORK = TimeZone.getTimeZone(""America/New_York"");\n+    private static final TimeZone GMT = TimeZone.getTimeZone(""GMT"");\n+    private static final TimeZone INDIA = TimeZone.getTimeZone(""Asia/Calcutta"");\n     private static final Locale SWEDEN = new Locale(""sv"", ""SE"");\n \n         DatePrinter getInstance(final String format) {\n@@ -272,4 +275,55 @@ public class FastDatePrinterTest {\n         FastDateFormat colonFormat = FastDateFormat.getInstance(""ZZZ"");\n         assertEquals(""+00:00"", colonFormat.format(c));\n     }\n+\n+\tprivate static Calendar initializeCalendar(TimeZone tz) {\n+\t\tCalendar cal = Calendar.getInstance(tz);\n+\t\tcal.set(Calendar.YEAR, 2001);\n+\t\tcal.set(Calendar.MONTH, 1); // not daylight savings\n+\t\tcal.set(Calendar.DAY_OF_MONTH, 4);\n+\t\tcal.set(Calendar.HOUR_OF_DAY, 12);\n+\t\tcal.set(Calendar.MINUTE, 8);\n+\t\tcal.set(Calendar.SECOND, 56);\n+\t\tcal.set(Calendar.MILLISECOND, 235);\n+\t\treturn cal;\n+\t}\n+\n+\t@Test(expected = IllegalArgumentException.class)\n+\tpublic void test1806Argument() {\n+\t\tgetInstance(""XXXX"");\n+\t}\n+\n+\tprivate static enum Expected1806 {\n+\t\tIndia(INDIA, ""+05"", ""+0530"", ""+05:30""), Greenwich(GMT, ""Z"", ""Z"", ""Z""), NewYork(\n+\t\t\t\tNEW_YORK, ""-05"", ""-0500"", ""-05:00"");\n+\n+\t\tprivate Expected1806(TimeZone zone, String one, String two, String three) {\n+\t\t\tthis.zone = zone;\n+\t\t\tthis.one = one;\n+\t\t\tthis.two = two;\n+\t\t\tthis.three = three;\n+\t\t}\n+\n+\t\tfinal TimeZone zone;\n+\t\tfinal String one;\n+\t\tfinal String two;\n+\t\tfinal String three;\n+\t}\n+\n+\n+\t@Test\n+\tpublic void test1806() throws ParseException {\n+\t\tfor (Expected1806 trial : Expected1806.values()) {\n+\t\t\tCalendar cal = initializeCalendar(trial.zone);\n+\n+\t\t\tDatePrinter printer = getInstance(""X"", trial.zone);\n+\t\t\tassertEquals(trial.one, printer.format(cal));\n+\n+\t\t\tprinter = getInstance(""XX"", trial.zone);\n+\t\t\tassertEquals(trial.two, printer.format(cal));\n+\n+\t\t\tprinter = getInstance(""XXX"", trial.zone);\n+\t\t\tassertEquals(trial.three, printer.format(cal));\n+\t\t}\n+\t}\n }'"
True,Regression,-1,commons-lang,45a6467088a08e447d7f2983551021b91c70ab49,61836183b1d84a18dbcc084d1f41bcecf752f9fd,org.apache.commons.lang3.math.NumberUtilsTest.testLang1087,False,[],,,,org.apache.commons.lang3.math.numberutils.createnumber(string),"u'diff --git a/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java b/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java\nindex 7a99a0b33..132d71ef9 100644\n--- a/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java\n+++ b/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java\n@@ -245,6 +245,19 @@ public class NumberUtilsTest {\n         assertNotNull(bigNum);\n         assertEquals(BigDecimal.class, bigNum.getClass());\n     }\n+    \n+    @Test\n+    public void testLang1087(){\n+        // no sign cases\n+        assertEquals(Float.class, NumberUtils.createNumber(""0.0"").getClass());\n+        assertEquals(Float.valueOf(""0.0""), NumberUtils.createNumber(""0.0""));\n+        // explicit positive sign cases\n+        assertEquals(Float.class, NumberUtils.createNumber(""+0.0"").getClass());\n+        assertEquals(Float.valueOf(""+0.0""), NumberUtils.createNumber(""+0.0""));\n+        // negative sign cases\n+        assertEquals(Float.class, NumberUtils.createNumber(""-0.0"").getClass());\n+        assertEquals(Float.valueOf(""-0.0""), NumberUtils.createNumber(""-0.0""));\n+    }\n \n     @Test\n     public void TestLang747() {'"
True,Delta,-1,commons-lang,c8e61afdb89c58ea8ffaf04593da41ff0888d30e,c3b1fefbad0c67c8556ba6b4573f135197f87598,org.apache.commons.lang3.math.NumberUtilsTest.testIsNumber,False,[],,,,org.apache.commons.lang3.math.numberutils.iscreatable(string),"u'diff --git a/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java b/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java\nindex 20d87fe30..376a57916 100644\n--- a/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java\n+++ b/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java\n@@ -1326,6 +1326,10 @@ public void testIsNumber() {\n         compareIsNumberWithCreateNumber(""-1234"", true);\n         compareIsNumberWithCreateNumber(""-1234.5"", true);\n         compareIsNumberWithCreateNumber(""-.12345"", true);\n+        compareIsNumberWithCreateNumber(""-0001.12345"", true);\n+        compareIsNumberWithCreateNumber(""-000.12345"", true);\n+        compareIsNumberWithCreateNumber(""+00.12345"", true);\n+        compareIsNumberWithCreateNumber(""+0002.12345"", true);\n         compareIsNumberWithCreateNumber(""-1234E5"", true);\n         compareIsNumberWithCreateNumber(""0"", true);\n         compareIsNumberWithCreateNumber(""-0"", true);\n@@ -1342,6 +1346,7 @@ public void testIsNumber() {\n         compareIsNumberWithCreateNumber("" "", false);\n         compareIsNumberWithCreateNumber(""\\r\\n\\t"", false);\n         compareIsNumberWithCreateNumber(""--2.3"", false);\n+\n         compareIsNumberWithCreateNumber("".12.3"", false);\n         compareIsNumberWithCreateNumber(""-123E"", false);\n         compareIsNumberWithCreateNumber(""-123E+-212"", false);\n@@ -1352,6 +1357,8 @@ public void testIsNumber() {\n         compareIsNumberWithCreateNumber(""-0ABC123"", false);\n         compareIsNumberWithCreateNumber(""123.4E-D"", false);\n         compareIsNumberWithCreateNumber(""123.4ED"", false);\n+        compareIsNumberWithCreateNumber(""+000E.12345"", false);\n+        compareIsNumberWithCreateNumber(""-000E.12345"", false);\n         compareIsNumberWithCreateNumber(""1234E5l"", false);\n         compareIsNumberWithCreateNumber(""11a"", false);\n         compareIsNumberWithCreateNumber(""1a"", false);'"
True,Regression,-1,commons-lang,63f1d6b83bc10a2880f5ec17a172fab284d2eff5,cc991feadbcee678635f7831ad8091ab8698d508,org.apache.commons.lang3.text.StrLookupTest.testSystemPropertiesLookupNotSingleton,False,[],,,,org.apache.commons.lang3.text.strlookup.systempropertieslookup(),"u'diff --git a/src/test/java/org/apache/commons/lang3/text/StrLookupTest.java b/src/test/java/org/apache/commons/lang3/text/StrLookupTest.java\nindex e45a324c8..e6ccccc01 100644\n--- a/src/test/java/org/apache/commons/lang3/text/StrLookupTest.java\n+++ b/src/test/java/org/apache/commons/lang3/text/StrLookupTest.java\n@@ -53,6 +53,22 @@ public class StrLookupTest  {\n         }\n     }\n \n+    @Test\n+    public void testSystemPropertiesLookupNotSingleton() {\n+        final String osName = ""os.name"";\n+        final String originalOsName = System.getProperty(osName);\n+\n+        StrLookup properties1 = StrLookup.systemPropertiesLookup();\n+        assertEquals(originalOsName, properties1.lookup(osName));\n+\n+        final String differentOsName = ""HAL-9000"";\n+        System.setProperty(osName, differentOsName);\n+        StrLookup properties2 = StrLookup.systemPropertiesLookup();\n+\n+        assertEquals(originalOsName, properties1.lookup(osName));\n+        assertEquals(differentOsName, properties2.lookup(osName));\n+    }\n+\n     @Test\n     public void testMapLookup() {\n         final Map<String, Object> map = new HashMap<String, Object>();'"
True,Delta,-1,commons-lang,6240a05c12914083adbe8c7c53e7e40ef42931dd,673dbc5794906825c48545eb7ef76fb544754999,org.apache.commons.lang3.math.NumberUtilsTest.testIsParsable,False,[],,,,org.apache.commons.lang3.math.numberutils.isparsable(string),"u'diff --git a/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java b/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java\nindex 96b7a7334..e9ec47da8 100644\n--- a/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java\n+++ b/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java\n@@ -1268,7 +1268,12 @@ public class NumberUtilsTest {\n         assertFalse( NumberUtils.isParsable(""64L"") );\n         assertTrue( NumberUtils.isParsable(""64.2"") );\n         assertTrue( NumberUtils.isParsable(""64"") );\n-        assertTrue(NumberUtils.isParsable(""018""));\n+        assertTrue( NumberUtils.isParsable(""018"") );\n+        assertTrue( NumberUtils.isParsable("".18"") );\n+        assertTrue( NumberUtils.isParsable(""-65"") );\n+        assertTrue( NumberUtils.isParsable(""-018"") );\n+        assertTrue( NumberUtils.isParsable(""-018.2"") );\n+        assertTrue( NumberUtils.isParsable(""-.236"") );\n     }\n \n     private boolean checkCreateNumber(final String val) {'"
True,Delta,-1,commons-lang,8d6bc0ca625f3a1a98b486541fa613b2fac4b41c,7fd021d82ff431fb31f42bc6c5c44a3b979cb426,org.apache.commons.lang3.math.NumberUtilsTest.testCreateNumber,False,[],,,,org.apache.commons.lang3.math.numberutils.createnumber(string),"u'diff --git a/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java b/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java\nindex 236084b7c..e2143bdc6 100644\n--- a/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java\n+++ b/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java\n@@ -242,6 +242,10 @@ public void testCreateNumber() {\n         final Number bigNum = NumberUtils.createNumber(""-1.1E-700F"");\n         assertNotNull(bigNum);\n         assertEquals(BigDecimal.class, bigNum.getClass());\n+        \n+        // LANG-1018\n+        assertEquals(""createNumber(String) LANG-1018 failed"",\n+                Double.valueOf(""-160952.54""), NumberUtils.createNumber(""-160952.54""));\n     }\n     \n     @Test'"
True,Delta,-1,commons-lang,bd9adbb637a8a4aa5eb61c6fde2c576d0ab3c4fa,1d1883f0e20215720eb583fd43eee088808c616b,org.apache.commons.lang3.time.FastDateFormatTest.testParseSync,False,[],,,,"org.apache.commons.lang3.time.fastdateprinter.appendfulldigits(appendable,int,int)",u''
True,Regression,-1,commons-lang,b877fb9abef4a19eec9cc7329acbd433648b8f7b,5e62bf80f345ff28d494c2b407a9e8691a9fb684,org.apache.commons.lang3.math.NumberUtilsTest.testCreateNumberFailure_7,False,[],,,,org.apache.commons.lang3.math.numberutils.createnumber(string),"u'diff --git a/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java b/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java\nindex bfa194963..92977d5a5 100644\n--- a/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java\n+++ b/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java\n@@ -318,6 +318,30 @@ public void testCreateNumberFailure_4() {\n         NumberUtils.createNumber(""1eE+00001"");\n     }\n \n+    @Test(expected=NumberFormatException.class)\n+    // Check that the code fails to create a valid number when there are multiple trailing \'f\' characters (LANG-1205)\n+    public void testCreateNumberFailure_5() {\n+        NumberUtils.createNumber(""1234.5ff"");\n+    }\n+\n+    @Test(expected=NumberFormatException.class)\n+    // Check that the code fails to create a valid number when there are multiple trailing \'F\' characters (LANG-1205)\n+    public void testCreateNumberFailure_6() {\n+        NumberUtils.createNumber(""1234.5FF"");\n+    }\n+\n+    @Test(expected=NumberFormatException.class)\n+    // Check that the code fails to create a valid number when there are multiple trailing \'d\' characters (LANG-1205)\n+    public void testCreateNumberFailure_7() {\n+        NumberUtils.createNumber(""1234.5dd"");\n+    }\n+\n+    @Test(expected=NumberFormatException.class)\n+    // Check that the code fails to create a valid number when there are multiple trailing \'D\' characters (LANG-1205)\n+    public void testCreateNumberFailure_8() {\n+        NumberUtils.createNumber(""1234.5DD"");\n+    }\n+\n     // Tests to show when magnitude causes switch to next Number type\n     // Will probably need to be adjusted if code is changed to check precision (LANG-693)\n     @Test'"
True,Regression,-1,commons-lang,b877fb9abef4a19eec9cc7329acbd433648b8f7b,5e62bf80f345ff28d494c2b407a9e8691a9fb684,org.apache.commons.lang3.math.NumberUtilsTest.testCreateNumberFailure_8,False,[],,,,org.apache.commons.lang3.math.numberutils.createnumber(string),"u'diff --git a/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java b/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java\nindex bfa194963..92977d5a5 100644\n--- a/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java\n+++ b/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java\n@@ -318,6 +318,30 @@ public void testCreateNumberFailure_4() {\n         NumberUtils.createNumber(""1eE+00001"");\n     }\n \n+    @Test(expected=NumberFormatException.class)\n+    // Check that the code fails to create a valid number when there are multiple trailing \'f\' characters (LANG-1205)\n+    public void testCreateNumberFailure_5() {\n+        NumberUtils.createNumber(""1234.5ff"");\n+    }\n+\n+    @Test(expected=NumberFormatException.class)\n+    // Check that the code fails to create a valid number when there are multiple trailing \'F\' characters (LANG-1205)\n+    public void testCreateNumberFailure_6() {\n+        NumberUtils.createNumber(""1234.5FF"");\n+    }\n+\n+    @Test(expected=NumberFormatException.class)\n+    // Check that the code fails to create a valid number when there are multiple trailing \'d\' characters (LANG-1205)\n+    public void testCreateNumberFailure_7() {\n+        NumberUtils.createNumber(""1234.5dd"");\n+    }\n+\n+    @Test(expected=NumberFormatException.class)\n+    // Check that the code fails to create a valid number when there are multiple trailing \'D\' characters (LANG-1205)\n+    public void testCreateNumberFailure_8() {\n+        NumberUtils.createNumber(""1234.5DD"");\n+    }\n+\n     // Tests to show when magnitude causes switch to next Number type\n     // Will probably need to be adjusted if code is changed to check precision (LANG-693)\n     @Test'"
True,Regression,-1,commons-lang,b877fb9abef4a19eec9cc7329acbd433648b8f7b,5e62bf80f345ff28d494c2b407a9e8691a9fb684,org.apache.commons.lang3.math.NumberUtilsTest.testCreateNumberFailure_6,False,[],,,,org.apache.commons.lang3.math.numberutils.createnumber(string),"u'diff --git a/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java b/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java\nindex bfa194963..92977d5a5 100644\n--- a/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java\n+++ b/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java\n@@ -318,6 +318,30 @@ public void testCreateNumberFailure_4() {\n         NumberUtils.createNumber(""1eE+00001"");\n     }\n \n+    @Test(expected=NumberFormatException.class)\n+    // Check that the code fails to create a valid number when there are multiple trailing \'f\' characters (LANG-1205)\n+    public void testCreateNumberFailure_5() {\n+        NumberUtils.createNumber(""1234.5ff"");\n+    }\n+\n+    @Test(expected=NumberFormatException.class)\n+    // Check that the code fails to create a valid number when there are multiple trailing \'F\' characters (LANG-1205)\n+    public void testCreateNumberFailure_6() {\n+        NumberUtils.createNumber(""1234.5FF"");\n+    }\n+\n+    @Test(expected=NumberFormatException.class)\n+    // Check that the code fails to create a valid number when there are multiple trailing \'d\' characters (LANG-1205)\n+    public void testCreateNumberFailure_7() {\n+        NumberUtils.createNumber(""1234.5dd"");\n+    }\n+\n+    @Test(expected=NumberFormatException.class)\n+    // Check that the code fails to create a valid number when there are multiple trailing \'D\' characters (LANG-1205)\n+    public void testCreateNumberFailure_8() {\n+        NumberUtils.createNumber(""1234.5DD"");\n+    }\n+\n     // Tests to show when magnitude causes switch to next Number type\n     // Will probably need to be adjusted if code is changed to check precision (LANG-693)\n     @Test'"
True,Regression,-1,commons-lang,b877fb9abef4a19eec9cc7329acbd433648b8f7b,5e62bf80f345ff28d494c2b407a9e8691a9fb684,org.apache.commons.lang3.math.NumberUtilsTest.testCreateNumberFailure_5,False,[],,,,org.apache.commons.lang3.math.numberutils.createnumber(string),"u'diff --git a/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java b/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java\nindex bfa194963..92977d5a5 100644\n--- a/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java\n+++ b/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java\n@@ -318,6 +318,30 @@ public void testCreateNumberFailure_4() {\n         NumberUtils.createNumber(""1eE+00001"");\n     }\n \n+    @Test(expected=NumberFormatException.class)\n+    // Check that the code fails to create a valid number when there are multiple trailing \'f\' characters (LANG-1205)\n+    public void testCreateNumberFailure_5() {\n+        NumberUtils.createNumber(""1234.5ff"");\n+    }\n+\n+    @Test(expected=NumberFormatException.class)\n+    // Check that the code fails to create a valid number when there are multiple trailing \'F\' characters (LANG-1205)\n+    public void testCreateNumberFailure_6() {\n+        NumberUtils.createNumber(""1234.5FF"");\n+    }\n+\n+    @Test(expected=NumberFormatException.class)\n+    // Check that the code fails to create a valid number when there are multiple trailing \'d\' characters (LANG-1205)\n+    public void testCreateNumberFailure_7() {\n+        NumberUtils.createNumber(""1234.5dd"");\n+    }\n+\n+    @Test(expected=NumberFormatException.class)\n+    // Check that the code fails to create a valid number when there are multiple trailing \'D\' characters (LANG-1205)\n+    public void testCreateNumberFailure_8() {\n+        NumberUtils.createNumber(""1234.5DD"");\n+    }\n+\n     // Tests to show when magnitude causes switch to next Number type\n     // Will probably need to be adjusted if code is changed to check precision (LANG-693)\n     @Test'"
True,Delta,-1,commons-lang,3c92830ec51fb6b6e9a7ca2fb8fda324cd33e48a,38bafd283f2e5fed8ca33dcf1aac8e4bdf54450e,org.apache.commons.lang3.time.FastDateFormatTest.testParseSync,False,[],,,,"org.apache.commons.lang3.time.fastdateparser.appenddisplaynames(calendar,locale,int,stringbuilder,map)","u'diff --git a/src/test/java/org/apache/commons/lang3/time/FastDateParser_TimeZoneStrategyTest.java b/src/test/java/org/apache/commons/lang3/time/FastDateParser_TimeZoneStrategyTest.java\nindex be08454b5..2ed0c7f9b 100644\n--- a/src/test/java/org/apache/commons/lang3/time/FastDateParser_TimeZoneStrategyTest.java\n+++ b/src/test/java/org/apache/commons/lang3/time/FastDateParser_TimeZoneStrategyTest.java\n@@ -17,6 +17,8 @@\n package org.apache.commons.lang3.time;\n \n import java.text.DateFormatSymbols;\n+import java.text.ParseException;\n+import java.util.Date;\n import java.util.Locale;\n import java.util.TimeZone;\n \n@@ -52,4 +54,13 @@ public void testTimeZoneStrategyPattern() {\n             }\n         }\n     }\n+\n+    @Test\n+    public void testLang1219() throws ParseException {\n+        FastDateParser parser = new FastDateParser(""dd.MM.yyyy HH:mm:ss z"", TimeZone.getDefault(), Locale.GERMAN);\n+\n+        Date summer = parser.parse(""26.10.2014 02:00:00 MESZ"");\n+        Date standard = parser.parse(""26.10.2014 02:00:00 MEZ"");\n+        Assert.assertNotEquals(summer.getTime(), standard.getTime());\n+    }\n }'"
True,Regression,-1,commons-lang,3c92830ec51fb6b6e9a7ca2fb8fda324cd33e48a,38bafd283f2e5fed8ca33dcf1aac8e4bdf54450e,org.apache.commons.lang3.time.FastDateParser_TimeZoneStrategyTest.testLang1219,False,[],,,,"org.apache.commons.lang3.time.fastdateparser.appenddisplaynames(calendar,locale,int,stringbuilder,map)","u'diff --git a/src/test/java/org/apache/commons/lang3/time/FastDateParser_TimeZoneStrategyTest.java b/src/test/java/org/apache/commons/lang3/time/FastDateParser_TimeZoneStrategyTest.java\nindex be08454b5..2ed0c7f9b 100644\n--- a/src/test/java/org/apache/commons/lang3/time/FastDateParser_TimeZoneStrategyTest.java\n+++ b/src/test/java/org/apache/commons/lang3/time/FastDateParser_TimeZoneStrategyTest.java\n@@ -17,6 +17,8 @@\n package org.apache.commons.lang3.time;\n \n import java.text.DateFormatSymbols;\n+import java.text.ParseException;\n+import java.util.Date;\n import java.util.Locale;\n import java.util.TimeZone;\n \n@@ -52,4 +54,13 @@ public void testTimeZoneStrategyPattern() {\n             }\n         }\n     }\n+\n+    @Test\n+    public void testLang1219() throws ParseException {\n+        FastDateParser parser = new FastDateParser(""dd.MM.yyyy HH:mm:ss z"", TimeZone.getDefault(), Locale.GERMAN);\n+\n+        Date summer = parser.parse(""26.10.2014 02:00:00 MESZ"");\n+        Date standard = parser.parse(""26.10.2014 02:00:00 MEZ"");\n+        Assert.assertNotEquals(summer.getTime(), standard.getTime());\n+    }\n }'"
True,Delta,-1,commons-lang,1002c9e243883654f9c1e6beae643fb4e72fc172,2fa0b168d62a07365b2787d0ed97fa1c2cfb673b,org.apache.commons.lang3.time.FastDateFormatTest.testParseSync,False,[],,,,"org.apache.commons.lang3.time.fastdateprinter.format(date)@org.apache.commons.lang3.time.fastdateprinter.newcalendar()@org.apache.commons.lang3.time.fastdateparser.getstrategy(char,int,calendar)@org.apache.commons.lang3.time.fastdateparser.parse(string,parseposition,calendar)@org.apache.commons.lang3.time.fastdateprinter.parsepattern()",u''
True,Delta,-1,commons-lang,2ebf9a21d2dc99ab2f434111cac9dcd6da99d574,bfcdeeaf441feffba724f03602cec2cf7b181a86,org.apache.commons.lang3.time.FastDateFormatTest.testParseSync,False,[],,,,"org.apache.commons.lang3.time.fastdateprinter.parsepattern()@org.apache.commons.lang3.time.fastdateparser.getstrategy(char,int,calendar)","u'diff --git a/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java b/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java\nindex 4c18e64d9..5c52a6ca2 100644\n--- a/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java\n+++ b/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java\n@@ -702,4 +702,19 @@ public class FastDateParserTest {\n         cal.set(2015, Calendar.JULY, 4);\n         Assert.assertEquals(cal.getTime(), date);\n     }\n+\n+    @Test\n+    public void testDayNumberOfWeek() throws ParseException {\n+        final DateParser parser = getInstance(""u"");\n+        Calendar calendar = Calendar.getInstance();\n+\n+        calendar.setTime(parser.parse(""1""));\n+        Assert.assertEquals(Calendar.MONDAY, calendar.get(Calendar.DAY_OF_WEEK));\n+\n+        calendar.setTime(parser.parse(""6""));\n+        Assert.assertEquals(Calendar.SATURDAY, calendar.get(Calendar.DAY_OF_WEEK));\n+\n+        calendar.setTime(parser.parse(""7""));\n+        Assert.assertEquals(Calendar.SUNDAY, calendar.get(Calendar.DAY_OF_WEEK));\n+    }\n }\ndiff --git a/src/test/java/org/apache/commons/lang3/time/FastDatePrinterTest.java b/src/test/java/org/apache/commons/lang3/time/FastDatePrinterTest.java\nindex 5de68d65c..1a2701ba5 100644\n--- a/src/test/java/org/apache/commons/lang3/time/FastDatePrinterTest.java\n+++ b/src/test/java/org/apache/commons/lang3/time/FastDatePrinterTest.java\n@@ -420,4 +420,19 @@ public class FastDatePrinterTest {\n         long epoch = date.getTime();\n         assertEquals(expected, format.format(epoch, sb).toString());\n     }\n+\n+    @Test\n+    public void testDayNumberOfWeek() {\n+        final DatePrinter printer = getInstance(""u"");\n+        Calendar calendar = Calendar.getInstance();\n+\n+        calendar.set(Calendar.DAY_OF_WEEK, Calendar.MONDAY);\n+        assertEquals(""1"", printer.format(calendar.getTime()));\n+\n+        calendar.set(Calendar.DAY_OF_WEEK, Calendar.SATURDAY);\n+        assertEquals(""6"", printer.format(calendar.getTime()));\n+\n+        calendar.set(Calendar.DAY_OF_WEEK, Calendar.SUNDAY);\n+        assertEquals(""7"", printer.format(calendar.getTime()));\n+    }\n }'"
True,Regression,-1,commons-lang,3fadfdd69f4682f05563ce53e55743f55813f488,e7d16c27629722a93a9d36a0b5e0a3a793850544,org.apache.commons.lang3.builder.JsonToStringStyleTest.testLANG1396,False,[],,,,"org.apache.commons.lang3.builder.tostringstyle.appendfieldstart(stringbuffer,string)","u'diff --git a/src/test/java/org/apache/commons/lang3/builder/JsonToStringStyleTest.java b/src/test/java/org/apache/commons/lang3/builder/JsonToStringStyleTest.java\nindex 82467cbf6..2ae391e83 100644\n--- a/src/test/java/org/apache/commons/lang3/builder/JsonToStringStyleTest.java\n+++ b/src/test/java/org/apache/commons/lang3/builder/JsonToStringStyleTest.java\n@@ -387,6 +387,11 @@ public void testLANG1395() {\n         assertEquals(""{\\""name\\"":\\""Let\'s \\\\\\""quote\\\\\\"" this\\""}"",new ToStringBuilder(base).append(""name"",""Let\'s \\""quote\\"" this"").toString());\n     }\n \n+    @Test\n+    public void testLANG1396() {\n+        assertEquals(""{\\""Let\'s \\\\\\""quote\\\\\\"" this\\"":\\""value\\""}"",new ToStringBuilder(base).append(""Let\'s \\""quote\\"" this"",""value"").toString());\n+    }\n+\n     /**\n      * An object with nested object structures used to test {@link ToStringStyle.JsonToStringStyle}.\n      *'"
True,Regression,-1,commons-lang,7d061e33e59e23dc4b03378f35f50a7d70f033b3,6049e77fdcd021544a60651fc6de4d80e2ef1c2d,org.apache.commons.lang3.concurrent.EventCountCircuitBreakerTest.testOpeningWhenThresholdReachedThroughBatch,False,[],,,,org.apache.commons.lang3.concurrent.eventcountcircuitbreaker.incrementandcheckstate(integer),"u'diff --git a/src/test/java/org/apache/commons/lang3/concurrent/EventCountCircuitBreakerTest.java b/src/test/java/org/apache/commons/lang3/concurrent/EventCountCircuitBreakerTest.java\nindex 1c9e79411..0053554e1 100644\n--- a/src/test/java/org/apache/commons/lang3/concurrent/EventCountCircuitBreakerTest.java\n+++ b/src/test/java/org/apache/commons/lang3/concurrent/EventCountCircuitBreakerTest.java\n@@ -154,6 +154,21 @@ public void testOpeningWhenThresholdReached() {\n         assertFalse(""Closed"", breaker.isClosed());\n     }\n \n+    /**\n+     * Tests that the circuit breaker opens if all conditions are met when using\n+     * {@link EventCountCircuitBreaker#incrementAndCheckState(Integer increment)}.\n+     */\n+    @Test\n+    public void testOpeningWhenThresholdReachedThroughBatch() {\n+        final long timeIncrement = NANO_FACTOR / OPENING_THRESHOLD - 1;\n+        final EventCountCircuitBreakerTestImpl breaker = new EventCountCircuitBreakerTestImpl(OPENING_THRESHOLD, 1,\n+            TimeUnit.SECONDS, CLOSING_THRESHOLD, 1, TimeUnit.SECONDS);\n+        long startTime = timeIncrement * (OPENING_THRESHOLD + 1);\n+        boolean open = !breaker.at(startTime).incrementAndCheckState(OPENING_THRESHOLD + 1);\n+        assertTrue(""Not open"", open);\n+        assertFalse(""Closed"", breaker.isClosed());\n+    }\n+\n     /**\n      * Tests that an open circuit breaker does not close itself when the number of events\n      * received is over the threshold.'"
True,Delta,-1,commons-lang,60412131f3679b720bcaaaf3dea4be666cefea7a,3a4ac357981283fd3a8817f9e6d57e8b181549be,org.apache.commons.lang3.exception.ExceptionUtilsTest.testGetRootCause_Throwable,False,[],,,,org.apache.commons.lang3.exception.exceptionutils.getrootcause(throwable),"u'diff --git a/src/test/java/org/apache/commons/lang3/exception/ExceptionUtilsTest.java b/src/test/java/org/apache/commons/lang3/exception/ExceptionUtilsTest.java\nindex d6fb98a66..0af68a8fb 100644\n--- a/src/test/java/org/apache/commons/lang3/exception/ExceptionUtilsTest.java\n+++ b/src/test/java/org/apache/commons/lang3/exception/ExceptionUtilsTest.java\n@@ -147,10 +147,10 @@ public void testGetCause_ThrowableArray() {\n     @Test\n     public void testGetRootCause_Throwable() {\n         assertSame(null, ExceptionUtils.getRootCause(null));\n-        assertSame(null, ExceptionUtils.getRootCause(withoutCause));\n+        assertSame(withoutCause, ExceptionUtils.getRootCause(withoutCause));\n         assertSame(withoutCause, ExceptionUtils.getRootCause(nested));\n         assertSame(withoutCause, ExceptionUtils.getRootCause(withCause));\n-        assertSame(null, ExceptionUtils.getRootCause(jdkNoCause));\n+        assertSame(jdkNoCause, ExceptionUtils.getRootCause(jdkNoCause));\n         assertSame(cyclicCause.getCause().getCause(), ExceptionUtils.getRootCause(cyclicCause));\n     }\n '"
True,Regression,-1,commons-lang,2e9f3a80146262511ca7bcdd3411f095dff4951d,2ce40494073aa4e9bdcba4c39d24727b7141d227,org.apache.commons.lang3.builder.EqualsBuilderTest.testObjectRecursiveGenericString,False,[],,,,"org.apache.commons.lang3.builder.equalsbuilder.equalsbuilder()@org.apache.commons.lang3.builder.equalsbuilder.reflectionappend(object,object)","u'diff --git a/src/test/java/org/apache/commons/lang3/builder/EqualsBuilderTest.java b/src/test/java/org/apache/commons/lang3/builder/EqualsBuilderTest.java\nindex 23651f612..05f1da9a8 100644\n--- a/src/test/java/org/apache/commons/lang3/builder/EqualsBuilderTest.java\n+++ b/src/test/java/org/apache/commons/lang3/builder/EqualsBuilderTest.java\n@@ -168,6 +168,19 @@ public void setT(final int t) {\n         }\n     }\n \n+    static class TestRecursiveGenericObject<T> {\n+\n+        private final T a;\n+\n+        TestRecursiveGenericObject(final T a) {\n+            this.a = a;\n+        }\n+\n+        public T getA() {\n+            return a;\n+        }\n+    }\n+\n     static class TestRecursiveObject {\n         private final TestRecursiveInnerObject a;\n         private final TestRecursiveInnerObject b;\n@@ -418,6 +431,35 @@ public void testObjectBuild() {\n         assertEquals(Boolean.TRUE, new EqualsBuilder().append((Object) null, null).build());\n     }\n \n+    @Test\n+    public void testObjectRecursiveGenericInteger() {\n+        final TestRecursiveGenericObject<Integer> o1_a = new TestRecursiveGenericObject<Integer>(1);\n+        final TestRecursiveGenericObject<Integer> o1_b = new TestRecursiveGenericObject<Integer>(1);\n+        final TestRecursiveGenericObject<Integer> o2 = new TestRecursiveGenericObject<Integer>(2);\n+\n+        assertTrue(new EqualsBuilder().setTestRecursive(true).append(o1_a, o1_b).isEquals());\n+        assertTrue(new EqualsBuilder().setTestRecursive(true).append(o1_b, o1_a).isEquals());\n+\n+        assertFalse(new EqualsBuilder().setTestRecursive(true).append(o1_b, o2).isEquals());\n+    }\n+\n+    @Test\n+    public void testObjectRecursiveGenericString() {\n+        // Note: Do not use literals, because string literals are always mapped by same object (internal() of String))!\n+        String s1_a = String.valueOf(1);\n+        final TestRecursiveGenericObject<String> o1_a = new TestRecursiveGenericObject<String>(s1_a);\n+        final TestRecursiveGenericObject<String> o1_b = new TestRecursiveGenericObject<String>(String.valueOf(1));\n+        final TestRecursiveGenericObject<String> o2 = new TestRecursiveGenericObject<String>(String.valueOf(2));\n+\n+        // To trigger bug reported in LANG-1356, call hashCode only on string in instance o1_a\n+        s1_a.hashCode();\n+\n+        assertTrue(new EqualsBuilder().setTestRecursive(true).append(o1_a, o1_b).isEquals());\n+        assertTrue(new EqualsBuilder().setTestRecursive(true).append(o1_b, o1_a).isEquals());\n+\n+        assertFalse(new EqualsBuilder().setTestRecursive(true).append(o1_b, o2).isEquals());\n+    }\n+\n     @Test\n     public void testObjectRecursive() {\n         final TestRecursiveInnerObject i1_1 = new TestRecursiveInnerObject(1);'"
True,Delta,-1,commons-lang,8cafd87c83f4197f7e8d14de8cba453c844266c0,314b6b56bec4af56dba667d66a25c1613f4bc800,org.apache.commons.lang3.reflect.MethodUtilsTest.testGetMethodsWithAnnotationSearchSupersAndIgnoreAccess,False,[],,,,"org.apache.commons.lang3.reflect.methodutils.getmethodslistwithannotation(class,class,boolean,boolean)",u''
True,Delta,-1,commons-lang,8cafd87c83f4197f7e8d14de8cba453c844266c0,314b6b56bec4af56dba667d66a25c1613f4bc800,org.apache.commons.lang3.reflect.MethodUtilsTest.testGetMethodsWithAnnotationSearchSupersButNotIgnoreAccess,False,[],,,,"org.apache.commons.lang3.reflect.methodutils.getmethodslistwithannotation(class,class,boolean,boolean)",u''
True,Regression,-1,commons-lang,1661e5519c4836a5a940b13b7797263443156fc9,30c85ad05363767deeefee577063c2c432b971d4,org.apache.commons.lang3.reflect.TypeUtilsTest.testToStringLang1311,False,[],,,,org.apache.commons.lang3.reflect.typeutils.classtostring(class),"u'diff --git a/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java b/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java\nindex b01bd0f45..afc5b74b0 100644\n--- a/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java\n+++ b/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java\n@@ -101,6 +101,8 @@\n \n     public static URI uri;\n \n+    public static List<String>[] stringListArray;\n+\n     public void dummyMethod(final List list0, final List<Object> list1, final List<?> list2,\n             final List<? super Object> list3, final List<String> list4, final List<? extends String> list5,\n             final List<? super String> list6, final List[] list7, final List<Object>[] list8, final List<?>[] list9,\n@@ -743,6 +745,14 @@ public void testGenericArrayType() throws Exception {\n         Assert.assertEquals(""java.lang.Comparable<? extends java.lang.Integer>[]"", actual.toString());\n     }\n \n+    @Test\n+    public void testToStringLang1311() {\n+        Assert.assertEquals(""int[]"", TypeUtils.toString(int[].class));\n+        Assert.assertEquals(""java.lang.Integer[]"", TypeUtils.toString(Integer[].class));\n+        Field stringListField = FieldUtils.getDeclaredField(getClass(), ""stringListArray"");\n+        Assert.assertEquals(""java.util.List<java.lang.String>[]"", TypeUtils.toString(stringListField.getGenericType()));\n+    }\n+\n     @Test\n     public void testToLongString() {\n         Assert.assertEquals(getClass().getName() + "":B"", TypeUtils.toLongString(getClass().getTypeParameters()[0]));'"
True,Regression,-1,commons-lang,e199d381f8c199801fee2d40a7f3ea1380700631,97f1c120c092916f2f95439b6440a8977c66ee0a,org.apache.commons.lang.builder.EqualsBuilderTest.testBigDecimal,False,[],,,,"org.apache.commons.lang.builder.equalsbuilder.append(object,object)","u'diff --git a/src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java b/src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java\nindex 57c645922..3455561ff 100644\n--- a/src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java\n+++ b/src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java\n@@ -16,6 +16,7 @@\n  */\n package org.apache.commons.lang.builder;\n \n+import java.math.BigDecimal;\n import java.util.Arrays;\n \n import junit.framework.Test;\n@@ -376,6 +377,14 @@ public class EqualsBuilderTest extends TestCase {\n         assertTrue(new EqualsBuilder().append(Float.POSITIVE_INFINITY, Float.POSITIVE_INFINITY).isEquals());\n     }\n \n+    // https://issues.apache.org/jira/browse/LANG-393\n+    public void testBigDecimal() {\n+        BigDecimal o1 = new BigDecimal(""2.0"");\n+        BigDecimal o2 = new BigDecimal(""2.00"");\n+        assertTrue(new EqualsBuilder().append(o1, o1).isEquals());\n+        assertTrue(new EqualsBuilder().append(o1, o2).isEquals());\n+    }\n+\n     public void testAccessors() {\n         EqualsBuilder equalsBuilder = new EqualsBuilder();\n         assertTrue(equalsBuilder.isEquals());'"
