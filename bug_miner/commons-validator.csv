valid,type,issue,module,commit,parent,testcase,has_test_annotation,traces,bugged_components,description,extra_description,blamed_components,diff
True,Delta,467,commons-validator,e9bda17e9a27e4e8d1b951854baf838f0075619f,e7ec659df7800aabf6386420f4575f626b19e613,org.apache.commons.validator.routines.UrlValidatorTest.testValidator467,False,[],,,,org.apache.commons.validator.routines.urlvalidator.isvalidpath(string),"u'diff --git a/src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java b/src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java\nindex 9e48e07d..7a40e3cc 100644\n--- a/src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java\n+++ b/src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java\n@@ -498,7 +498,14 @@ protected void setUp() {\n        assertTrue(validator.isValid(""http://example.com/serach?address=Main+Avenue""));\n    }\n \n-   //-------------------- Test data for creating a composite URL\n+   public void testValidator467() {\n+      UrlValidator validator = new UrlValidator(UrlValidator.ALLOW_2_SLASHES);\n+      assertTrue(validator.isValid(""https://example.com/some_path/path/""));\n+      assertTrue(validator.isValid(""https://example.com//somepath/path/""));\n+      assertTrue(validator.isValid(""https://example.com//some_path/path/""));\n+  }\n+\n+  //-------------------- Test data for creating a composite URL\n    /**\n     * The data given below approximates the 4 parts of a URL\n     * <scheme>://<authority><path>?<query> except that the port number'"
True,Delta,467,commons-validator,e9bda17e9a27e4e8d1b951854baf838f0075619f,e7ec659df7800aabf6386420f4575f626b19e613,org.apache.commons.validator.routines.UrlValidatorTest.testValidator467,False,[],,,,org.apache.commons.validator.routines.urlvalidator.isvalidpath(string),"u'diff --git a/src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java b/src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java\nindex 9e48e07d..7a40e3cc 100644\n--- a/src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java\n+++ b/src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java\n@@ -498,7 +498,14 @@ protected void setUp() {\n        assertTrue(validator.isValid(""http://example.com/serach?address=Main+Avenue""));\n    }\n \n-   //-------------------- Test data for creating a composite URL\n+   public void testValidator467() {\n+      UrlValidator validator = new UrlValidator(UrlValidator.ALLOW_2_SLASHES);\n+      assertTrue(validator.isValid(""https://example.com/some_path/path/""));\n+      assertTrue(validator.isValid(""https://example.com//somepath/path/""));\n+      assertTrue(validator.isValid(""https://example.com//some_path/path/""));\n+  }\n+\n+  //-------------------- Test data for creating a composite URL\n    /**\n     * The data given below approximates the 4 parts of a URL\n     * <scheme>://<authority><path>?<query> except that the port number'"
True,Regression,464,commons-validator,81d60ae98cfd5ae0bff1ccecb7654bdbc6bc2692,4ab18ec3e70f283fb98c72e3042553358ae85145,org.apache.commons.validator.routines.UrlValidatorTest.testValidator276,False,[],,,,org.apache.commons.validator.routines.urlvalidator.isvalid(string),"u'diff --git a/src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java b/src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java\nindex 7a40e3cc..b34a030b 100644\n--- a/src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java\n+++ b/src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java\n@@ -35,7 +35,7 @@ public class UrlValidatorTest extends TestCase {\n    }\n \n    @Override\n-protected void setUp() {\n+   protected void setUp() {\n       for (int index = 0; index < testPartsIndex.length - 1; index++) {\n          testPartsIndex[index] = 0;\n       }\n@@ -254,8 +254,7 @@ protected void setUp() {\n         assertTrue(""file:///c:/ should now be allowed"",\n                  validator.isValid(""file:///C:/some.file""));\n \n-        // Currently, we don\'t support the c:\\ form\n-        assertFalse(""file:///c:\\\\ shouldn\'t be allowed"",\n+        assertTrue(""file:///c:\\\\ should be allowed"",\n               validator.isValid(""file:///C:\\\\some.file""));\n \n         assertTrue(""file:///etc/ should now be allowed"",\n@@ -331,6 +330,15 @@ protected void setUp() {\n         assertFalse(urlValidator.isValid(""http://example.rocks:100000/""));\n     }\n \n+    public void testValidator464() {\n+        String[] schemes = {""file""};\n+        UrlValidator urlValidator = new UrlValidator(schemes);\n+        String fileOK = ""file:///bad ^ domain.com/label/test"";\n+        String fileNAK = ""file://bad ^ domain.com/label/test"";\n+        assertTrue(fileOK, urlValidator.isValid(fileOK));\n+        assertFalse(fileNAK, urlValidator.isValid(fileNAK));\n+    }\n+\n     static boolean incrementTestPartsIndex(int[] testPartsIndex, Object[] testParts) {\n       boolean carry = true;  //add 1 to lowest order part.\n       boolean maxIndex = true;'"
True,Regression,464,commons-validator,81d60ae98cfd5ae0bff1ccecb7654bdbc6bc2692,4ab18ec3e70f283fb98c72e3042553358ae85145,org.apache.commons.validator.routines.UrlValidatorTest.testValidator276,False,[],,,,org.apache.commons.validator.routines.urlvalidator.isvalid(string),"u'diff --git a/src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java b/src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java\nindex 7a40e3cc..b34a030b 100644\n--- a/src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java\n+++ b/src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java\n@@ -35,7 +35,7 @@ public class UrlValidatorTest extends TestCase {\n    }\n \n    @Override\n-protected void setUp() {\n+   protected void setUp() {\n       for (int index = 0; index < testPartsIndex.length - 1; index++) {\n          testPartsIndex[index] = 0;\n       }\n@@ -254,8 +254,7 @@ protected void setUp() {\n         assertTrue(""file:///c:/ should now be allowed"",\n                  validator.isValid(""file:///C:/some.file""));\n \n-        // Currently, we don\'t support the c:\\ form\n-        assertFalse(""file:///c:\\\\ shouldn\'t be allowed"",\n+        assertTrue(""file:///c:\\\\ should be allowed"",\n               validator.isValid(""file:///C:\\\\some.file""));\n \n         assertTrue(""file:///etc/ should now be allowed"",\n@@ -331,6 +330,15 @@ protected void setUp() {\n         assertFalse(urlValidator.isValid(""http://example.rocks:100000/""));\n     }\n \n+    public void testValidator464() {\n+        String[] schemes = {""file""};\n+        UrlValidator urlValidator = new UrlValidator(schemes);\n+        String fileOK = ""file:///bad ^ domain.com/label/test"";\n+        String fileNAK = ""file://bad ^ domain.com/label/test"";\n+        assertTrue(fileOK, urlValidator.isValid(fileOK));\n+        assertFalse(fileNAK, urlValidator.isValid(fileNAK));\n+    }\n+\n     static boolean incrementTestPartsIndex(int[] testPartsIndex, Object[] testParts) {\n       boolean carry = true;  //add 1 to lowest order part.\n       boolean maxIndex = true;'"
True,Delta,464,commons-validator,81d60ae98cfd5ae0bff1ccecb7654bdbc6bc2692,4ab18ec3e70f283fb98c72e3042553358ae85145,org.apache.commons.validator.routines.UrlValidatorTest.testValidator464,False,[],,,,org.apache.commons.validator.routines.urlvalidator.isvalid(string),"u'diff --git a/src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java b/src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java\nindex 7a40e3cc..b34a030b 100644\n--- a/src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java\n+++ b/src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java\n@@ -35,7 +35,7 @@ public class UrlValidatorTest extends TestCase {\n    }\n \n    @Override\n-protected void setUp() {\n+   protected void setUp() {\n       for (int index = 0; index < testPartsIndex.length - 1; index++) {\n          testPartsIndex[index] = 0;\n       }\n@@ -254,8 +254,7 @@ protected void setUp() {\n         assertTrue(""file:///c:/ should now be allowed"",\n                  validator.isValid(""file:///C:/some.file""));\n \n-        // Currently, we don\'t support the c:\\ form\n-        assertFalse(""file:///c:\\\\ shouldn\'t be allowed"",\n+        assertTrue(""file:///c:\\\\ should be allowed"",\n               validator.isValid(""file:///C:\\\\some.file""));\n \n         assertTrue(""file:///etc/ should now be allowed"",\n@@ -331,6 +330,15 @@ protected void setUp() {\n         assertFalse(urlValidator.isValid(""http://example.rocks:100000/""));\n     }\n \n+    public void testValidator464() {\n+        String[] schemes = {""file""};\n+        UrlValidator urlValidator = new UrlValidator(schemes);\n+        String fileOK = ""file:///bad ^ domain.com/label/test"";\n+        String fileNAK = ""file://bad ^ domain.com/label/test"";\n+        assertTrue(fileOK, urlValidator.isValid(fileOK));\n+        assertFalse(fileNAK, urlValidator.isValid(fileNAK));\n+    }\n+\n     static boolean incrementTestPartsIndex(int[] testPartsIndex, Object[] testParts) {\n       boolean carry = true;  //add 1 to lowest order part.\n       boolean maxIndex = true;'"
True,Delta,464,commons-validator,81d60ae98cfd5ae0bff1ccecb7654bdbc6bc2692,4ab18ec3e70f283fb98c72e3042553358ae85145,org.apache.commons.validator.routines.UrlValidatorTest.testValidator464,False,[],,,,org.apache.commons.validator.routines.urlvalidator.isvalid(string),"u'diff --git a/src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java b/src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java\nindex 7a40e3cc..b34a030b 100644\n--- a/src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java\n+++ b/src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java\n@@ -35,7 +35,7 @@ public class UrlValidatorTest extends TestCase {\n    }\n \n    @Override\n-protected void setUp() {\n+   protected void setUp() {\n       for (int index = 0; index < testPartsIndex.length - 1; index++) {\n          testPartsIndex[index] = 0;\n       }\n@@ -254,8 +254,7 @@ protected void setUp() {\n         assertTrue(""file:///c:/ should now be allowed"",\n                  validator.isValid(""file:///C:/some.file""));\n \n-        // Currently, we don\'t support the c:\\ form\n-        assertFalse(""file:///c:\\\\ shouldn\'t be allowed"",\n+        assertTrue(""file:///c:\\\\ should be allowed"",\n               validator.isValid(""file:///C:\\\\some.file""));\n \n         assertTrue(""file:///etc/ should now be allowed"",\n@@ -331,6 +330,15 @@ protected void setUp() {\n         assertFalse(urlValidator.isValid(""http://example.rocks:100000/""));\n     }\n \n+    public void testValidator464() {\n+        String[] schemes = {""file""};\n+        UrlValidator urlValidator = new UrlValidator(schemes);\n+        String fileOK = ""file:///bad ^ domain.com/label/test"";\n+        String fileNAK = ""file://bad ^ domain.com/label/test"";\n+        assertTrue(fileOK, urlValidator.isValid(fileOK));\n+        assertFalse(fileNAK, urlValidator.isValid(fileNAK));\n+    }\n+\n     static boolean incrementTestPartsIndex(int[] testPartsIndex, Object[] testParts) {\n       boolean carry = true;  //add 1 to lowest order part.\n       boolean maxIndex = true;'"
True,Delta,419,commons-validator,e2feaed85df37bc91fdeb59220c90fac2d3ade4b,e4a3737c6c07420ee7c27a968c443b04d71c3eaf,org.apache.commons.validator.routines.InetAddressValidatorTest.testVALIDATOR_419,False,[],,,,org.apache.commons.validator.routines.inetaddressvalidator.isvalidinet6address(string),"u'diff --git a/src/test/java/org/apache/commons/validator/routines/InetAddressValidatorTest.java b/src/test/java/org/apache/commons/validator/routines/InetAddressValidatorTest.java\nindex ba014e81..34dae8fd 100644\n--- a/src/test/java/org/apache/commons/validator/routines/InetAddressValidatorTest.java\n+++ b/src/test/java/org/apache/commons/validator/routines/InetAddressValidatorTest.java\n@@ -55,6 +55,23 @@ public class InetAddressValidatorTest extends TestCase {\n         assertTrue(""2001:0438:FFFE:0000:0000:0000:0000:0A35 should be valid"",       validator.isValid(""2001:0438:FFFE:0000:0000:0000:0000:0A35""));\n     }\n \n+    public void testVALIDATOR_419() {\n+        String addr;\n+        addr = ""0:0:0:0:0:0:13.1.68.3"";\n+        assertTrue(addr, validator.isValid(addr));\n+        addr = ""0:0:0:0:0:FFFF:129.144.52.38"";\n+        assertTrue(addr, validator.isValid(addr));\n+        addr = ""::13.1.68.3"";\n+        assertTrue(addr, validator.isValid(addr));\n+        addr = ""::FFFF:129.144.52.38"";\n+        assertTrue(addr, validator.isValid(addr));\n+\n+        addr = ""::ffff:192.168.1.1:192.168.1.1"";\n+        assertFalse(addr, validator.isValid(addr));\n+        addr = ""::192.168.1.1:192.168.1.1"";\n+        assertFalse(addr, validator.isValid(addr));\n+    }\n+\n     /**\n      * Test valid and invalid IPs from each address class.\n      */\n@@ -88,7 +105,7 @@ public class InetAddressValidatorTest extends TestCase {\n      */\n     public void testBrokenInetAddresses() {\n         assertFalse(""IP with characters should be invalid"",     validator.isValid(""124.14.32.abc""));\n-        assertFalse(""IP with leading zeroes should be invalid"", validator.isValid(""124.14.32.01""));\n+//        assertFalse(""IP with leading zeroes should be invalid"", validator.isValid(""124.14.32.01""));\n         assertFalse(""IP with three groups should be invalid"",   validator.isValid(""23.64.12""));\n         assertFalse(""IP with five groups should be invalid"",    validator.isValid(""26.34.23.77.234""));\n     }\n@@ -102,7 +119,7 @@ public class InetAddressValidatorTest extends TestCase {\n     public void testIPv6() {\n         // The original Perl script contained a lot of duplicate tests.\n         // I removed the duplicates I noticed, but there may be more.\n-        assertFalse(""IPV6 empty string should be invalid"", validator.isValidInet6Address(""""));// empty string \n+//        assertFalse(""IPV6 empty string should be invalid"", validator.isValidInet6Address(""""));// empty string \n         assertTrue(""IPV6 ::1 should be valid"", validator.isValidInet6Address(""::1""));// loopback, compressed, non-routable \n         assertTrue(""IPV6 :: should be valid"", validator.isValidInet6Address(""::""));// unspecified, compressed, non-routable \n         assertTrue(""IPV6 0:0:0:0:0:0:0:1 should be valid"", validator.isValidInet6Address(""0:0:0:0:0:0:0:1""));// loopback, full '"
True,Delta,419,commons-validator,e2feaed85df37bc91fdeb59220c90fac2d3ade4b,e4a3737c6c07420ee7c27a968c443b04d71c3eaf,org.apache.commons.validator.routines.InetAddressValidatorTest.testVALIDATOR_419,False,[],,,,org.apache.commons.validator.routines.inetaddressvalidator.isvalidinet6address(string),"u'diff --git a/src/test/java/org/apache/commons/validator/routines/InetAddressValidatorTest.java b/src/test/java/org/apache/commons/validator/routines/InetAddressValidatorTest.java\nindex ba014e81..34dae8fd 100644\n--- a/src/test/java/org/apache/commons/validator/routines/InetAddressValidatorTest.java\n+++ b/src/test/java/org/apache/commons/validator/routines/InetAddressValidatorTest.java\n@@ -55,6 +55,23 @@ public class InetAddressValidatorTest extends TestCase {\n         assertTrue(""2001:0438:FFFE:0000:0000:0000:0000:0A35 should be valid"",       validator.isValid(""2001:0438:FFFE:0000:0000:0000:0000:0A35""));\n     }\n \n+    public void testVALIDATOR_419() {\n+        String addr;\n+        addr = ""0:0:0:0:0:0:13.1.68.3"";\n+        assertTrue(addr, validator.isValid(addr));\n+        addr = ""0:0:0:0:0:FFFF:129.144.52.38"";\n+        assertTrue(addr, validator.isValid(addr));\n+        addr = ""::13.1.68.3"";\n+        assertTrue(addr, validator.isValid(addr));\n+        addr = ""::FFFF:129.144.52.38"";\n+        assertTrue(addr, validator.isValid(addr));\n+\n+        addr = ""::ffff:192.168.1.1:192.168.1.1"";\n+        assertFalse(addr, validator.isValid(addr));\n+        addr = ""::192.168.1.1:192.168.1.1"";\n+        assertFalse(addr, validator.isValid(addr));\n+    }\n+\n     /**\n      * Test valid and invalid IPs from each address class.\n      */\n@@ -88,7 +105,7 @@ public class InetAddressValidatorTest extends TestCase {\n      */\n     public void testBrokenInetAddresses() {\n         assertFalse(""IP with characters should be invalid"",     validator.isValid(""124.14.32.abc""));\n-        assertFalse(""IP with leading zeroes should be invalid"", validator.isValid(""124.14.32.01""));\n+//        assertFalse(""IP with leading zeroes should be invalid"", validator.isValid(""124.14.32.01""));\n         assertFalse(""IP with three groups should be invalid"",   validator.isValid(""23.64.12""));\n         assertFalse(""IP with five groups should be invalid"",    validator.isValid(""26.34.23.77.234""));\n     }\n@@ -102,7 +119,7 @@ public class InetAddressValidatorTest extends TestCase {\n     public void testIPv6() {\n         // The original Perl script contained a lot of duplicate tests.\n         // I removed the duplicates I noticed, but there may be more.\n-        assertFalse(""IPV6 empty string should be invalid"", validator.isValidInet6Address(""""));// empty string \n+//        assertFalse(""IPV6 empty string should be invalid"", validator.isValidInet6Address(""""));// empty string \n         assertTrue(""IPV6 ::1 should be valid"", validator.isValidInet6Address(""::1""));// loopback, compressed, non-routable \n         assertTrue(""IPV6 :: should be valid"", validator.isValidInet6Address(""::""));// unspecified, compressed, non-routable \n         assertTrue(""IPV6 0:0:0:0:0:0:0:1 should be valid"", validator.isValidInet6Address(""0:0:0:0:0:0:0:1""));// loopback, full '"
True,Regression,392,commons-validator,7431e024984957b5fc1e2092ca304cf786eca8ce,ecfd9ad84c9c4b7e1f09f7a8368f954f356e4e3b,org.apache.commons.validator.routines.CreditCardValidatorTest.testMastercardValidator,False,[],,,,org.apache.commons.validator.routines.creditcardvalidator.creditcardvalidator(long),"u'diff --git a/src/test/java/org/apache/commons/validator/routines/CreditCardValidatorTest.java b/src/test/java/org/apache/commons/validator/routines/CreditCardValidatorTest.java\nindex b1191deb..4443f99b 100644\n--- a/src/test/java/org/apache/commons/validator/routines/CreditCardValidatorTest.java\n+++ b/src/test/java/org/apache/commons/validator/routines/CreditCardValidatorTest.java\n@@ -384,6 +384,15 @@ public class CreditCardValidatorTest extends TestCase {\n         assertTrue(""Valid-C"",         validator.isValid(""5301250070000191""));\n         assertTrue(""Valid-D"",         validator.isValid(""5123456789012346""));\n         assertTrue(""Valid-E"",         validator.isValid(""5555555555554444""));\n+        \n+        RegexValidator rev = validator.getRegexValidator();\n+        final String PAD = ""0000000000"";\n+        assertFalse(""222099"",rev.isValid(""222099""+PAD));\n+        for(int i=222100; i <= 272099; i++) {\n+            String j = Integer.toString(i)+PAD;\n+            assertTrue(j, rev.isValid(j));\n+        }\n+        assertFalse(""272100"",rev.isValid(""272100""+PAD));\n     }\n \n     /**'"
True,Regression,392,commons-validator,7431e024984957b5fc1e2092ca304cf786eca8ce,ecfd9ad84c9c4b7e1f09f7a8368f954f356e4e3b,org.apache.commons.validator.routines.CreditCardValidatorTest.testMastercardValidator,False,[],,,,org.apache.commons.validator.routines.creditcardvalidator.creditcardvalidator(long),"u'diff --git a/src/test/java/org/apache/commons/validator/routines/CreditCardValidatorTest.java b/src/test/java/org/apache/commons/validator/routines/CreditCardValidatorTest.java\nindex b1191deb..4443f99b 100644\n--- a/src/test/java/org/apache/commons/validator/routines/CreditCardValidatorTest.java\n+++ b/src/test/java/org/apache/commons/validator/routines/CreditCardValidatorTest.java\n@@ -384,6 +384,15 @@ public class CreditCardValidatorTest extends TestCase {\n         assertTrue(""Valid-C"",         validator.isValid(""5301250070000191""));\n         assertTrue(""Valid-D"",         validator.isValid(""5123456789012346""));\n         assertTrue(""Valid-E"",         validator.isValid(""5555555555554444""));\n+        \n+        RegexValidator rev = validator.getRegexValidator();\n+        final String PAD = ""0000000000"";\n+        assertFalse(""222099"",rev.isValid(""222099""+PAD));\n+        for(int i=222100; i <= 272099; i++) {\n+            String j = Integer.toString(i)+PAD;\n+            assertTrue(j, rev.isValid(j));\n+        }\n+        assertFalse(""272100"",rev.isValid(""272100""+PAD));\n     }\n \n     /**'"
True,Regression,380,commons-validator,01fd9c792b8a2f3a7206d43c21d34de8135eaf6e,f398b292b3463ffdf104db050849de74962392d8,org.apache.commons.validator.routines.UrlValidatorTest.testValidator380,False,[],,,,org.apache.commons.validator.routines.urlvalidator.isvalidauthority(string)@org.apache.commons.validator.routines.urlvalidator.isvalid(string),"u'diff --git a/src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java b/src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java\nindex fea43a62..0d96a78e 100644\n--- a/src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java\n+++ b/src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java\n@@ -441,8 +441,7 @@ public class UrlValidatorTest extends TestCase {\n        UrlValidator validator = new UrlValidator();\n        assertTrue(validator.isValid(""http://www.apache.org:80/path""));       \n        assertTrue(validator.isValid(""http://www.apache.org:8/path"")); \n-       // To be enabled when code has been fixed\n-//       assertTrue(validator.isValid(""http://www.apache.org:/path""));\n+       assertTrue(validator.isValid(""http://www.apache.org:/path""));\n    }\n \n    /**'"
True,Regression,380,commons-validator,01fd9c792b8a2f3a7206d43c21d34de8135eaf6e,f398b292b3463ffdf104db050849de74962392d8,org.apache.commons.validator.routines.UrlValidatorTest.testValidator380,False,[],,,,org.apache.commons.validator.routines.urlvalidator.isvalidauthority(string)@org.apache.commons.validator.routines.urlvalidator.isvalid(string),"u'diff --git a/src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java b/src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java\nindex fea43a62..0d96a78e 100644\n--- a/src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java\n+++ b/src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java\n@@ -441,8 +441,7 @@ public class UrlValidatorTest extends TestCase {\n        UrlValidator validator = new UrlValidator();\n        assertTrue(validator.isValid(""http://www.apache.org:80/path""));       \n        assertTrue(validator.isValid(""http://www.apache.org:8/path"")); \n-       // To be enabled when code has been fixed\n-//       assertTrue(validator.isValid(""http://www.apache.org:/path""));\n+       assertTrue(validator.isValid(""http://www.apache.org:/path""));\n    }\n \n    /**'"
True,Delta,375,commons-validator,452c628c21466ec4f68d90921c8ebeab362fa17d,79c74067b3b43a4d2e04b054fcefda3da147d595,org.apache.commons.validator.routines.UrlValidatorTest.testValidator375,False,[],,,,org.apache.commons.validator.routines.urlvalidator.isvalidauthority(string),"u'diff --git a/src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java b/src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java\nindex 18688876..baabf600 100644\n--- a/src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java\n+++ b/src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java\n@@ -414,6 +414,16 @@ public class UrlValidatorTest extends TestCase {\n        assertTrue(validator.isValid(""http://hello.tokyo/""));\n     }\n \n+   public void testValidator375() {\n+       UrlValidator validator = new UrlValidator();\n+       String url = ""http://[FEDC:BA98:7654:3210:FEDC:BA98:7654:3210]:80/index.html"";\n+       assertTrue(""IPv6 address URL should validate: "" + url, validator.isValid(url));\n+       url = ""http://[::1]:80/index.html"";\n+       assertTrue(""IPv6 address URL should validate: "" + url, validator.isValid(url));\n+       url = ""http://FEDC:BA98:7654:3210:FEDC:BA98:7654:3210:80/index.html"";\n+       assertFalse(""IPv6 address without [] should not validate: "" + url, validator.isValid(url));\n+    }\n+\n    \n    /**\n     * Only used to debug the unit tests.'"
True,Delta,375,commons-validator,452c628c21466ec4f68d90921c8ebeab362fa17d,79c74067b3b43a4d2e04b054fcefda3da147d595,org.apache.commons.validator.routines.UrlValidatorTest.testValidator375,False,[],,,,org.apache.commons.validator.routines.urlvalidator.isvalidauthority(string),"u'diff --git a/src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java b/src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java\nindex 18688876..baabf600 100644\n--- a/src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java\n+++ b/src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java\n@@ -414,6 +414,16 @@ public class UrlValidatorTest extends TestCase {\n        assertTrue(validator.isValid(""http://hello.tokyo/""));\n     }\n \n+   public void testValidator375() {\n+       UrlValidator validator = new UrlValidator();\n+       String url = ""http://[FEDC:BA98:7654:3210:FEDC:BA98:7654:3210]:80/index.html"";\n+       assertTrue(""IPv6 address URL should validate: "" + url, validator.isValid(url));\n+       url = ""http://[::1]:80/index.html"";\n+       assertTrue(""IPv6 address URL should validate: "" + url, validator.isValid(url));\n+       url = ""http://FEDC:BA98:7654:3210:FEDC:BA98:7654:3210:80/index.html"";\n+       assertFalse(""IPv6 address without [] should not validate: "" + url, validator.isValid(url));\n+    }\n+\n    \n    /**\n     * Only used to debug the unit tests.'"
True,Delta,363,commons-validator,03bf0d33143ebd13e4f389cd4ecac8aec17c2057,f7c43cd216051aeff62194bfe1b98a7fe7f75c9f,org.apache.commons.validator.routines.UrlValidatorTest.testValidator363,False,[],,,,org.apache.commons.validator.routines.urlvalidator.isvalidpath(string),"u'diff --git a/src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java b/src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java\nindex 0d96a78e..b9b691cc 100644\n--- a/src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java\n+++ b/src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java\n@@ -414,6 +414,19 @@ public class UrlValidatorTest extends TestCase {\n        assertTrue(validator.isValid(""http://hello.tokyo/""));\n     }\n \n+   public void testValidator363(){\n+        UrlValidator urlValidator = new UrlValidator();\n+        assertTrue(urlValidator.isValid(""http://www.example.org/a/b/hello..world""));\n+        assertTrue(urlValidator.isValid(""http://www.example.org/a/hello..world""));\n+        assertTrue(urlValidator.isValid(""http://www.example.org/hello.world/""));\n+        assertTrue(urlValidator.isValid(""http://www.example.org/hello..world/""));\n+        assertTrue(urlValidator.isValid(""http://www.example.org/hello.world""));\n+        assertTrue(urlValidator.isValid(""http://www.example.org/hello..world""));\n+        assertTrue(urlValidator.isValid(""http://www.example.org/..world""));\n+        assertTrue(urlValidator.isValid(""http://www.example.org/.../world""));\n+        assertFalse(urlValidator.isValid(""http://www.example.org/../world""));\n+    }\n+\n    public void testValidator375() {\n        UrlValidator validator = new UrlValidator();\n        String url = ""http://[FEDC:BA98:7654:3210:FEDC:BA98:7654:3210]:80/index.html"";'"
True,Delta,363,commons-validator,03bf0d33143ebd13e4f389cd4ecac8aec17c2057,f7c43cd216051aeff62194bfe1b98a7fe7f75c9f,org.apache.commons.validator.routines.UrlValidatorTest.testValidator363,False,[],,,,org.apache.commons.validator.routines.urlvalidator.isvalidpath(string),"u'diff --git a/src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java b/src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java\nindex 0d96a78e..b9b691cc 100644\n--- a/src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java\n+++ b/src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java\n@@ -414,6 +414,19 @@ public class UrlValidatorTest extends TestCase {\n        assertTrue(validator.isValid(""http://hello.tokyo/""));\n     }\n \n+   public void testValidator363(){\n+        UrlValidator urlValidator = new UrlValidator();\n+        assertTrue(urlValidator.isValid(""http://www.example.org/a/b/hello..world""));\n+        assertTrue(urlValidator.isValid(""http://www.example.org/a/hello..world""));\n+        assertTrue(urlValidator.isValid(""http://www.example.org/hello.world/""));\n+        assertTrue(urlValidator.isValid(""http://www.example.org/hello..world/""));\n+        assertTrue(urlValidator.isValid(""http://www.example.org/hello.world""));\n+        assertTrue(urlValidator.isValid(""http://www.example.org/hello..world""));\n+        assertTrue(urlValidator.isValid(""http://www.example.org/..world""));\n+        assertTrue(urlValidator.isValid(""http://www.example.org/.../world""));\n+        assertFalse(urlValidator.isValid(""http://www.example.org/../world""));\n+    }\n+\n    public void testValidator375() {\n        UrlValidator validator = new UrlValidator();\n        String url = ""http://[FEDC:BA98:7654:3210:FEDC:BA98:7654:3210]:80/index.html"";'"
True,Regression,362,commons-validator,edad71ad47d5f78d7cc93f2f281bfb3b60c56200,67400d1f19d499df3e3701dbde57e521bff75d9c,org.apache.commons.validator.routines.EmailValidatorTest.testEmailUserName,False,[],,,,org.apache.commons.validator.routines.emailvalidator.isvaliduser(string),"u'diff --git a/src/test/java/org/apache/commons/validator/routines/EmailValidatorTest.java b/src/test/java/org/apache/commons/validator/routines/EmailValidatorTest.java\nindex d228e265..24d2b5ca 100644\n--- a/src/test/java/org/apache/commons/validator/routines/EmailValidatorTest.java\n+++ b/src/test/java/org/apache/commons/validator/routines/EmailValidatorTest.java\n@@ -367,6 +367,7 @@ public class EmailValidatorTest extends TestCase {\n \n         assertTrue(validator.isValid(""\\""..\\""@apache.org""));\n \n+        assertFalse(validator.isValid(""john56789.john56789.john56789.john56789.john56789.john56789.john5@example.com""));\n     }\n \n     /**'"
True,Regression,362,commons-validator,edad71ad47d5f78d7cc93f2f281bfb3b60c56200,67400d1f19d499df3e3701dbde57e521bff75d9c,org.apache.commons.validator.routines.EmailValidatorTest.testEmailUserName,False,[],,,,org.apache.commons.validator.routines.emailvalidator.isvaliduser(string),"u'diff --git a/src/test/java/org/apache/commons/validator/routines/EmailValidatorTest.java b/src/test/java/org/apache/commons/validator/routines/EmailValidatorTest.java\nindex d228e265..24d2b5ca 100644\n--- a/src/test/java/org/apache/commons/validator/routines/EmailValidatorTest.java\n+++ b/src/test/java/org/apache/commons/validator/routines/EmailValidatorTest.java\n@@ -367,6 +367,7 @@ public class EmailValidatorTest extends TestCase {\n \n         assertTrue(validator.isValid(""\\""..\\""@apache.org""));\n \n+        assertFalse(validator.isValid(""john56789.john56789.john56789.john56789.john56789.john56789.john5@example.com""));\n     }\n \n     /**'"
True,Delta,359,commons-validator,05de0f3b3b7ef1785c4e80c14c3009d73230c5d5,8e4ffb044bc78cb8c317e14e9c25b0affc28df73,org.apache.commons.validator.routines.EmailValidatorTest.testValidator359,False,[],,,,org.apache.commons.validator.routines.emailvalidator.isvaliddomain(string),"u'diff --git a/src/test/java/org/apache/commons/validator/routines/EmailValidatorTest.java b/src/test/java/org/apache/commons/validator/routines/EmailValidatorTest.java\nindex eb165933..8c75d288 100644\n--- a/src/test/java/org/apache/commons/validator/routines/EmailValidatorTest.java\n+++ b/src/test/java/org/apache/commons/validator/routines/EmailValidatorTest.java\n@@ -509,6 +509,23 @@ public class EmailValidatorTest extends TestCase {\n                 ""Maecenaspharetraeuismodmetusegetefficitur.Suspendisseamet@gmail.com""));\n     }\n \n+    /**\n+     * Tests the e-mail validation with a user at a TLD\n+     *\n+     * http://tools.ietf.org/html/rfc5321#section-2.3.5\n+     * (In the case of a top-level domain used by itself in an\n+     * email address, a single string is used without any dots)\n+     */\n+    public void testEmailAtTLD() {\n+        EmailValidator val = EmailValidator.getInstance(false, true);\n+        assertTrue(val.isValid(""test@com""));\n+    }\n+\n+    public void testValidator359() {\n+        EmailValidator val = EmailValidator.getInstance(false, true);\n+        assertFalse(val.isValid(""test@.com""));\n+    }\n+\n     public void testValidator374() {\n         assertTrue(validator.isValid(""abc@school.school""));\n     }'"
True,Delta,359,commons-validator,05de0f3b3b7ef1785c4e80c14c3009d73230c5d5,8e4ffb044bc78cb8c317e14e9c25b0affc28df73,org.apache.commons.validator.routines.EmailValidatorTest.testValidator359,False,[],,,,org.apache.commons.validator.routines.emailvalidator.isvaliddomain(string),"u'diff --git a/src/test/java/org/apache/commons/validator/routines/EmailValidatorTest.java b/src/test/java/org/apache/commons/validator/routines/EmailValidatorTest.java\nindex eb165933..8c75d288 100644\n--- a/src/test/java/org/apache/commons/validator/routines/EmailValidatorTest.java\n+++ b/src/test/java/org/apache/commons/validator/routines/EmailValidatorTest.java\n@@ -509,6 +509,23 @@ public class EmailValidatorTest extends TestCase {\n                 ""Maecenaspharetraeuismodmetusegetefficitur.Suspendisseamet@gmail.com""));\n     }\n \n+    /**\n+     * Tests the e-mail validation with a user at a TLD\n+     *\n+     * http://tools.ietf.org/html/rfc5321#section-2.3.5\n+     * (In the case of a top-level domain used by itself in an\n+     * email address, a single string is used without any dots)\n+     */\n+    public void testEmailAtTLD() {\n+        EmailValidator val = EmailValidator.getInstance(false, true);\n+        assertTrue(val.isValid(""test@com""));\n+    }\n+\n+    public void testValidator359() {\n+        EmailValidator val = EmailValidator.getInstance(false, true);\n+        assertFalse(val.isValid(""test@.com""));\n+    }\n+\n     public void testValidator374() {\n         assertTrue(validator.isValid(""abc@school.school""));\n     }'"
True,Delta,309,commons-validator,e112f14bd993510c1a6539d9c9a9864a03060f48,848f7c0f88f2d92cd8d2f63404f2564a1bd7697c,org.apache.commons.validator.routines.UrlValidatorTest.testValidator309,False,[],,,,org.apache.commons.validator.routines.urlvalidator.isvalidscheme(string),"u'diff --git a/src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java b/src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java\nindex 8075bf0f..6d6791ab 100644\n--- a/src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java\n+++ b/src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java\n@@ -55,7 +55,6 @@ public class UrlValidatorTest extends TestCase {\n       if (printStatus) {\n          System.out.print(""\\n testIsValidScheme() "");\n       }\n-      String[] schemes = {""http"", ""gopher""};\n       //UrlValidator urlVal = new UrlValidator(schemes,false,false,false);\n       UrlValidator urlVal = new UrlValidator(schemes, 0);\n       for (int sIndex = 0; sIndex < testScheme.length; sIndex++) {\n@@ -261,6 +260,17 @@ public class UrlValidatorTest extends TestCase {\n     }\n \n     \n+    public void testValidator309() {\n+        UrlValidator urlValidator = new UrlValidator();\n+        assertTrue(urlValidator.isValid(""http://sample.ondemand.com/""));\n+        assertTrue(urlValidator.isValid(""hTtP://sample.ondemand.CoM/""));\n+        assertTrue(urlValidator.isValid(""httpS://SAMPLE.ONEMAND.COM/""));\n+        urlValidator = new UrlValidator(new String[] {""HTTP"",""HTTPS""});\n+        assertTrue(urlValidator.isValid(""http://sample.ondemand.com/""));\n+        assertTrue(urlValidator.isValid(""hTtP://sample.ondemand.CoM/""));\n+        assertTrue(urlValidator.isValid(""httpS://SAMPLE.ONEMAND.COM/""));\n+    }\n+\n    static boolean incrementTestPartsIndex(int[] testPartsIndex, Object[] testParts) {\n       boolean carry = true;  //add 1 to lowest order part.\n       boolean maxIndex = true;\n@@ -399,9 +409,17 @@ public class UrlValidatorTest extends TestCase {\n    int[] testPartsIndex = {0, 0, 0, 0, 0};\n \n    //---------------- Test data for individual url parts ----------------\n+   private final String[] schemes = {""http"", ""gopher"", ""g0-To+."",\n+                                      ""not_valid"" // TODO this will need to be dropped if the ctor validates schemes\n+                                    };\n+\n    ResultPair[] testScheme = {new ResultPair(""http"", true),\n                             new ResultPair(""ftp"", false),\n                             new ResultPair(""httpd"", false),\n+                            new ResultPair(""gopher"", true),\n+                            new ResultPair(""g0-to+."", true),\n+                            new ResultPair(""not_valid"", false), // underscore not allowed\n+                            new ResultPair(""HtTp"", true),\n                             new ResultPair(""telnet"", false)};\n \n '"
True,Regression,309,commons-validator,e112f14bd993510c1a6539d9c9a9864a03060f48,848f7c0f88f2d92cd8d2f63404f2564a1bd7697c,org.apache.commons.validator.routines.UrlValidatorTest.testIsValidScheme,False,[],,,,org.apache.commons.validator.routines.urlvalidator.isvalidscheme(string),"u'diff --git a/src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java b/src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java\nindex 8075bf0f..6d6791ab 100644\n--- a/src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java\n+++ b/src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java\n@@ -55,7 +55,6 @@ public class UrlValidatorTest extends TestCase {\n       if (printStatus) {\n          System.out.print(""\\n testIsValidScheme() "");\n       }\n-      String[] schemes = {""http"", ""gopher""};\n       //UrlValidator urlVal = new UrlValidator(schemes,false,false,false);\n       UrlValidator urlVal = new UrlValidator(schemes, 0);\n       for (int sIndex = 0; sIndex < testScheme.length; sIndex++) {\n@@ -261,6 +260,17 @@ public class UrlValidatorTest extends TestCase {\n     }\n \n     \n+    public void testValidator309() {\n+        UrlValidator urlValidator = new UrlValidator();\n+        assertTrue(urlValidator.isValid(""http://sample.ondemand.com/""));\n+        assertTrue(urlValidator.isValid(""hTtP://sample.ondemand.CoM/""));\n+        assertTrue(urlValidator.isValid(""httpS://SAMPLE.ONEMAND.COM/""));\n+        urlValidator = new UrlValidator(new String[] {""HTTP"",""HTTPS""});\n+        assertTrue(urlValidator.isValid(""http://sample.ondemand.com/""));\n+        assertTrue(urlValidator.isValid(""hTtP://sample.ondemand.CoM/""));\n+        assertTrue(urlValidator.isValid(""httpS://SAMPLE.ONEMAND.COM/""));\n+    }\n+\n    static boolean incrementTestPartsIndex(int[] testPartsIndex, Object[] testParts) {\n       boolean carry = true;  //add 1 to lowest order part.\n       boolean maxIndex = true;\n@@ -399,9 +409,17 @@ public class UrlValidatorTest extends TestCase {\n    int[] testPartsIndex = {0, 0, 0, 0, 0};\n \n    //---------------- Test data for individual url parts ----------------\n+   private final String[] schemes = {""http"", ""gopher"", ""g0-To+."",\n+                                      ""not_valid"" // TODO this will need to be dropped if the ctor validates schemes\n+                                    };\n+\n    ResultPair[] testScheme = {new ResultPair(""http"", true),\n                             new ResultPair(""ftp"", false),\n                             new ResultPair(""httpd"", false),\n+                            new ResultPair(""gopher"", true),\n+                            new ResultPair(""g0-to+."", true),\n+                            new ResultPair(""not_valid"", false), // underscore not allowed\n+                            new ResultPair(""HtTp"", true),\n                             new ResultPair(""telnet"", false)};\n \n '"
True,Regression,309,commons-validator,e112f14bd993510c1a6539d9c9a9864a03060f48,848f7c0f88f2d92cd8d2f63404f2564a1bd7697c,org.apache.commons.validator.routines.UrlValidatorTest.testIsValidScheme,False,[],,,,org.apache.commons.validator.routines.urlvalidator.isvalidscheme(string),"u'diff --git a/src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java b/src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java\nindex 8075bf0f..6d6791ab 100644\n--- a/src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java\n+++ b/src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java\n@@ -55,7 +55,6 @@ public class UrlValidatorTest extends TestCase {\n       if (printStatus) {\n          System.out.print(""\\n testIsValidScheme() "");\n       }\n-      String[] schemes = {""http"", ""gopher""};\n       //UrlValidator urlVal = new UrlValidator(schemes,false,false,false);\n       UrlValidator urlVal = new UrlValidator(schemes, 0);\n       for (int sIndex = 0; sIndex < testScheme.length; sIndex++) {\n@@ -261,6 +260,17 @@ public class UrlValidatorTest extends TestCase {\n     }\n \n     \n+    public void testValidator309() {\n+        UrlValidator urlValidator = new UrlValidator();\n+        assertTrue(urlValidator.isValid(""http://sample.ondemand.com/""));\n+        assertTrue(urlValidator.isValid(""hTtP://sample.ondemand.CoM/""));\n+        assertTrue(urlValidator.isValid(""httpS://SAMPLE.ONEMAND.COM/""));\n+        urlValidator = new UrlValidator(new String[] {""HTTP"",""HTTPS""});\n+        assertTrue(urlValidator.isValid(""http://sample.ondemand.com/""));\n+        assertTrue(urlValidator.isValid(""hTtP://sample.ondemand.CoM/""));\n+        assertTrue(urlValidator.isValid(""httpS://SAMPLE.ONEMAND.COM/""));\n+    }\n+\n    static boolean incrementTestPartsIndex(int[] testPartsIndex, Object[] testParts) {\n       boolean carry = true;  //add 1 to lowest order part.\n       boolean maxIndex = true;\n@@ -399,9 +409,17 @@ public class UrlValidatorTest extends TestCase {\n    int[] testPartsIndex = {0, 0, 0, 0, 0};\n \n    //---------------- Test data for individual url parts ----------------\n+   private final String[] schemes = {""http"", ""gopher"", ""g0-To+."",\n+                                      ""not_valid"" // TODO this will need to be dropped if the ctor validates schemes\n+                                    };\n+\n    ResultPair[] testScheme = {new ResultPair(""http"", true),\n                             new ResultPair(""ftp"", false),\n                             new ResultPair(""httpd"", false),\n+                            new ResultPair(""gopher"", true),\n+                            new ResultPair(""g0-to+."", true),\n+                            new ResultPair(""not_valid"", false), // underscore not allowed\n+                            new ResultPair(""HtTp"", true),\n                             new ResultPair(""telnet"", false)};\n \n '"
True,Delta,309,commons-validator,e112f14bd993510c1a6539d9c9a9864a03060f48,848f7c0f88f2d92cd8d2f63404f2564a1bd7697c,org.apache.commons.validator.routines.UrlValidatorTest.testValidator309,False,[],,,,org.apache.commons.validator.routines.urlvalidator.isvalidscheme(string),"u'diff --git a/src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java b/src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java\nindex 8075bf0f..6d6791ab 100644\n--- a/src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java\n+++ b/src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java\n@@ -55,7 +55,6 @@ public class UrlValidatorTest extends TestCase {\n       if (printStatus) {\n          System.out.print(""\\n testIsValidScheme() "");\n       }\n-      String[] schemes = {""http"", ""gopher""};\n       //UrlValidator urlVal = new UrlValidator(schemes,false,false,false);\n       UrlValidator urlVal = new UrlValidator(schemes, 0);\n       for (int sIndex = 0; sIndex < testScheme.length; sIndex++) {\n@@ -261,6 +260,17 @@ public class UrlValidatorTest extends TestCase {\n     }\n \n     \n+    public void testValidator309() {\n+        UrlValidator urlValidator = new UrlValidator();\n+        assertTrue(urlValidator.isValid(""http://sample.ondemand.com/""));\n+        assertTrue(urlValidator.isValid(""hTtP://sample.ondemand.CoM/""));\n+        assertTrue(urlValidator.isValid(""httpS://SAMPLE.ONEMAND.COM/""));\n+        urlValidator = new UrlValidator(new String[] {""HTTP"",""HTTPS""});\n+        assertTrue(urlValidator.isValid(""http://sample.ondemand.com/""));\n+        assertTrue(urlValidator.isValid(""hTtP://sample.ondemand.CoM/""));\n+        assertTrue(urlValidator.isValid(""httpS://SAMPLE.ONEMAND.COM/""));\n+    }\n+\n    static boolean incrementTestPartsIndex(int[] testPartsIndex, Object[] testParts) {\n       boolean carry = true;  //add 1 to lowest order part.\n       boolean maxIndex = true;\n@@ -399,9 +409,17 @@ public class UrlValidatorTest extends TestCase {\n    int[] testPartsIndex = {0, 0, 0, 0, 0};\n \n    //---------------- Test data for individual url parts ----------------\n+   private final String[] schemes = {""http"", ""gopher"", ""g0-To+."",\n+                                      ""not_valid"" // TODO this will need to be dropped if the ctor validates schemes\n+                                    };\n+\n    ResultPair[] testScheme = {new ResultPair(""http"", true),\n                             new ResultPair(""ftp"", false),\n                             new ResultPair(""httpd"", false),\n+                            new ResultPair(""gopher"", true),\n+                            new ResultPair(""g0-to+."", true),\n+                            new ResultPair(""not_valid"", false), // underscore not allowed\n+                            new ResultPair(""HtTp"", true),\n                             new ResultPair(""telnet"", false)};\n \n '"
True,Regression,308,commons-validator,562c880b48b56d6cef6095be3f4793141fd9fa24,27ee44fb05078102402c2b7be6ab7864063dccf6,org.apache.commons.validator.util.FlagsTest.testTurnOnAll,False,[],,,,org.apache.commons.validator.util.flags.ison(long),"u'diff --git a/src/test/java/org/apache/commons/validator/util/FlagsTest.java b/src/test/java/org/apache/commons/validator/util/FlagsTest.java\nindex a09544ed..9ae88c08 100644\n--- a/src/test/java/org/apache/commons/validator/util/FlagsTest.java\n+++ b/src/test/java/org/apache/commons/validator/util/FlagsTest.java\n@@ -83,7 +83,21 @@ public class FlagsTest extends TestCase {\n     public void testTurnOnAll() {\n         Flags f = new Flags();\n         f.turnOnAll();\n-        assertEquals(Long.MAX_VALUE, f.getFlags());\n+        assertEquals(~0, f.getFlags());\n+    }\n+\n+    public void testIsOn_isFalseWhenNotAllFlagsInArgumentAreOn() {\n+        Flags first = new Flags(1);\n+        long firstAndSecond = 3;\n+        \n+        assertFalse(first.isOn(firstAndSecond)); \n+    }\n+\n+    public void testIsOn_isTrueWhenHighOrderBitIsSetAndQueried() {\n+        Flags allOn = new Flags(~0);\n+        long highOrderBit = 0x8000000000000000L;\n+        \n+        assertTrue(allOn.isOn(highOrderBit));\n     }\n \n     /**'"
True,Delta,308,commons-validator,562c880b48b56d6cef6095be3f4793141fd9fa24,27ee44fb05078102402c2b7be6ab7864063dccf6,org.apache.commons.validator.util.FlagsTest.testIsOn_isTrueWhenHighOrderBitIsSetAndQueried,False,[],,,,org.apache.commons.validator.util.flags.ison(long),"u'diff --git a/src/test/java/org/apache/commons/validator/util/FlagsTest.java b/src/test/java/org/apache/commons/validator/util/FlagsTest.java\nindex a09544ed..9ae88c08 100644\n--- a/src/test/java/org/apache/commons/validator/util/FlagsTest.java\n+++ b/src/test/java/org/apache/commons/validator/util/FlagsTest.java\n@@ -83,7 +83,21 @@ public class FlagsTest extends TestCase {\n     public void testTurnOnAll() {\n         Flags f = new Flags();\n         f.turnOnAll();\n-        assertEquals(Long.MAX_VALUE, f.getFlags());\n+        assertEquals(~0, f.getFlags());\n+    }\n+\n+    public void testIsOn_isFalseWhenNotAllFlagsInArgumentAreOn() {\n+        Flags first = new Flags(1);\n+        long firstAndSecond = 3;\n+        \n+        assertFalse(first.isOn(firstAndSecond)); \n+    }\n+\n+    public void testIsOn_isTrueWhenHighOrderBitIsSetAndQueried() {\n+        Flags allOn = new Flags(~0);\n+        long highOrderBit = 0x8000000000000000L;\n+        \n+        assertTrue(allOn.isOn(highOrderBit));\n     }\n \n     /**'"
True,Delta,308,commons-validator,562c880b48b56d6cef6095be3f4793141fd9fa24,27ee44fb05078102402c2b7be6ab7864063dccf6,org.apache.commons.validator.util.FlagsTest.testIsOn_isFalseWhenNotAllFlagsInArgumentAreOn,False,[],,,,org.apache.commons.validator.util.flags.ison(long),"u'diff --git a/src/test/java/org/apache/commons/validator/util/FlagsTest.java b/src/test/java/org/apache/commons/validator/util/FlagsTest.java\nindex a09544ed..9ae88c08 100644\n--- a/src/test/java/org/apache/commons/validator/util/FlagsTest.java\n+++ b/src/test/java/org/apache/commons/validator/util/FlagsTest.java\n@@ -83,7 +83,21 @@ public class FlagsTest extends TestCase {\n     public void testTurnOnAll() {\n         Flags f = new Flags();\n         f.turnOnAll();\n-        assertEquals(Long.MAX_VALUE, f.getFlags());\n+        assertEquals(~0, f.getFlags());\n+    }\n+\n+    public void testIsOn_isFalseWhenNotAllFlagsInArgumentAreOn() {\n+        Flags first = new Flags(1);\n+        long firstAndSecond = 3;\n+        \n+        assertFalse(first.isOn(firstAndSecond)); \n+    }\n+\n+    public void testIsOn_isTrueWhenHighOrderBitIsSetAndQueried() {\n+        Flags allOn = new Flags(~0);\n+        long highOrderBit = 0x8000000000000000L;\n+        \n+        assertTrue(allOn.isOn(highOrderBit));\n     }\n \n     /**'"
True,Delta,308,commons-validator,562c880b48b56d6cef6095be3f4793141fd9fa24,27ee44fb05078102402c2b7be6ab7864063dccf6,org.apache.commons.validator.util.FlagsTest.testIsOn_isFalseWhenNotAllFlagsInArgumentAreOn,False,[],,,,org.apache.commons.validator.util.flags.ison(long),"u'diff --git a/src/test/java/org/apache/commons/validator/util/FlagsTest.java b/src/test/java/org/apache/commons/validator/util/FlagsTest.java\nindex a09544ed..9ae88c08 100644\n--- a/src/test/java/org/apache/commons/validator/util/FlagsTest.java\n+++ b/src/test/java/org/apache/commons/validator/util/FlagsTest.java\n@@ -83,7 +83,21 @@ public class FlagsTest extends TestCase {\n     public void testTurnOnAll() {\n         Flags f = new Flags();\n         f.turnOnAll();\n-        assertEquals(Long.MAX_VALUE, f.getFlags());\n+        assertEquals(~0, f.getFlags());\n+    }\n+\n+    public void testIsOn_isFalseWhenNotAllFlagsInArgumentAreOn() {\n+        Flags first = new Flags(1);\n+        long firstAndSecond = 3;\n+        \n+        assertFalse(first.isOn(firstAndSecond)); \n+    }\n+\n+    public void testIsOn_isTrueWhenHighOrderBitIsSetAndQueried() {\n+        Flags allOn = new Flags(~0);\n+        long highOrderBit = 0x8000000000000000L;\n+        \n+        assertTrue(allOn.isOn(highOrderBit));\n     }\n \n     /**'"
True,Regression,308,commons-validator,562c880b48b56d6cef6095be3f4793141fd9fa24,27ee44fb05078102402c2b7be6ab7864063dccf6,org.apache.commons.validator.util.FlagsTest.testTurnOnAll,False,[],,,,org.apache.commons.validator.util.flags.ison(long),"u'diff --git a/src/test/java/org/apache/commons/validator/util/FlagsTest.java b/src/test/java/org/apache/commons/validator/util/FlagsTest.java\nindex a09544ed..9ae88c08 100644\n--- a/src/test/java/org/apache/commons/validator/util/FlagsTest.java\n+++ b/src/test/java/org/apache/commons/validator/util/FlagsTest.java\n@@ -83,7 +83,21 @@ public class FlagsTest extends TestCase {\n     public void testTurnOnAll() {\n         Flags f = new Flags();\n         f.turnOnAll();\n-        assertEquals(Long.MAX_VALUE, f.getFlags());\n+        assertEquals(~0, f.getFlags());\n+    }\n+\n+    public void testIsOn_isFalseWhenNotAllFlagsInArgumentAreOn() {\n+        Flags first = new Flags(1);\n+        long firstAndSecond = 3;\n+        \n+        assertFalse(first.isOn(firstAndSecond)); \n+    }\n+\n+    public void testIsOn_isTrueWhenHighOrderBitIsSetAndQueried() {\n+        Flags allOn = new Flags(~0);\n+        long highOrderBit = 0x8000000000000000L;\n+        \n+        assertTrue(allOn.isOn(highOrderBit));\n     }\n \n     /**'"
True,Delta,308,commons-validator,562c880b48b56d6cef6095be3f4793141fd9fa24,27ee44fb05078102402c2b7be6ab7864063dccf6,org.apache.commons.validator.util.FlagsTest.testIsOn_isTrueWhenHighOrderBitIsSetAndQueried,False,[],,,,org.apache.commons.validator.util.flags.ison(long),"u'diff --git a/src/test/java/org/apache/commons/validator/util/FlagsTest.java b/src/test/java/org/apache/commons/validator/util/FlagsTest.java\nindex a09544ed..9ae88c08 100644\n--- a/src/test/java/org/apache/commons/validator/util/FlagsTest.java\n+++ b/src/test/java/org/apache/commons/validator/util/FlagsTest.java\n@@ -83,7 +83,21 @@ public class FlagsTest extends TestCase {\n     public void testTurnOnAll() {\n         Flags f = new Flags();\n         f.turnOnAll();\n-        assertEquals(Long.MAX_VALUE, f.getFlags());\n+        assertEquals(~0, f.getFlags());\n+    }\n+\n+    public void testIsOn_isFalseWhenNotAllFlagsInArgumentAreOn() {\n+        Flags first = new Flags(1);\n+        long firstAndSecond = 3;\n+        \n+        assertFalse(first.isOn(firstAndSecond)); \n+    }\n+\n+    public void testIsOn_isTrueWhenHighOrderBitIsSetAndQueried() {\n+        Flags allOn = new Flags(~0);\n+        long highOrderBit = 0x8000000000000000L;\n+        \n+        assertTrue(allOn.isOn(highOrderBit));\n     }\n \n     /**'"
True,Delta,306,commons-validator,0aa433359c222fb8e0e5a4f77bd67fc1cbeaa21b,07e0466c3bfbfee16e500f2d329206842575d690,org.apache.commons.validator.routines.DomainValidatorTest.testValidator306,False,[],,,,org.apache.commons.validator.routines.domainvalidator.isvalid(string)@org.apache.commons.validator.routines.domainvalidator.isvaliddomainsyntax(string),"u'diff --git a/src/test/java/org/apache/commons/validator/routines/DomainValidatorTest.java b/src/test/java/org/apache/commons/validator/routines/DomainValidatorTest.java\nindex ee9b60d9..07f8874e 100644\n--- a/src/test/java/org/apache/commons/validator/routines/DomainValidatorTest.java\n+++ b/src/test/java/org/apache/commons/validator/routines/DomainValidatorTest.java\n@@ -163,6 +163,28 @@ public class DomainValidatorTest extends TestCase {\n         assertTrue(""xn--d1abbgf6aiiy.xn--p1ai should validate"", validator.isValid(""xn--d1abbgf6aiiy.xn--p1ai"")); // This uses a valid TLD\n      }\n \n+    // labels are a max of 63 chars and domains 253\n+    public void testValidator306() {\n+        final String longString = ""abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz0123456789A"";\n+        assertEquals(63, longString.length()); // 26 * 2 + 11\n+        \n+        assertTrue(""63 chars label should validate"", validator.isValidDomainSyntax(longString+"".com""));\n+        assertFalse(""64 chars label should fail"", validator.isValidDomainSyntax(longString+""x.com""));\n+\n+        assertTrue(""63 chars TLD should validate"", validator.isValidDomainSyntax(""test.""+longString));\n+        assertFalse(""64 chars TLD should fail"", validator.isValidDomainSyntax(""test.x""+longString));\n+        \n+        final String longDomain = \n+                longString\n+                + ""."" + longString\n+                + ""."" + longString\n+                + ""."" + longString.substring(0,61)\n+                ; \n+        assertEquals(253, longDomain.length());\n+        assertTrue(""253 chars domain should validate"", validator.isValidDomainSyntax(longDomain));\n+        assertFalse(""254 chars domain should fail"", validator.isValidDomainSyntax(longDomain+""x""));\n+    }\n+\n     // Check array is sorted and is lower-case\n     public void test_INFRASTRUCTURE_TLDS_sortedAndLowerCase() throws Exception {\n         final boolean sorted = isSortedLowerCase(""INFRASTRUCTURE_TLDS"");\ndiff --git a/src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java b/src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java\nindex 18d5aa05..743f382c 100644\n--- a/src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java\n+++ b/src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java\n@@ -127,7 +127,7 @@ public class UrlValidatorTest extends TestCase {\n    public void testValidator202() {\n        String[] schemes = {""http"",""https""};\n        UrlValidator urlValidator = new UrlValidator(schemes, UrlValidator.NO_FRAGMENTS);\n-       assertTrue(urlValidator.isValid(""http://www.logoworks.comwww.logoworks.comwww.logoworks.comwww.logoworks.comwww.logoworks.comwww.logoworks.comwww.logoworks.comwww.logoworks.comwww.logoworks.comwww.logoworks.comwww.logoworks.comwww.logoworks.comwww.logoworks.comwww.logoworks.comwww.logoworks.comwww.logoworks.comwww.logoworks.comwww.logoworks.comwww.logoworks.comwww.logoworks.comwww.logoworks.comwww.logoworks.comwww.logoworks.comwww.logoworks.comwww.logoworks.comwww.logoworks.comwww.logoworks.comwww.logoworks.comwww.logoworks.comwww.org""));\n+       assertTrue(urlValidator.isValid(""http://l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.org""));\n    }\n \n    public void testValidator204() {'"
True,Delta,306,commons-validator,0aa433359c222fb8e0e5a4f77bd67fc1cbeaa21b,07e0466c3bfbfee16e500f2d329206842575d690,org.apache.commons.validator.routines.DomainValidatorTest.testValidator306,False,[],,,,org.apache.commons.validator.routines.domainvalidator.isvalid(string)@org.apache.commons.validator.routines.domainvalidator.isvaliddomainsyntax(string),"u'diff --git a/src/test/java/org/apache/commons/validator/routines/DomainValidatorTest.java b/src/test/java/org/apache/commons/validator/routines/DomainValidatorTest.java\nindex ee9b60d9..07f8874e 100644\n--- a/src/test/java/org/apache/commons/validator/routines/DomainValidatorTest.java\n+++ b/src/test/java/org/apache/commons/validator/routines/DomainValidatorTest.java\n@@ -163,6 +163,28 @@ public class DomainValidatorTest extends TestCase {\n         assertTrue(""xn--d1abbgf6aiiy.xn--p1ai should validate"", validator.isValid(""xn--d1abbgf6aiiy.xn--p1ai"")); // This uses a valid TLD\n      }\n \n+    // labels are a max of 63 chars and domains 253\n+    public void testValidator306() {\n+        final String longString = ""abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz0123456789A"";\n+        assertEquals(63, longString.length()); // 26 * 2 + 11\n+        \n+        assertTrue(""63 chars label should validate"", validator.isValidDomainSyntax(longString+"".com""));\n+        assertFalse(""64 chars label should fail"", validator.isValidDomainSyntax(longString+""x.com""));\n+\n+        assertTrue(""63 chars TLD should validate"", validator.isValidDomainSyntax(""test.""+longString));\n+        assertFalse(""64 chars TLD should fail"", validator.isValidDomainSyntax(""test.x""+longString));\n+        \n+        final String longDomain = \n+                longString\n+                + ""."" + longString\n+                + ""."" + longString\n+                + ""."" + longString.substring(0,61)\n+                ; \n+        assertEquals(253, longDomain.length());\n+        assertTrue(""253 chars domain should validate"", validator.isValidDomainSyntax(longDomain));\n+        assertFalse(""254 chars domain should fail"", validator.isValidDomainSyntax(longDomain+""x""));\n+    }\n+\n     // Check array is sorted and is lower-case\n     public void test_INFRASTRUCTURE_TLDS_sortedAndLowerCase() throws Exception {\n         final boolean sorted = isSortedLowerCase(""INFRASTRUCTURE_TLDS"");\ndiff --git a/src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java b/src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java\nindex 18d5aa05..743f382c 100644\n--- a/src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java\n+++ b/src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java\n@@ -127,7 +127,7 @@ public class UrlValidatorTest extends TestCase {\n    public void testValidator202() {\n        String[] schemes = {""http"",""https""};\n        UrlValidator urlValidator = new UrlValidator(schemes, UrlValidator.NO_FRAGMENTS);\n-       assertTrue(urlValidator.isValid(""http://www.logoworks.comwww.logoworks.comwww.logoworks.comwww.logoworks.comwww.logoworks.comwww.logoworks.comwww.logoworks.comwww.logoworks.comwww.logoworks.comwww.logoworks.comwww.logoworks.comwww.logoworks.comwww.logoworks.comwww.logoworks.comwww.logoworks.comwww.logoworks.comwww.logoworks.comwww.logoworks.comwww.logoworks.comwww.logoworks.comwww.logoworks.comwww.logoworks.comwww.logoworks.comwww.logoworks.comwww.logoworks.comwww.logoworks.comwww.logoworks.comwww.logoworks.comwww.logoworks.comwww.org""));\n+       assertTrue(urlValidator.isValid(""http://l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.org""));\n    }\n \n    public void testValidator204() {'"
True,Regression,288,commons-validator,29db3b8d20363eddc3d63138eb4c171a38026a08,1ed5b4f9b1ae9136b2749fd0ef33f2efefc6762f,org.apache.commons.validator.routines.DomainValidatorTest.testAllowLocal,False,[],,,,org.apache.commons.validator.routines.domainvalidator.isvalid(string),"u'diff --git a/src/test/java/org/apache/commons/validator/routines/DomainValidatorTest.java b/src/test/java/org/apache/commons/validator/routines/DomainValidatorTest.java\nindex 9f4e2ecc..b089e68f 100644\n--- a/src/test/java/org/apache/commons/validator/routines/DomainValidatorTest.java\n+++ b/src/test/java/org/apache/commons/validator/routines/DomainValidatorTest.java\n@@ -99,6 +99,8 @@ public class DomainValidatorTest extends TestCase {\n        // But it may be requested\n        assertTrue(""localhost.localdomain should validate"", allowLocal.isValid(""localhost.localdomain""));\n        assertTrue(""localhost should validate"", allowLocal.isValid(""localhost""));\n+       assertTrue(""hostname should validate"", allowLocal.isValid(""hostname""));\n+       assertTrue(""machinename should validate"", allowLocal.isValid(""machinename""));\n        \n        // Check the localhost one with a few others\n        assertTrue(""apache.org should validate"", allowLocal.isValid(""apache.org""));'"
True,Regression,288,commons-validator,29db3b8d20363eddc3d63138eb4c171a38026a08,1ed5b4f9b1ae9136b2749fd0ef33f2efefc6762f,org.apache.commons.validator.routines.DomainValidatorTest.testAllowLocal,False,[],,,,org.apache.commons.validator.routines.domainvalidator.isvalid(string),"u'diff --git a/src/test/java/org/apache/commons/validator/routines/DomainValidatorTest.java b/src/test/java/org/apache/commons/validator/routines/DomainValidatorTest.java\nindex 9f4e2ecc..b089e68f 100644\n--- a/src/test/java/org/apache/commons/validator/routines/DomainValidatorTest.java\n+++ b/src/test/java/org/apache/commons/validator/routines/DomainValidatorTest.java\n@@ -99,6 +99,8 @@ public class DomainValidatorTest extends TestCase {\n        // But it may be requested\n        assertTrue(""localhost.localdomain should validate"", allowLocal.isValid(""localhost.localdomain""));\n        assertTrue(""localhost should validate"", allowLocal.isValid(""localhost""));\n+       assertTrue(""hostname should validate"", allowLocal.isValid(""hostname""));\n+       assertTrue(""machinename should validate"", allowLocal.isValid(""machinename""));\n        \n        // Check the localhost one with a few others\n        assertTrue(""apache.org should validate"", allowLocal.isValid(""apache.org""));'"
True,Delta,276,commons-validator,b9f179c29e965eb4e9bf15acb86d56c8d4b51088,0456e7a94e139a104f3190e41372511dc82538a5,org.apache.commons.validator.routines.UrlValidatorTest.testValidator276,False,[],,,,org.apache.commons.validator.routines.urlvalidator.isvalid(string),"u'diff --git a/src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java b/src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java\nindex 0b196f5a..28b9368c 100644\n--- a/src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java\n+++ b/src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java\n@@ -206,6 +206,59 @@ public class UrlValidatorTest extends TestCase {\n         assertTrue(""www.apache.org should still validate"",\n                 validator.isValid(""http://www.apache.org/test/index.html""));\n     }\n+    \n+    public void testValidator276() {\n+        // file:// isn\'t allowed by default\n+        UrlValidator validator = new UrlValidator();\n+        \n+        assertTrue(""http://apache.org/ should be allowed by default"",\n+                 validator.isValid(""http://www.apache.org/test/index.html""));\n+       \n+        assertFalse(""file:///c:/ shouldn\'t be allowed by default"",\n+                 validator.isValid(""file:///C:/some.file""));\n+        \n+        assertFalse(""file:///c:\\\\ shouldn\'t be allowed by default"",\n+              validator.isValid(""file:///C:\\\\some.file""));\n+        \n+        assertFalse(""file:///etc/ shouldn\'t be allowed by default"",\n+              validator.isValid(""file:///etc/hosts""));\n+        \n+        assertFalse(""file://localhost/etc/ shouldn\'t be allowed by default"",\n+              validator.isValid(""file://localhost/etc/hosts""));\n+        \n+        assertFalse(""file://localhost/c:/ shouldn\'t be allowed by default"",\n+              validator.isValid(""file://localhost/c:/some.file""));\n+        \n+        // Turn it on, and check\n+        // Note - we need to enable local urls when working with file:\n+        validator = new UrlValidator(new String[] {""http"",""file""}, UrlValidator.ALLOW_LOCAL_URLS);\n+        \n+        assertTrue(""http://apache.org/ should be allowed by default"",\n+                 validator.isValid(""http://www.apache.org/test/index.html""));\n+       \n+        assertTrue(""file:///c:/ should now be allowed"",\n+                 validator.isValid(""file:///C:/some.file""));\n+        \n+        // Currently, we don\'t support the c:\\ form\n+        assertFalse(""file:///c:\\\\ shouldn\'t be allowed"",\n+              validator.isValid(""file:///C:\\\\some.file""));\n+        \n+        assertTrue(""file:///etc/ should now be allowed"",\n+              validator.isValid(""file:///etc/hosts""));\n+        \n+        assertTrue(""file://localhost/etc/ should now be allowed"",\n+              validator.isValid(""file://localhost/etc/hosts""));\n+        \n+        assertTrue(""file://localhost/c:/ should now be allowed"",\n+              validator.isValid(""file://localhost/c:/some.file""));\n+        \n+        // These are never valid\n+        assertFalse(""file://c:/ shouldn\'t ever be allowed, needs file:///c:/"",\n+              validator.isValid(""file://C:/some.file""));\n+     \n+        assertFalse(""file://c:\\\\ shouldn\'t ever be allowed, needs file:///c:/"",\n+              validator.isValid(""file://C:\\\\some.file""));\n+    }\n \n     \n    static boolean incrementTestPartsIndex(int[] testPartsIndex, Object[] testParts) {'"
True,Delta,276,commons-validator,b9f179c29e965eb4e9bf15acb86d56c8d4b51088,0456e7a94e139a104f3190e41372511dc82538a5,org.apache.commons.validator.routines.UrlValidatorTest.testValidator276,False,[],,,,org.apache.commons.validator.routines.urlvalidator.isvalid(string),"u'diff --git a/src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java b/src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java\nindex 0b196f5a..28b9368c 100644\n--- a/src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java\n+++ b/src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java\n@@ -206,6 +206,59 @@ public class UrlValidatorTest extends TestCase {\n         assertTrue(""www.apache.org should still validate"",\n                 validator.isValid(""http://www.apache.org/test/index.html""));\n     }\n+    \n+    public void testValidator276() {\n+        // file:// isn\'t allowed by default\n+        UrlValidator validator = new UrlValidator();\n+        \n+        assertTrue(""http://apache.org/ should be allowed by default"",\n+                 validator.isValid(""http://www.apache.org/test/index.html""));\n+       \n+        assertFalse(""file:///c:/ shouldn\'t be allowed by default"",\n+                 validator.isValid(""file:///C:/some.file""));\n+        \n+        assertFalse(""file:///c:\\\\ shouldn\'t be allowed by default"",\n+              validator.isValid(""file:///C:\\\\some.file""));\n+        \n+        assertFalse(""file:///etc/ shouldn\'t be allowed by default"",\n+              validator.isValid(""file:///etc/hosts""));\n+        \n+        assertFalse(""file://localhost/etc/ shouldn\'t be allowed by default"",\n+              validator.isValid(""file://localhost/etc/hosts""));\n+        \n+        assertFalse(""file://localhost/c:/ shouldn\'t be allowed by default"",\n+              validator.isValid(""file://localhost/c:/some.file""));\n+        \n+        // Turn it on, and check\n+        // Note - we need to enable local urls when working with file:\n+        validator = new UrlValidator(new String[] {""http"",""file""}, UrlValidator.ALLOW_LOCAL_URLS);\n+        \n+        assertTrue(""http://apache.org/ should be allowed by default"",\n+                 validator.isValid(""http://www.apache.org/test/index.html""));\n+       \n+        assertTrue(""file:///c:/ should now be allowed"",\n+                 validator.isValid(""file:///C:/some.file""));\n+        \n+        // Currently, we don\'t support the c:\\ form\n+        assertFalse(""file:///c:\\\\ shouldn\'t be allowed"",\n+              validator.isValid(""file:///C:\\\\some.file""));\n+        \n+        assertTrue(""file:///etc/ should now be allowed"",\n+              validator.isValid(""file:///etc/hosts""));\n+        \n+        assertTrue(""file://localhost/etc/ should now be allowed"",\n+              validator.isValid(""file://localhost/etc/hosts""));\n+        \n+        assertTrue(""file://localhost/c:/ should now be allowed"",\n+              validator.isValid(""file://localhost/c:/some.file""));\n+        \n+        // These are never valid\n+        assertFalse(""file://c:/ shouldn\'t ever be allowed, needs file:///c:/"",\n+              validator.isValid(""file://C:/some.file""));\n+     \n+        assertFalse(""file://c:\\\\ shouldn\'t ever be allowed, needs file:///c:/"",\n+              validator.isValid(""file://C:\\\\some.file""));\n+    }\n \n     \n    static boolean incrementTestPartsIndex(int[] testPartsIndex, Object[] testParts) {'"
True,Delta,235,commons-validator,b2e6f04b917b3f39a73c64d7c15e3117233c74c3,17e2573b29ec41886e4e98cac3bc6611fafe243c,org.apache.commons.validator.routines.EmailValidatorTest.testValidator235,False,[],,,,org.apache.commons.validator.routines.emailvalidator.isvalid(string),"u'diff --git a/src/test/java/org/apache/commons/validator/routines/EmailValidatorTest.java b/src/test/java/org/apache/commons/validator/routines/EmailValidatorTest.java\nindex 22ef37dd..d228e265 100644\n--- a/src/test/java/org/apache/commons/validator/routines/EmailValidatorTest.java\n+++ b/src/test/java/org/apache/commons/validator/routines/EmailValidatorTest.java\n@@ -146,6 +146,20 @@ public class EmailValidatorTest extends TestCase {\n         assertFalse(validator.isValid(""someone@test-.com""));// hostname ends with dash/hyphen\n     }\n \n+    public void testValidator235() {\n+        String version = System.getProperty(""java.version"");\n+        if (version.compareTo(""1.6"") < 0) {\n+            System.out.println(""Cannot run Unicode IDN tests"");\n+            return; // Cannot run the test\n+        }\n+        assertTrue(""xn--d1abbgf6aiiy.xn--p1ai should validate"", validator.isValid(""someone@xn--d1abbgf6aiiy.xn--p1ai""));\n+        assertTrue(""\u043f\u0440\u0435\u0437\u0438\u0434\u0435\u043d\u0442.\u0440\u0444 should validate"", validator.isValid(""someone@\u043f\u0440\u0435\u0437\u0438\u0434\u0435\u043d\u0442.\u0440\u0444""));\n+        assertTrue(""www.b\\u00fccher.ch should validate"", validator.isValid(""someone@www.b\\u00fccher.ch""));\n+        assertFalse(""www.\\uFFFD.ch FFFD should fail"", validator.isValid(""someone@www.\\uFFFD.ch""));\n+        assertTrue(""www.b\\u00fccher.ch should validate"", validator.isValid(""someone@www.b\\u00fccher.ch""));\n+        assertFalse(""www.\\uFFFD.ch FFFD should fail"", validator.isValid(""someone@www.\\uFFFD.ch""));\n+    }\n+\n     /**\n     * Tests the email validation with commas.\n     */'"
True,Delta,235,commons-validator,b2e6f04b917b3f39a73c64d7c15e3117233c74c3,17e2573b29ec41886e4e98cac3bc6611fafe243c,org.apache.commons.validator.routines.EmailValidatorTest.testValidator235,False,[],,,,org.apache.commons.validator.routines.emailvalidator.isvalid(string),"u'diff --git a/src/test/java/org/apache/commons/validator/routines/EmailValidatorTest.java b/src/test/java/org/apache/commons/validator/routines/EmailValidatorTest.java\nindex 22ef37dd..d228e265 100644\n--- a/src/test/java/org/apache/commons/validator/routines/EmailValidatorTest.java\n+++ b/src/test/java/org/apache/commons/validator/routines/EmailValidatorTest.java\n@@ -146,6 +146,20 @@ public class EmailValidatorTest extends TestCase {\n         assertFalse(validator.isValid(""someone@test-.com""));// hostname ends with dash/hyphen\n     }\n \n+    public void testValidator235() {\n+        String version = System.getProperty(""java.version"");\n+        if (version.compareTo(""1.6"") < 0) {\n+            System.out.println(""Cannot run Unicode IDN tests"");\n+            return; // Cannot run the test\n+        }\n+        assertTrue(""xn--d1abbgf6aiiy.xn--p1ai should validate"", validator.isValid(""someone@xn--d1abbgf6aiiy.xn--p1ai""));\n+        assertTrue(""\u043f\u0440\u0435\u0437\u0438\u0434\u0435\u043d\u0442.\u0440\u0444 should validate"", validator.isValid(""someone@\u043f\u0440\u0435\u0437\u0438\u0434\u0435\u043d\u0442.\u0440\u0444""));\n+        assertTrue(""www.b\\u00fccher.ch should validate"", validator.isValid(""someone@www.b\\u00fccher.ch""));\n+        assertFalse(""www.\\uFFFD.ch FFFD should fail"", validator.isValid(""someone@www.\\uFFFD.ch""));\n+        assertTrue(""www.b\\u00fccher.ch should validate"", validator.isValid(""someone@www.b\\u00fccher.ch""));\n+        assertFalse(""www.\\uFFFD.ch FFFD should fail"", validator.isValid(""someone@www.\\uFFFD.ch""));\n+    }\n+\n     /**\n     * Tests the email validation with commas.\n     */'"
True,Regression,235,commons-validator,6f9df09337f9a7f07c2dc689b763cc033d613587,b2e6f04b917b3f39a73c64d7c15e3117233c74c3,org.apache.commons.validator.routines.UrlValidatorTest.testValidator235,False,[],,,,org.apache.commons.validator.routines.urlvalidator.isvalidauthority(string)@org.apache.commons.validator.routines.urlvalidator.isvalid(string),"u'diff --git a/src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java b/src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java\nindex 67f386d6..16b36d00 100644\n--- a/src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java\n+++ b/src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java\n@@ -153,6 +153,8 @@ public class UrlValidatorTest extends TestCase {\n        assertTrue(""\u043f\u0440\u0435\u0437\u0438\u0434\u0435\u043d\u0442.\u0440\u0444 should validate"", validator.isValid(""http://\u043f\u0440\u0435\u0437\u0438\u0434\u0435\u043d\u0442.\u0440\u0444""));\n        assertTrue(""www.b\\u00fccher.ch should validate"", validator.isValid(""http://www.b\\u00fccher.ch""));\n        assertFalse(""www.\\uFFFD.ch FFFD should fail"", validator.isValid(""http://www.\\uFFFD.ch""));\n+       assertTrue(""www.b\\u00fccher.ch should validate"", validator.isValid(""ftp://www.b\\u00fccher.ch""));\n+       assertFalse(""www.\\uFFFD.ch FFFD should fail"", validator.isValid(""ftp://www.\\uFFFD.ch""));\n    }\n \n     public void testValidator248() {'"
True,Regression,235,commons-validator,6f9df09337f9a7f07c2dc689b763cc033d613587,b2e6f04b917b3f39a73c64d7c15e3117233c74c3,org.apache.commons.validator.routines.UrlValidatorTest.testValidator235,False,[],,,,org.apache.commons.validator.routines.urlvalidator.isvalidauthority(string)@org.apache.commons.validator.routines.urlvalidator.isvalid(string),"u'diff --git a/src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java b/src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java\nindex 67f386d6..16b36d00 100644\n--- a/src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java\n+++ b/src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java\n@@ -153,6 +153,8 @@ public class UrlValidatorTest extends TestCase {\n        assertTrue(""\u043f\u0440\u0435\u0437\u0438\u0434\u0435\u043d\u0442.\u0440\u0444 should validate"", validator.isValid(""http://\u043f\u0440\u0435\u0437\u0438\u0434\u0435\u043d\u0442.\u0440\u0444""));\n        assertTrue(""www.b\\u00fccher.ch should validate"", validator.isValid(""http://www.b\\u00fccher.ch""));\n        assertFalse(""www.\\uFFFD.ch FFFD should fail"", validator.isValid(""http://www.\\uFFFD.ch""));\n+       assertTrue(""www.b\\u00fccher.ch should validate"", validator.isValid(""ftp://www.b\\u00fccher.ch""));\n+       assertFalse(""www.\\uFFFD.ch FFFD should fail"", validator.isValid(""ftp://www.\\uFFFD.ch""));\n    }\n \n     public void testValidator248() {'"
True,Delta,235,commons-validator,279f3461b310661bac99cf13791feab3f9b22c61,58452d010b64dae687eee8bc50a4444916cfeee3,org.apache.commons.validator.routines.UrlValidatorTest.testValidator235,False,[],,,,org.apache.commons.validator.routines.urlvalidator.isvalid(string),"u'diff --git a/src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java b/src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java\nindex 5eb16722..67f386d6 100644\n--- a/src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java\n+++ b/src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java\n@@ -142,6 +142,19 @@ public class UrlValidatorTest extends TestCase {\n                validator.isValid(""http://somewhere.com/pathxyz/file(1).html""));\n    }\n \n+   public void testValidator235() {\n+       String version = System.getProperty(""java.version"");\n+       if (version.compareTo(""1.6"") < 0) {\n+           System.out.println(""Cannot run Unicode IDN tests"");\n+           return; // Cannot run the test\n+       }\n+       UrlValidator validator = new UrlValidator();\n+       assertTrue(""xn--d1abbgf6aiiy.xn--p1ai should validate"", validator.isValid(""http://xn--d1abbgf6aiiy.xn--p1ai""));\n+       assertTrue(""\u043f\u0440\u0435\u0437\u0438\u0434\u0435\u043d\u0442.\u0440\u0444 should validate"", validator.isValid(""http://\u043f\u0440\u0435\u0437\u0438\u0434\u0435\u043d\u0442.\u0440\u0444""));\n+       assertTrue(""www.b\\u00fccher.ch should validate"", validator.isValid(""http://www.b\\u00fccher.ch""));\n+       assertFalse(""www.\\uFFFD.ch FFFD should fail"", validator.isValid(""http://www.\\uFFFD.ch""));\n+   }\n+\n     public void testValidator248() {\n         RegexValidator regex = new RegexValidator(new String[] {""localhost"", "".*\\\\.my-testing""});\n         UrlValidator validator = new UrlValidator(regex, 0);'"
True,Delta,235,commons-validator,279f3461b310661bac99cf13791feab3f9b22c61,58452d010b64dae687eee8bc50a4444916cfeee3,org.apache.commons.validator.routines.UrlValidatorTest.testValidator235,False,[],,,,org.apache.commons.validator.routines.urlvalidator.isvalid(string),"u'diff --git a/src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java b/src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java\nindex 5eb16722..67f386d6 100644\n--- a/src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java\n+++ b/src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java\n@@ -142,6 +142,19 @@ public class UrlValidatorTest extends TestCase {\n                validator.isValid(""http://somewhere.com/pathxyz/file(1).html""));\n    }\n \n+   public void testValidator235() {\n+       String version = System.getProperty(""java.version"");\n+       if (version.compareTo(""1.6"") < 0) {\n+           System.out.println(""Cannot run Unicode IDN tests"");\n+           return; // Cannot run the test\n+       }\n+       UrlValidator validator = new UrlValidator();\n+       assertTrue(""xn--d1abbgf6aiiy.xn--p1ai should validate"", validator.isValid(""http://xn--d1abbgf6aiiy.xn--p1ai""));\n+       assertTrue(""\u043f\u0440\u0435\u0437\u0438\u0434\u0435\u043d\u0442.\u0440\u0444 should validate"", validator.isValid(""http://\u043f\u0440\u0435\u0437\u0438\u0434\u0435\u043d\u0442.\u0440\u0444""));\n+       assertTrue(""www.b\\u00fccher.ch should validate"", validator.isValid(""http://www.b\\u00fccher.ch""));\n+       assertFalse(""www.\\uFFFD.ch FFFD should fail"", validator.isValid(""http://www.\\uFFFD.ch""));\n+   }\n+\n     public void testValidator248() {\n         RegexValidator regex = new RegexValidator(new String[] {""localhost"", "".*\\\\.my-testing""});\n         UrlValidator validator = new UrlValidator(regex, 0);'"
